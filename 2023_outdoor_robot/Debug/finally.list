
finally.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800a430  0800a430  0001a430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a978  0800a978  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a978  0800a978  0001a978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a980  0800a980  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a980  0800a980  0001a980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a984  0800a984  0001a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000494  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000668  20000668  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ec8e  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ff5  00000000  00000000  0002eed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d30  00000000  00000000  00031ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009ce  00000000  00000000  00032c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000236eb  00000000  00000000  000335ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000117a2  00000000  00000000  00056cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c7195  00000000  00000000  0006845b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004b1c  00000000  00000000  0012f5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  0013410c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a418 	.word	0x0800a418

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a418 	.word	0x0800a418

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <serial_write>:
//void HAL_DMA_STATE_CHANGE(UART_HandleTypeDef *huart)
//{
//  huart->gState = HAL_UART_STATE_READY;
//}

void serial_write(SERIAL_HandleTypeDef* hserial, uint8_t *pData, uint16_t len) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	80fb      	strh	r3, [r7, #6]

	if (ring_buffer_is_empty(hserial->buffer_Tx)) {
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fdb6 	bl	8001b74 <ring_buffer_is_empty>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d011      	beq.n	8001032 <serial_write+0x42>
			if (HAL_UART_Transmit_DMA(hserial->huartx, pData, len) != HAL_OK) {
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	88fa      	ldrh	r2, [r7, #6]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	4618      	mov	r0, r3
 8001018:	f003 f950 	bl	80042bc <HAL_UART_Transmit_DMA>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d015      	beq.n	800104e <serial_write+0x5e>
				ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	88fa      	ldrh	r2, [r7, #6]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fe06 	bl	8001c3c <ring_buffer_queue_arr>

				HAL_UART_Transmit(&huart5,pData,len,HAL_MAX_DELAY);

					}

				}
 8001030:	e00d      	b.n	800104e <serial_write+0x5e>
				ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fdfe 	bl	8001c3c <ring_buffer_queue_arr>
				HAL_UART_Transmit(&huart5,pData,len,HAL_MAX_DELAY);
 8001040:	88fa      	ldrh	r2, [r7, #6]
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	68b9      	ldr	r1, [r7, #8]
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <serial_write+0x68>)
 800104a:	f003 f874 	bl	8004136 <HAL_UART_Transmit>
				}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000348 	.word	0x20000348

0800105c <serial_available>:



uint8_t serial_available(SERIAL_HandleTypeDef* hserial) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

	return !ring_buffer_is_empty(hserial->buffer_Rx);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fd83 	bl	8001b74 <ring_buffer_is_empty>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <serial_read>:

uint8_t serial_read(SERIAL_HandleTypeDef* hserial) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]

		if (!ring_buffer_is_empty(hserial->buffer_Rx)) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fd70 	bl	8001b74 <ring_buffer_is_empty>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10b      	bne.n	80010b2 <serial_read+0x30>
			ring_buffer_dequeue(hserial->buffer_Rx, hserial->application_reg_Rx);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4619      	mov	r1, r3
 80010a4:	4610      	mov	r0, r2
 80010a6:	f000 fde7 	bl	8001c78 <ring_buffer_dequeue>
			return *(hserial->application_reg_Rx);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	e000      	b.n	80010b4 <serial_read+0x32>
		}

		return '\0';
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_UART_ErrorCallback>:
//
//	ring_buffer_queue_arr(serial_handler->buffer_Rx, serial_handler->hal_reg_Rx, PRIMARY_REG_SIZE);
//	HAL_UART_Receive_DMA(huart, serial_handler->hal_reg_Rx, PRIMARY_REG_SIZE);
//}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart5) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	if (huart5->ErrorCode == HAL_UART_ERROR_ORE) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	}
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <APP_VALUE_PARSE_CallBack>:
//앱인벤터에서 보낸 값 넣는 변수 형식 => 각도,거리#
float GPS_angle;
float GPS_distance;
uint8_t point;

void APP_VALUE_PARSE_CallBack(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
	//앱인벤터에서 보낸 각도와 거리를 받아서 파싱하는 함수
	//rx3_data1의 문자열에 rx3_data(앱인벤터에서 보낸 값)을 넣는데 1바이트씩 각 인덱스 방에 넣기 시작
	rx3_data1[cnt++] = (char) rx3_data;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <APP_VALUE_PARSE_CallBack+0x4c>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	b2d1      	uxtb	r1, r2
 80010e2:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <APP_VALUE_PARSE_CallBack+0x4c>)
 80010e4:	7011      	strb	r1, [r2, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <APP_VALUE_PARSE_CallBack+0x50>)
 80010ea:	7819      	ldrb	r1, [r3, #0]
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <APP_VALUE_PARSE_CallBack+0x54>)
 80010ee:	5499      	strb	r1, [r3, r2]
	//앱인벤터에서 보내는 하나의 패킷이 '#'으로 끝나게 만들었기 때문에 마지막 바이트가 '#'으로 들어오면
	//cnt=0으로 만들어주어서 다시 값을 첨부터 받을 준비하기 => 다음에 값을 받을떄 덮어씌우기 형
	if(rx3_data == '#') cnt = 0;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <APP_VALUE_PARSE_CallBack+0x50>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b23      	cmp	r3, #35	; 0x23
 80010f6:	d102      	bne.n	80010fe <APP_VALUE_PARSE_CallBack+0x2a>
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <APP_VALUE_PARSE_CallBack+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	//sscanf는 내가 들어오는 문자열 형식을 알떄 각각의 변수에 할당시킬 수 있음
	sscanf(rx3_data1, "%f,%f,%d#", &GPS_angle, &GPS_distance,&point);
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <APP_VALUE_PARSE_CallBack+0x58>)
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <APP_VALUE_PARSE_CallBack+0x5c>)
 8001104:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <APP_VALUE_PARSE_CallBack+0x60>)
 8001106:	490c      	ldr	r1, [pc, #48]	; (8001138 <APP_VALUE_PARSE_CallBack+0x64>)
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <APP_VALUE_PARSE_CallBack+0x54>)
 800110a:	f005 f821 	bl	8006150 <siscanf>
	//BLUETOOTH_USART=>&huart1을 뜻
	HAL_UART_Receive_IT(BLUETOOTH_USART, &rx3_data, sizeof(rx3_data));
 800110e:	2201      	movs	r2, #1
 8001110:	4904      	ldr	r1, [pc, #16]	; (8001124 <APP_VALUE_PARSE_CallBack+0x50>)
 8001112:	480a      	ldr	r0, [pc, #40]	; (800113c <APP_VALUE_PARSE_CallBack+0x68>)
 8001114:	f003 f8a1 	bl	800425a <HAL_UART_Receive_IT>
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001f0 	.word	0x200001f0
 8001124:	200001f1 	.word	0x200001f1
 8001128:	200001f4 	.word	0x200001f4
 800112c:	20000218 	.word	0x20000218
 8001130:	20000214 	.word	0x20000214
 8001134:	20000210 	.word	0x20000210
 8001138:	0800a430 	.word	0x0800a430
 800113c:	200003d0 	.word	0x200003d0

08001140 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_CRC_Init+0x20>)
 8001146:	4a07      	ldr	r2, [pc, #28]	; (8001164 <MX_CRC_Init+0x24>)
 8001148:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_CRC_Init+0x20>)
 800114c:	f001 fd29 	bl	8002ba2 <HAL_CRC_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001156:	f000 fbd1 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000021c 	.word	0x2000021c
 8001164:	40023000 	.word	0x40023000

08001168 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <HAL_CRC_MspInit+0x3c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d10d      	bne.n	8001196 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_CRC_MspInit+0x40>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <HAL_CRC_MspInit+0x40>)
 8001184:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <HAL_CRC_MspInit+0x40>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023000 	.word	0x40023000
 80011a8:	40023800 	.word	0x40023800

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_DMA_Init+0x4c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <MX_DMA_Init+0x4c>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <MX_DMA_Init+0x4c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	200b      	movs	r0, #11
 80011d4:	f001 fcaf 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011d8:	200b      	movs	r0, #11
 80011da:	f001 fcc8 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	202f      	movs	r0, #47	; 0x2f
 80011e4:	f001 fca7 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80011e8:	202f      	movs	r0, #47	; 0x2f
 80011ea:	f001 fcc0 	bl	8002b6e <HAL_NVIC_EnableIRQ>

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_GPIO_Init+0x84>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <MX_GPIO_Init+0x84>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_GPIO_Init+0x84>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_GPIO_Init+0x84>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a16      	ldr	r2, [pc, #88]	; (8001280 <MX_GPIO_Init+0x84>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_GPIO_Init+0x84>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_GPIO_Init+0x84>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <MX_GPIO_Init+0x84>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_GPIO_Init+0x84>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_GPIO_Init+0x84>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <MX_GPIO_Init+0x84>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_GPIO_Init+0x84>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	4903      	ldr	r1, [pc, #12]	; (8001298 <GPS_Init+0x14>)
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <GPS_Init+0x18>)
 800128e:	f002 ffe4 	bl	800425a <HAL_UART_Receive_IT>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000224 	.word	0x20000224
 800129c:	2000038c 	.word	0x2000038c

080012a0 <GPS_UART_CallBack>:

void GPS_UART_CallBack(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <GPS_UART_CallBack+0x60>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b0a      	cmp	r3, #10
 80012aa:	d010      	beq.n	80012ce <GPS_UART_CallBack+0x2e>
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <GPS_UART_CallBack+0x64>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	db0b      	blt.n	80012ce <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <GPS_UART_CallBack+0x64>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	b2d1      	uxtb	r1, r2
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <GPS_UART_CallBack+0x64>)
 80012c0:	7011      	strb	r1, [r2, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <GPS_UART_CallBack+0x60>)
 80012c6:	7819      	ldrb	r1, [r3, #0]
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <GPS_UART_CallBack+0x68>)
 80012ca:	5499      	strb	r1, [r3, r2]
 80012cc:	e010      	b.n	80012f0 <GPS_UART_CallBack+0x50>

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 80012ce:	480e      	ldr	r0, [pc, #56]	; (8001308 <GPS_UART_CallBack+0x68>)
 80012d0:	f000 f850 	bl	8001374 <GPS_validate>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 80012da:	480b      	ldr	r0, [pc, #44]	; (8001308 <GPS_UART_CallBack+0x68>)
 80012dc:	f000 f8ac 	bl	8001438 <GPS_parse>
		rx_index = 0;
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <GPS_UART_CallBack+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	2100      	movs	r1, #0
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <GPS_UART_CallBack+0x68>)
 80012ec:	f005 fefa 	bl	80070e4 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80012f0:	2201      	movs	r2, #1
 80012f2:	4903      	ldr	r1, [pc, #12]	; (8001300 <GPS_UART_CallBack+0x60>)
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <GPS_UART_CallBack+0x6c>)
 80012f6:	f002 ffb0 	bl	800425a <HAL_UART_Receive_IT>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000224 	.word	0x20000224
 8001304:	200002a8 	.word	0x200002a8
 8001308:	20000228 	.word	0x20000228
 800130c:	2000038c 	.word	0x2000038c

08001310 <GPS_SendData>:

void GPS_SendData()
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b096      	sub	sp, #88	; 0x58
 8001314:	af02      	add	r7, sp, #8
  /* Send data via UART */
//앱인벤터로 파싱한 gps값을 보내는 함
  char buffer[80];

  sprintf(buffer, "%f,%f, ", GPS.dec_latitude, GPS.dec_longitude);
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <GPS_SendData+0x58>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f914 	bl	8000548 <__aeabi_f2d>
 8001320:	4604      	mov	r4, r0
 8001322:	460d      	mov	r5, r1
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <GPS_SendData+0x58>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f90d 	bl	8000548 <__aeabi_f2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4638      	mov	r0, r7
 8001334:	e9cd 2300 	strd	r2, r3, [sp]
 8001338:	4622      	mov	r2, r4
 800133a:	462b      	mov	r3, r5
 800133c:	490b      	ldr	r1, [pc, #44]	; (800136c <GPS_SendData+0x5c>)
 800133e:	f004 fee7 	bl	8006110 <siprintf>

  HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8001342:	463b      	mov	r3, r7
 8001344:	4618      	mov	r0, r3
 8001346:	f7fe ff93 	bl	8000270 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	b29a      	uxth	r2, r3
 800134e:	4639      	mov	r1, r7
 8001350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001354:	4806      	ldr	r0, [pc, #24]	; (8001370 <GPS_SendData+0x60>)
 8001356:	f002 feee 	bl	8004136 <HAL_UART_Transmit>
  HAL_Delay(200);
 800135a:	20c8      	movs	r0, #200	; 0xc8
 800135c:	f001 faec 	bl	8002938 <HAL_Delay>
}
 8001360:	bf00      	nop
 8001362:	3750      	adds	r7, #80	; 0x50
 8001364:	46bd      	mov	sp, r7
 8001366:	bdb0      	pop	{r4, r5, r7, pc}
 8001368:	200002ac 	.word	0x200002ac
 800136c:	0800a450 	.word	0x0800a450
 8001370:	200003d0 	.word	0x200003d0

08001374 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b24      	cmp	r3, #36	; 0x24
 800138e:	d103      	bne.n	8001398 <GPS_validate+0x24>
        i++;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001396:	e00c      	b.n	80013b2 <GPS_validate+0x3e>
        return 0;
 8001398:	2300      	movs	r3, #0
 800139a:	e047      	b.n	800142c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4053      	eors	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        i++;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d008      	beq.n	80013d0 <GPS_validate+0x5c>
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b2a      	cmp	r3, #42	; 0x2a
 80013c8:	d002      	beq.n	80013d0 <GPS_validate+0x5c>
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b4a      	cmp	r3, #74	; 0x4a
 80013ce:	dde5      	ble.n	800139c <GPS_validate+0x28>
    }

    if(i >= 75){
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2b4a      	cmp	r3, #74	; 0x4a
 80013d4:	dd01      	ble.n	80013da <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80013d6:	2300      	movs	r3, #0
 80013d8:	e028      	b.n	800142c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b2a      	cmp	r3, #42	; 0x2a
 80013e4:	d119      	bne.n	800141a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3302      	adds	r3, #2
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	490a      	ldr	r1, [pc, #40]	; (8001434 <GPS_validate+0xc0>)
 800140a:	4618      	mov	r0, r3
 800140c:	f004 fe80 	bl	8006110 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001410:	7a3a      	ldrb	r2, [r7, #8]
 8001412:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001414:	429a      	cmp	r2, r3
 8001416:	d108      	bne.n	800142a <GPS_validate+0xb6>
 8001418:	e001      	b.n	800141e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800141a:	2300      	movs	r3, #0
 800141c:	e006      	b.n	800142c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800141e:	7a7a      	ldrb	r2, [r7, #9]
 8001420:	7b7b      	ldrb	r3, [r7, #13]
 8001422:	429a      	cmp	r2, r3
 8001424:	d101      	bne.n	800142a <GPS_validate+0xb6>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <GPS_validate+0xb8>
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	0800a458 	.word	0x0800a458

08001438 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af08      	add	r7, sp, #32
 800143e:	6078      	str	r0, [r7, #4]

	  if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8001440:	2206      	movs	r2, #6
 8001442:	494a      	ldr	r1, [pc, #296]	; (800156c <GPS_parse+0x134>)
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f005 fe3b 	bl	80070c0 <strncmp>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d12f      	bne.n	80014b0 <GPS_parse+0x78>
	        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001450:	4b47      	ldr	r3, [pc, #284]	; (8001570 <GPS_parse+0x138>)
 8001452:	9303      	str	r3, [sp, #12]
 8001454:	4b47      	ldr	r3, [pc, #284]	; (8001574 <GPS_parse+0x13c>)
 8001456:	9302      	str	r3, [sp, #8]
 8001458:	4b47      	ldr	r3, [pc, #284]	; (8001578 <GPS_parse+0x140>)
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	4b47      	ldr	r3, [pc, #284]	; (800157c <GPS_parse+0x144>)
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <GPS_parse+0x148>)
 8001462:	4a48      	ldr	r2, [pc, #288]	; (8001584 <GPS_parse+0x14c>)
 8001464:	4948      	ldr	r1, [pc, #288]	; (8001588 <GPS_parse+0x150>)
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f004 fe72 	bl	8006150 <siscanf>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	dd0e      	ble.n	8001490 <GPS_parse+0x58>
	        							GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001472:	4b46      	ldr	r3, [pc, #280]	; (800158c <GPS_parse+0x154>)
 8001474:	edd3 7a04 	vldr	s15, [r3, #16]
 8001478:	4b44      	ldr	r3, [pc, #272]	; (800158c <GPS_parse+0x154>)
 800147a:	7e1b      	ldrb	r3, [r3, #24]
 800147c:	4618      	mov	r0, r3
 800147e:	eeb0 0a67 	vmov.f32	s0, s15
 8001482:	f000 f8af 	bl	80015e4 <GPS_nmea_to_dec>
 8001486:	eef0 7a40 	vmov.f32	s15, s0
 800148a:	4b40      	ldr	r3, [pc, #256]	; (800158c <GPS_parse+0x154>)
 800148c:	edc3 7a01 	vstr	s15, [r3, #4]
	        	    		    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <GPS_parse+0x154>)
 8001492:	edd3 7a03 	vldr	s15, [r3, #12]
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <GPS_parse+0x154>)
 8001498:	7e5b      	ldrb	r3, [r3, #25]
 800149a:	4618      	mov	r0, r3
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f000 f8a0 	bl	80015e4 <GPS_nmea_to_dec>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	4b38      	ldr	r3, [pc, #224]	; (800158c <GPS_parse+0x154>)
 80014aa:	edc3 7a00 	vstr	s15, [r3]
	        	return;
 80014ae:	e059      	b.n	8001564 <GPS_parse+0x12c>
	    }

	else if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 80014b0:	2206      	movs	r2, #6
 80014b2:	4937      	ldr	r1, [pc, #220]	; (8001590 <GPS_parse+0x158>)
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f005 fe03 	bl	80070c0 <strncmp>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d118      	bne.n	80014f2 <GPS_parse+0xba>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80014c0:	4b34      	ldr	r3, [pc, #208]	; (8001594 <GPS_parse+0x15c>)
 80014c2:	9307      	str	r3, [sp, #28]
 80014c4:	4b34      	ldr	r3, [pc, #208]	; (8001598 <GPS_parse+0x160>)
 80014c6:	9306      	str	r3, [sp, #24]
 80014c8:	4b34      	ldr	r3, [pc, #208]	; (800159c <GPS_parse+0x164>)
 80014ca:	9305      	str	r3, [sp, #20]
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <GPS_parse+0x168>)
 80014ce:	9304      	str	r3, [sp, #16]
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <GPS_parse+0x16c>)
 80014d2:	9303      	str	r3, [sp, #12]
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <GPS_parse+0x140>)
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <GPS_parse+0x144>)
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <GPS_parse+0x148>)
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <GPS_parse+0x14c>)
 80014e2:	4a24      	ldr	r2, [pc, #144]	; (8001574 <GPS_parse+0x13c>)
 80014e4:	4930      	ldr	r1, [pc, #192]	; (80015a8 <GPS_parse+0x170>)
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f004 fe32 	bl	8006150 <siscanf>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	e038      	b.n	8001564 <GPS_parse+0x12c>

    		return;
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80014f2:	2206      	movs	r2, #6
 80014f4:	492d      	ldr	r1, [pc, #180]	; (80015ac <GPS_parse+0x174>)
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f005 fde2 	bl	80070c0 <strncmp>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d114      	bne.n	800152c <GPS_parse+0xf4>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%c,%f,%c,%f,%c,%f,%d,", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <GPS_parse+0x178>)
 8001504:	9305      	str	r3, [sp, #20]
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <GPS_parse+0x17c>)
 8001508:	9304      	str	r3, [sp, #16]
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <GPS_parse+0x180>)
 800150c:	9303      	str	r3, [sp, #12]
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <GPS_parse+0x140>)
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <GPS_parse+0x144>)
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <GPS_parse+0x148>)
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <GPS_parse+0x14c>)
 800151c:	4a15      	ldr	r2, [pc, #84]	; (8001574 <GPS_parse+0x13c>)
 800151e:	4927      	ldr	r1, [pc, #156]	; (80015bc <GPS_parse+0x184>)
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f004 fe15 	bl	8006150 <siscanf>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	e01b      	b.n	8001564 <GPS_parse+0x12c>

    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 800152c:	2206      	movs	r2, #6
 800152e:	4924      	ldr	r1, [pc, #144]	; (80015c0 <GPS_parse+0x188>)
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f005 fdc5 	bl	80070c0 <strncmp>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d113      	bne.n	8001564 <GPS_parse+0x12c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <GPS_parse+0x18c>)
 800153e:	9305      	str	r3, [sp, #20]
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <GPS_parse+0x190>)
 8001542:	9304      	str	r3, [sp, #16]
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <GPS_parse+0x194>)
 8001546:	9303      	str	r3, [sp, #12]
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <GPS_parse+0x180>)
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <GPS_parse+0x198>)
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <GPS_parse+0x19c>)
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <GPS_parse+0x1a0>)
 8001556:	4a21      	ldr	r2, [pc, #132]	; (80015dc <GPS_parse+0x1a4>)
 8001558:	4921      	ldr	r1, [pc, #132]	; (80015e0 <GPS_parse+0x1a8>)
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f004 fdf8 	bl	8006150 <siscanf>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
            return;
    }
}
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	0800a460 	.word	0x0800a460
 8001570:	200002e8 	.word	0x200002e8
 8001574:	200002c0 	.word	0x200002c0
 8001578:	200002c5 	.word	0x200002c5
 800157c:	200002b8 	.word	0x200002b8
 8001580:	200002c4 	.word	0x200002c4
 8001584:	200002bc 	.word	0x200002bc
 8001588:	0800a468 	.word	0x0800a468
 800158c:	200002ac 	.word	0x200002ac
 8001590:	0800a484 	.word	0x0800a484
 8001594:	200002d8 	.word	0x200002d8
 8001598:	200002d4 	.word	0x200002d4
 800159c:	200002d0 	.word	0x200002d0
 80015a0:	200002cc 	.word	0x200002cc
 80015a4:	200002c8 	.word	0x200002c8
 80015a8:	0800a48c 	.word	0x0800a48c
 80015ac:	0800a4b4 	.word	0x0800a4b4
 80015b0:	200002e4 	.word	0x200002e4
 80015b4:	200002e0 	.word	0x200002e0
 80015b8:	200002dc 	.word	0x200002dc
 80015bc:	0800a4bc 	.word	0x0800a4bc
 80015c0:	0800a4dc 	.word	0x0800a4dc
 80015c4:	20000300 	.word	0x20000300
 80015c8:	200002fc 	.word	0x200002fc
 80015cc:	200002f9 	.word	0x200002f9
 80015d0:	200002f8 	.word	0x200002f8
 80015d4:	200002f4 	.word	0x200002f4
 80015d8:	200002f0 	.word	0x200002f0
 80015dc:	200002ec 	.word	0x200002ec
 80015e0:	0800a4e4 	.word	0x0800a4e4

080015e4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80015ee:	4603      	mov	r3, r0
 80015f0:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80015f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80015f6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001678 <GPS_nmea_to_dec+0x94>
 80015fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001602:	ee17 3a90 	vmov	r3, s15
 8001606:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	2264      	movs	r2, #100	; 0x64
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	ee07 3a90 	vmov	s15, r3
 8001614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001618:	ed97 7a01 	vldr	s14, [r7, #4]
 800161c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001620:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001624:	ed97 7a03 	vldr	s14, [r7, #12]
 8001628:	eddf 6a14 	vldr	s13, [pc, #80]	; 800167c <GPS_nmea_to_dec+0x98>
 800162c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001630:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001646:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	2b53      	cmp	r3, #83	; 0x53
 800164e:	d002      	beq.n	8001656 <GPS_nmea_to_dec+0x72>
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	2b57      	cmp	r3, #87	; 0x57
 8001654:	d105      	bne.n	8001662 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001656:	edd7 7a05 	vldr	s15, [r7, #20]
 800165a:	eef1 7a67 	vneg.f32	s15, s15
 800165e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	ee07 3a90 	vmov	s15, r3
}
 8001668:	eeb0 0a67 	vmov.f32	s0, s15
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	42c80000 	.word	0x42c80000
 800167c:	42700000 	.word	0x42700000

08001680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001684:	f001 f8e6 	bl	8002854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001688:	f000 f8a4 	bl	80017d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168c:	f7ff fdb6 	bl	80011fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001690:	f7ff fd8c 	bl	80011ac <MX_DMA_Init>
  MX_UART5_Init();
 8001694:	f000 fe7a 	bl	800238c <MX_UART5_Init>
  MX_USART2_UART_Init();
 8001698:	f000 fea2 	bl	80023e0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800169c:	f000 feca 	bl	8002434 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80016a0:	f7ff fd4e 	bl	8001140 <MX_CRC_Init>
  MX_RNG_Init();
 80016a4:	f000 fb14 	bl	8001cd0 <MX_RNG_Init>
  MX_USART6_UART_Init();
 80016a8:	f000 feee 	bl	8002488 <MX_USART6_UART_Init>
  //  MX_USART3_UART_Init(); 		bluetooth o
  //  MX_UART5_Init();				motor o
  //  MX_USART6_UART_Init();		serial o
  //  MX_I2C1_Init(); 				tof

  MOTOR_Init();																	// MOTOR default code
 80016ac:	f000 f92c 	bl	8001908 <MOTOR_Init>
  GPS_Init();																	// GPS default code
 80016b0:	f7ff fde8 	bl	8001284 <GPS_Init>
  //bluetooth의 uart포트를 바꾸고 싶으면 'bluetooth.h'에서 BLUETOOTH_USART에 할당된 ()안의 값만 바꾸면
  HAL_UART_Receive_IT(BLUETOOTH_USART,&rx3_data, sizeof(rx3_data));
 80016b4:	2201      	movs	r2, #1
 80016b6:	493b      	ldr	r1, [pc, #236]	; (80017a4 <main+0x124>)
 80016b8:	483b      	ldr	r0, [pc, #236]	; (80017a8 <main+0x128>)
 80016ba:	f002 fdce 	bl	800425a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, &enc, 1);
 80016be:	2201      	movs	r2, #1
 80016c0:	493a      	ldr	r1, [pc, #232]	; (80017ac <main+0x12c>)
 80016c2:	483b      	ldr	r0, [pc, #236]	; (80017b0 <main+0x130>)
 80016c4:	f002 fdc9 	bl	800425a <HAL_UART_Receive_IT>
  while (1)
  {
	  //앱인벤터로 gps값을 보내는 함수로 계속 이함수를 사용해줘야 앱인벤터로 지속적으로 gps값이 들어갈 수 있음

//	  SIBAL_SendData();
	  GPS_SendData();
 80016c8:	f7ff fe22 	bl	8001310 <GPS_SendData>
//////	  GETENCODERSM1M2(&hroboClaw1);
//	  //우리가 앱인벤터로 받은 값이 파싱이  잘 되었는지 보기위한 함수
//	  ResetEnc();
//	  B_turn(8);

	  if(point != 236){
 80016cc:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <main+0x134>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2bec      	cmp	r3, #236	; 0xec
 80016d2:	d060      	beq.n	8001796 <main+0x116>
//	  AppValue_SendData1();
//	  if(start ==2 || ((check == 1 || check1 == 1) ||(GPS_angle >-5 && GPS_angle<5))){
		  if(start !=2){
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <main+0x138>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d003      	beq.n	80016e4 <main+0x64>
			 // 처음에 각도를 받았으니 check 0으로 다시 셋팅
//			  ResetEnc();
			  APP_angle = GPS_angle;
 80016dc:	4b37      	ldr	r3, [pc, #220]	; (80017bc <main+0x13c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a37      	ldr	r2, [pc, #220]	; (80017c0 <main+0x140>)
 80016e2:	6013      	str	r3, [r2, #0]
	//		  APP_distance =GPS_distance;
		  }
	//	  if((start ==2 || (check != 1||check1 != 1))&&(GPS_angle <-5  || GPS_angle>5)){
//		  if(start ==2 || (GPS_angle <-5  || GPS_angle>5)){

			  if(start !=2 && (GPS_angle <-5  || GPS_angle>5)){
 80016e4:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <main+0x138>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d017      	beq.n	800171c <main+0x9c>
 80016ec:	4b33      	ldr	r3, [pc, #204]	; (80017bc <main+0x13c>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80016f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d409      	bmi.n	8001714 <main+0x94>
 8001700:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <main+0x13c>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800170a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800170e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001712:	dd03      	ble.n	800171c <main+0x9c>
	//	  		  check1=0;// 처음에 각도를 받았으니 check 0으로 다시 셋팅
	//	  		  APP_angle = GPS_angle;
				  APP_distance =GPS_distance;
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <main+0x144>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a2b      	ldr	r2, [pc, #172]	; (80017c8 <main+0x148>)
 800171a:	6013      	str	r3, [r2, #0]
			  }
			  if(start == 1){//LCD에서 출발 버튼을 눌렀을때->  일단은 앱인벤터로부터 gps 값을 받았을때
 800171c:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <main+0x138>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d11d      	bne.n	8001760 <main+0xe0>
				  B_turn(APP_angle);
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <main+0x140>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	f000 f973 	bl	8001a18 <B_turn>
	//			  Uart_send(APP_angle, APP_distance);
				  if(check1 >0){ //
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <main+0x14c>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <main+0xc8>
	//				  check=0;
//					  check1=0;
					  B_Forward(APP_distance);
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <main+0x148>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	eeb0 0a67 	vmov.f32	s0, s15
 8001744:	f000 f91c 	bl	8001980 <B_Forward>
	//				  Uart_send1(APP_angle, APP_distance);
				  }
				  if(point==1 ||point == 2){
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <main+0x134>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d003      	beq.n	8001758 <main+0xd8>
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <main+0x134>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d1b7      	bne.n	80016c8 <main+0x48>
					  start =2;
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <main+0x138>)
 800175a:	2202      	movs	r2, #2
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	e7b3      	b.n	80016c8 <main+0x48>
				  }
			  }else if(start == 2 ){// 코드가 실행되는 동안 point가 바뀌어서 실행이 안될수도??
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <main+0x138>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d1af      	bne.n	80016c8 <main+0x48>
				  if(point ==2){// 최종 목적지에 도착했을떄 실행
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <main+0x134>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d105      	bne.n	800177c <main+0xfc>
					  check1 =0;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <main+0x14c>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]

					  ResetEnc();
 8001776:	f000 f8eb 	bl	8001950 <ResetEnc>
 800177a:	e7a5      	b.n	80016c8 <main+0x48>
//					  Uart_Number_send();

				  }
		//			  DriveM1M2withSpeedandPosition(&hroboClaw1, 0,0,0,0);            // Forward 1m distance
		//			  DriveM1M2withSpeedandPosition(&hroboClaw2, 0,0,0,0);
				  else if(point==1){//중간 마커 지점에 도착했을때 실행
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <main+0x134>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d1a1      	bne.n	80016c8 <main+0x48>
						  //거리 엔코더
					  ResetEnc();
 8001784:	f000 f8e4 	bl	8001950 <ResetEnc>
					  start =1;
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <main+0x138>)
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
					  check1 =0;
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <main+0x14c>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	e798      	b.n	80016c8 <main+0x48>
		//				  if(check ==1){
		//					  B_Forward(GPS_distance);
		//				  }
					  }
	  }else {
		  ResetEnc();
 8001796:	f000 f8db 	bl	8001950 <ResetEnc>
		  B_Forward(0);
 800179a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80017d0 <main+0x150>
 800179e:	f000 f8ef 	bl	8001980 <B_Forward>
	  GPS_SendData();
 80017a2:	e791      	b.n	80016c8 <main+0x48>
 80017a4:	200001f1 	.word	0x200001f1
 80017a8:	200003d0 	.word	0x200003d0
 80017ac:	2000030e 	.word	0x2000030e
 80017b0:	20000348 	.word	0x20000348
 80017b4:	20000218 	.word	0x20000218
 80017b8:	2000030d 	.word	0x2000030d
 80017bc:	20000210 	.word	0x20000210
 80017c0:	20000304 	.word	0x20000304
 80017c4:	20000214 	.word	0x20000214
 80017c8:	20000308 	.word	0x20000308
 80017cc:	2000030c 	.word	0x2000030c
 80017d0:	00000000 	.word	0x00000000

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b094      	sub	sp, #80	; 0x50
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0320 	add.w	r3, r7, #32
 80017de:	2230      	movs	r2, #48	; 0x30
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f005 fc7e 	bl	80070e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <SystemClock_Config+0xcc>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <SystemClock_Config+0xcc>)
 8001802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001806:	6413      	str	r3, [r2, #64]	; 0x40
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <SystemClock_Config+0xcc>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <SystemClock_Config+0xd0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a21      	ldr	r2, [pc, #132]	; (80018a4 <SystemClock_Config+0xd0>)
 800181e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <SystemClock_Config+0xd0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001830:	2301      	movs	r3, #1
 8001832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183a:	2302      	movs	r3, #2
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800183e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001844:	2304      	movs	r3, #4
 8001846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001848:	23a8      	movs	r3, #168	; 0xa8
 800184a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800184c:	2302      	movs	r3, #2
 800184e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001850:	2307      	movs	r3, #7
 8001852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001854:	f107 0320 	add.w	r3, r7, #32
 8001858:	4618      	mov	r0, r3
 800185a:	f001 ff5d 	bl	8003718 <HAL_RCC_OscConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001864:	f000 f84a 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001868:	230f      	movs	r3, #15
 800186a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186c:	2302      	movs	r3, #2
 800186e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001874:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800187a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2105      	movs	r1, #5
 8001886:	4618      	mov	r0, r3
 8001888:	f002 f9be 	bl	8003c08 <HAL_RCC_ClockConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001892:	f000 f833 	bl	80018fc <Error_Handler>
  }
}
 8001896:	bf00      	nop
 8001898:	3750      	adds	r7, #80	; 0x50
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000

080018a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) GPS_UART_CallBack();
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_UART_RxCpltCallback+0x44>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d102      	bne.n	80018be <HAL_UART_RxCpltCallback+0x16>
 80018b8:	f7ff fcf2 	bl	80012a0 <GPS_UART_CallBack>
////	        	 check = 1;
//	         }
//	      }
//	      HAL_UART_Receive_IT(&huart5, &enc, 1);
//	   }
	}
 80018bc:	e012      	b.n	80018e4 <HAL_UART_RxCpltCallback+0x3c>
	else if(huart == &huart3){
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_UART_RxCpltCallback+0x48>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10e      	bne.n	80018e4 <HAL_UART_RxCpltCallback+0x3c>
		 count1++;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_UART_RxCpltCallback+0x4c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_UART_RxCpltCallback+0x4c>)
 80018d0:	701a      	strb	r2, [r3, #0]
	      APP_VALUE_PARSE_CallBack();
 80018d2:	f7ff fbff 	bl	80010d4 <APP_VALUE_PARSE_CallBack>
	      if(count1==1){
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_UART_RxCpltCallback+0x4c>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d102      	bne.n	80018e4 <HAL_UART_RxCpltCallback+0x3c>
	      start=1;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_UART_RxCpltCallback+0x50>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
	}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000038c 	.word	0x2000038c
 80018f0:	200003d0 	.word	0x200003d0
 80018f4:	2000030f 	.word	0x2000030f
 80018f8:	2000030d 	.word	0x2000030d

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <MOTOR_Init>:
RoboClaw_HandleTypeDef hroboClaw2;
extern uint8_t check1;
extern float GPS_angle;
//uint8_t dCnt=0;
void MOTOR_Init()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	  hroboClaw1.hserial = hserial_uart5;
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <MOTOR_Init+0x3c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <MOTOR_Init+0x40>)
 8001912:	6093      	str	r3, [r2, #8]
	  hroboClaw1.packetserial_address = 0x80;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MOTOR_Init+0x40>)
 8001916:	2280      	movs	r2, #128	; 0x80
 8001918:	731a      	strb	r2, [r3, #12]
	  roboClaw_init(&hroboClaw1);
 800191a:	480b      	ldr	r0, [pc, #44]	; (8001948 <MOTOR_Init+0x40>)
 800191c:	f000 fa0e 	bl	8001d3c <roboClaw_init>
	  ResetEncoders(&hroboClaw1);
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <MOTOR_Init+0x40>)
 8001922:	f000 fb0b 	bl	8001f3c <ResetEncoders>
	  hroboClaw2.hserial = hserial_uart5;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MOTOR_Init+0x3c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <MOTOR_Init+0x44>)
 800192c:	6093      	str	r3, [r2, #8]
	  hroboClaw2.packetserial_address = 0x81;
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <MOTOR_Init+0x44>)
 8001930:	2281      	movs	r2, #129	; 0x81
 8001932:	731a      	strb	r2, [r3, #12]
	  roboClaw_init(&hroboClaw2);
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <MOTOR_Init+0x44>)
 8001936:	f000 fa01 	bl	8001d3c <roboClaw_init>
	  ResetEncoders(&hroboClaw2);
 800193a:	4804      	ldr	r0, [pc, #16]	; (800194c <MOTOR_Init+0x44>)
 800193c:	f000 fafe 	bl	8001f3c <ResetEncoders>
//	  SetM1VelocityPID(&hroboClaw, 0, 0, 0, QPPS);
//	  SetM2VelocityPID(&hroboClaw, 0, 0, 0, QPPS);
//	  SetM1PositionPID(&hroboClaw, Kp, Ki, Kd, 43, 0, 0, 50000);
//	  SetM2PositionPID(&hroboClaw, Kp, Ki, Kd, 43, 0, 0, 50000);
//	  WriteNVM(&hroboClaw);
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000310 	.word	0x20000310
 8001948:	20000314 	.word	0x20000314
 800194c:	20000324 	.word	0x20000324

08001950 <ResetEnc>:
//			DriveM1M2withSpeedandPosition(&hroboClaw1, 43000, 4807 / 180 * angle, 43000, -4885 / 180 * angle);				// right 180
//			DriveM1M2withSpeedandPosition(&hroboClaw2, 42550, 4780 / 180 * angle, 43000, -4918 / 180 * angle);				// right 180
//		}
//}
//
void ResetEnc(){
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	SetEncM1(&hroboClaw1,0);
 8001954:	2100      	movs	r1, #0
 8001956:	4808      	ldr	r0, [pc, #32]	; (8001978 <ResetEnc+0x28>)
 8001958:	f000 fb01 	bl	8001f5e <SetEncM1>
	SetEncM2(&hroboClaw1,0);
 800195c:	2100      	movs	r1, #0
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <ResetEnc+0x28>)
 8001960:	f000 fb21 	bl	8001fa6 <SetEncM2>
	SetEncM1(&hroboClaw2,0);
 8001964:	2100      	movs	r1, #0
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <ResetEnc+0x2c>)
 8001968:	f000 faf9 	bl	8001f5e <SetEncM1>
	SetEncM2(&hroboClaw2,0);
 800196c:	2100      	movs	r1, #0
 800196e:	4803      	ldr	r0, [pc, #12]	; (800197c <ResetEnc+0x2c>)
 8001970:	f000 fb19 	bl	8001fa6 <SetEncM2>

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000314 	.word	0x20000314
 800197c:	20000324 	.word	0x20000324

08001980 <B_Forward>:
void B_Forward(float B_distance)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af02      	add	r7, sp, #8
 8001986:	ed87 0a01 	vstr	s0, [r7, #4]

	DriveM1M2withSpeedandPosition(&hroboClaw1, 3302, 3765*B_distance, 3300, 3765*B_distance);
 800198a:	edd7 7a01 	vldr	s15, [r7, #4]
 800198e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001a04 <B_Forward+0x84>
 8001992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001996:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800199a:	edd7 7a01 	vldr	s15, [r7, #4]
 800199e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001a04 <B_Forward+0x84>
 80019a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019aa:	ee17 3a90 	vmov	r3, s15
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f640 43e4 	movw	r3, #3300	; 0xce4
 80019b4:	ee16 2a90 	vmov	r2, s13
 80019b8:	f640 41e6 	movw	r1, #3302	; 0xce6
 80019bc:	4812      	ldr	r0, [pc, #72]	; (8001a08 <B_Forward+0x88>)
 80019be:	f000 fb16 	bl	8001fee <DriveM1M2withSpeedandPosition>
	DriveM1M2withSpeedandPosition(&hroboClaw2, 3200, 3691*B_distance, 3218, 3710*B_distance);
 80019c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019c6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001a0c <B_Forward+0x8c>
 80019ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ce:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80019d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001a10 <B_Forward+0x90>
 80019da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e2:	ee17 3a90 	vmov	r3, s15
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f640 4392 	movw	r3, #3218	; 0xc92
 80019ec:	ee16 2a90 	vmov	r2, s13
 80019f0:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <B_Forward+0x94>)
 80019f6:	f000 fafa 	bl	8001fee <DriveM1M2withSpeedandPosition>
//	DriveM1M2withSpeedandPosition(&hroboClaw1, 42500, -3849 * B_distance, 43000, -3810 * B_distance);				// Backward 1m distance
//	DriveM1M2withSpeedandPosition(&hroboClaw2, 41950, -3845 * B_distance, 43000, -3849 * B_distance);				// Backward 1m distance
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	456b5000 	.word	0x456b5000
 8001a08:	20000314 	.word	0x20000314
 8001a0c:	4566b000 	.word	0x4566b000
 8001a10:	4567e000 	.word	0x4567e000
 8001a14:	20000324 	.word	0x20000324

08001a18 <B_turn>:

void B_turn(float angle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	ed87 0a01 	vstr	s0, [r7, #4]

	if(GPS_angle > 5)
 8001a22:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <B_turn+0x14c>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	dd3d      	ble.n	8001ab2 <B_turn+0x9a>
	{
		check1 =0;
 8001a36:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <B_turn+0x150>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
		ResetEnc();
 8001a3c:	f7ff ff88 	bl	8001950 <ResetEnc>
		DriveM1M2withSpeedandPosition(&hroboClaw1, 3302, 3765/138*angle, 3300, -3765/138*angle);
 8001a40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a44:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 8001a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a4c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001a50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a54:	eebb 7a0b 	vmov.f32	s14, #187	; 0xc1d80000 -27.0
 8001a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a60:	ee17 3a90 	vmov	r3, s15
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001a6a:	ee16 2a90 	vmov	r2, s13
 8001a6e:	f640 41e6 	movw	r1, #3302	; 0xce6
 8001a72:	483e      	ldr	r0, [pc, #248]	; (8001b6c <B_turn+0x154>)
 8001a74:	f000 fabb 	bl	8001fee <DriveM1M2withSpeedandPosition>
		DriveM1M2withSpeedandPosition(&hroboClaw2, 3200, 3696/138*angle, 3218, -3710/138*angle);				// right 180
 8001a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a8c:	eebb 7a0a 	vmov.f32	s14, #186	; 0xc1d00000 -26.0
 8001a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a98:	ee17 3a90 	vmov	r3, s15
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	f640 4392 	movw	r3, #3218	; 0xc92
 8001aa2:	ee16 2a90 	vmov	r2, s13
 8001aa6:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8001aaa:	4831      	ldr	r0, [pc, #196]	; (8001b70 <B_turn+0x158>)
 8001aac:	f000 fa9f 	bl	8001fee <DriveM1M2withSpeedandPosition>
		check1++;
		if(check1==1){
			ResetEnc();
		}
	}
}
 8001ab0:	e053      	b.n	8001b5a <B_turn+0x142>
	else if (GPS_angle < -5)
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <B_turn+0x14c>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8001abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	d53d      	bpl.n	8001b42 <B_turn+0x12a>
		check1 =0;
 8001ac6:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <B_turn+0x150>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
		ResetEnc();
 8001acc:	f7ff ff40 	bl	8001950 <ResetEnc>
		DriveM1M2withSpeedandPosition(&hroboClaw1, 3302, 3765/138*angle, 3300, -3765/138*angle);
 8001ad0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ad4:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 8001ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001adc:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae4:	eebb 7a0b 	vmov.f32	s14, #187	; 0xc1d80000 -27.0
 8001ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af0:	ee17 3a90 	vmov	r3, s15
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001afa:	ee16 2a90 	vmov	r2, s13
 8001afe:	f640 41e6 	movw	r1, #3302	; 0xce6
 8001b02:	481a      	ldr	r0, [pc, #104]	; (8001b6c <B_turn+0x154>)
 8001b04:	f000 fa73 	bl	8001fee <DriveM1M2withSpeedandPosition>
		DriveM1M2withSpeedandPosition(&hroboClaw2, 3200, 3696/138*angle, 3218, -3710/138*angle);
 8001b08:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b0c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8001b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b14:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001b18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b1c:	eebb 7a0a 	vmov.f32	s14, #186	; 0xc1d00000 -26.0
 8001b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b28:	ee17 3a90 	vmov	r3, s15
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	f640 4392 	movw	r3, #3218	; 0xc92
 8001b32:	ee16 2a90 	vmov	r2, s13
 8001b36:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <B_turn+0x158>)
 8001b3c:	f000 fa57 	bl	8001fee <DriveM1M2withSpeedandPosition>
}
 8001b40:	e00b      	b.n	8001b5a <B_turn+0x142>
		check1++;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <B_turn+0x150>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <B_turn+0x150>)
 8001b4c:	701a      	strb	r2, [r3, #0]
		if(check1==1){
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <B_turn+0x150>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <B_turn+0x142>
			ResetEnc();
 8001b56:	f7ff fefb 	bl	8001950 <ResetEnc>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000210 	.word	0x20000210
 8001b68:	2000030c 	.word	0x2000030c
 8001b6c:	20000314 	.word	0x20000314
 8001b70:	20000324 	.word	0x20000324

08001b74 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	return (buffer->head_index == buffer->tail_index);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8b3 2202 	ldrh.w	r2, [r3, #514]	; 0x202
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f8b3 2202 	ldrh.w	r2, [r3, #514]	; 0x202
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	bf0c      	ite	eq
 8001bc2:	2301      	moveq	r3, #1
 8001bc4:	2300      	movne	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <ring_buffer_queue>:
//  uint8_t a = buffer[i];
//  HAL_UART_Transmit(&huart1, &a, 1, 10);
//  HAL_Delay(1000);
}

void ring_buffer_queue(ring_buffer_t *buffer, uint8_t data) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ffdc 	bl	8001b9e <ring_buffer_is_full>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00a      	beq.n	8001c02 <ring_buffer_queue+0x2e>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8001c08:	4619      	mov	r1, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8001c16:	3301      	adds	r3, #1
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202

  /** debug features update. */
  buffer->byte_enqueue_hit ++;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, uint8_t *data, ring_buffer_size_t size) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	80fb      	strh	r3, [r7, #6]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	82fb      	strh	r3, [r7, #22]
 8001c4e:	e00a      	b.n	8001c66 <ring_buffer_queue_arr+0x2a>
    ring_buffer_queue(buffer, data[i]);
 8001c50:	8afb      	ldrh	r3, [r7, #22]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	4413      	add	r3, r2
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff ffba 	bl	8001bd4 <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 8001c60:	8afb      	ldrh	r3, [r7, #22]
 8001c62:	3301      	adds	r3, #1
 8001c64:	82fb      	strh	r3, [r7, #22]
 8001c66:	8afa      	ldrh	r2, [r7, #22]
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3f0      	bcc.n	8001c50 <ring_buffer_queue_arr+0x14>
  }
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, uint8_t *data) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ff76 	bl	8001b74 <ring_buffer_is_empty>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e01a      	b.n	8001cc8 <ring_buffer_dequeue+0x50>
  }

  *data = buffer->buffer[buffer->tail_index];
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8001c98:	461a      	mov	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	5c9a      	ldrb	r2, [r3, r2]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8001ca8:	3301      	adds	r3, #1
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200

  /** debug features update. */
  buffer->byte_dequeue_hit ++;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

  return 1;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_RNG_Init+0x20>)
 8001cd6:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <MX_RNG_Init+0x24>)
 8001cd8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_RNG_Init+0x20>)
 8001cdc:	f002 f9b4 	bl	8004048 <HAL_RNG_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001ce6:	f7ff fe09 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000334 	.word	0x20000334
 8001cf4:	50060800 	.word	0x50060800

08001cf8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <HAL_RNG_MspInit+0x3c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d10d      	bne.n	8001d26 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_RNG_MspInit+0x40>)
 8001d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <HAL_RNG_MspInit+0x40>)
 8001d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d18:	6353      	str	r3, [r2, #52]	; 0x34
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_RNG_MspInit+0x40>)
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	50060800 	.word	0x50060800
 8001d38:	40023800 	.word	0x40023800

08001d3c <roboClaw_init>:
static int read_timeout(RoboClaw_HandleTypeDef* hroboClaw);
/**
 * @}
 */

ROBOCLAW_StatusTypeDef roboClaw_init(RoboClaw_HandleTypeDef* hroboClaw){
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

	if(hroboClaw == NULL) return ROBOCLAW_ERROR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <roboClaw_init+0x12>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e011      	b.n	8001d72 <roboClaw_init+0x36>
	if((hroboClaw->hserial == NULL) || (hroboClaw->packetserial_address == 0)) return ROBOCLAW_ERROR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <roboClaw_init+0x22>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7b1b      	ldrb	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <roboClaw_init+0x26>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e007      	b.n	8001d72 <roboClaw_init+0x36>
	if(!hroboClaw->timeout) hroboClaw->timeout = MAXTOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <roboClaw_init+0x34>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	605a      	str	r2, [r3, #4]

	return ROBOCLAW_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <crc_clear>:

static void crc_clear(RoboClaw_HandleTypeDef* hroboClaw){
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	hroboClaw->crc = 0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	801a      	strh	r2, [r3, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <crc_update>:

static void crc_update (RoboClaw_HandleTypeDef* hroboClaw, uint8_t data){
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	hroboClaw->crc = hroboClaw->crc ^ ((uint16_t)data << 8);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	4053      	eors	r3, r2
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	801a      	strh	r2, [r3, #0]
	for (i=0; i<8; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	e01a      	b.n	8001df6 <crc_update+0x5e>
	{
		if (hroboClaw->crc & 0x8000)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da0c      	bge.n	8001de4 <crc_update+0x4c>
			hroboClaw->crc = (hroboClaw->crc << 1) ^ 0x1021;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001dd6:	f083 0301 	eor.w	r3, r3, #1
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	801a      	strh	r2, [r3, #0]
 8001de2:	e005      	b.n	8001df0 <crc_update+0x58>
		else
			hroboClaw->crc <<= 1;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	801a      	strh	r2, [r3, #0]
	for (i=0; i<8; i++)
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	3301      	adds	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	2b07      	cmp	r3, #7
 8001dfa:	d9e1      	bls.n	8001dc0 <crc_update+0x28>
	}
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <crc_get>:

static uint16_t crc_get(RoboClaw_HandleTypeDef* hroboClaw){
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
	return hroboClaw->crc;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	881b      	ldrh	r3, [r3, #0]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <write_n>:

static ROBOCLAW_StatusTypeDef write_n(RoboClaw_HandleTypeDef* hroboClaw, uint8_t cnt, ...){
 8001e22:	b40e      	push	{r1, r2, r3}
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	uint8_t trys = MAXRETRY;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	75fb      	strb	r3, [r7, #23]
	uint8_t data;
	uint8_t temp;

	do{
		crc_clear(hroboClaw);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ffa4 	bl	8001d7e <crc_clear>
		//send data with crc
		va_list marker;
		va_start( marker, cnt );     /* Initialize variable arguments. */
 8001e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3a:	60fb      	str	r3, [r7, #12]
		for(uint8_t index=0; index<cnt ;index++){
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	75bb      	strb	r3, [r7, #22]
 8001e40:	e013      	b.n	8001e6a <write_n+0x48>
			data = va_arg(marker, int);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1d1a      	adds	r2, r3, #4
 8001e46:	60fa      	str	r2, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	74fb      	strb	r3, [r7, #19]
			crc_update(hroboClaw, data);
 8001e4e:	7cfb      	ldrb	r3, [r7, #19]
 8001e50:	4619      	mov	r1, r3
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa0 	bl	8001d98 <crc_update>
			write(hroboClaw, &data);
 8001e58:	f107 0313 	add.w	r3, r7, #19
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f836 	bl	8001ed0 <write>
		for(uint8_t index=0; index<cnt ;index++){
 8001e64:	7dbb      	ldrb	r3, [r7, #22]
 8001e66:	3301      	adds	r3, #1
 8001e68:	75bb      	strb	r3, [r7, #22]
 8001e6a:	7dba      	ldrb	r2, [r7, #22]
 8001e6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d3e6      	bcc.n	8001e42 <write_n+0x20>
		}
		va_end( marker );              /* Reset variable arguments.      */
		uint16_t crc = crc_get(hroboClaw);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ffc8 	bl	8001e0a <crc_get>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	82bb      	strh	r3, [r7, #20]
		temp = crc>>8;
 8001e7e:	8abb      	ldrh	r3, [r7, #20]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	74bb      	strb	r3, [r7, #18]
		write(hroboClaw, &temp);
 8001e88:	f107 0312 	add.w	r3, r7, #18
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f81e 	bl	8001ed0 <write>
		temp = (uint8_t)crc;
 8001e94:	8abb      	ldrh	r3, [r7, #20]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	74bb      	strb	r3, [r7, #18]
		write(hroboClaw,  &temp);
 8001e9a:	f107 0312 	add.w	r3, r7, #18
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f815 	bl	8001ed0 <write>

		if(read_timeout(hroboClaw)==0xFF)
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f822 	bl	8001ef0 <read_timeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2bff      	cmp	r3, #255	; 0xff
 8001eb0:	d101      	bne.n	8001eb6 <write_n+0x94>
			return  ROBOCLAW_OK ;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e005      	b.n	8001ec2 <write_n+0xa0>
	}while(trys--);
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	75fa      	strb	r2, [r7, #23]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1b7      	bne.n	8001e30 <write_n+0xe>
	return  ROBOCLAW_ERROR;
 8001ec0:	2301      	movs	r3, #1
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ecc:	b003      	add	sp, #12
 8001ece:	4770      	bx	lr

08001ed0 <write>:

static void write(RoboClaw_HandleTypeDef* hroboClaw, uint8_t *byte){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
//		HAL_UART_Transmit_DMA(&huart5,byte, SEND_BYTE_LEN);
		serial_write(hroboClaw->hserial, byte, SEND_BYTE_LEN);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	6839      	ldr	r1, [r7, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f884 	bl	8000ff0 <serial_write>
//		HAL_UART_Transmit(&huart5,byte, 1, HAL_MAX_DELAY);
	}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <read_timeout>:

 static int read(RoboClaw_HandleTypeDef* hroboClaw){
	return serial_read(hroboClaw->hserial);
}

static int read_timeout(RoboClaw_HandleTypeDef* hroboClaw){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	uint32_t start = HAL_GetTick();
 8001ef8:	f000 fd12 	bl	8002920 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]
	// Empty buffer?
	while(!serial_available(hroboClaw->hserial)){
 8001efe:	e00b      	b.n	8001f18 <read_timeout+0x28>
		if((HAL_GetTick()-start)>=hroboClaw->timeout){
 8001f00:	f000 fd0e 	bl	8002920 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad2      	subs	r2, r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d302      	bcc.n	8001f18 <read_timeout+0x28>
			return -1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f16:	e00d      	b.n	8001f34 <read_timeout+0x44>
	while(!serial_available(hroboClaw->hserial)){
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f89d 	bl	800105c <serial_available>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0eb      	beq.n	8001f00 <read_timeout+0x10>
		}
	}
	return serial_read(hroboClaw->hserial);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff f8a8 	bl	8001082 <serial_read>
 8001f32:	4603      	mov	r3, r0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <ResetEncoders>:
	uint32_t kp = kp_fp*65536;
	uint32_t ki = ki_fp*65536;
	uint32_t kd = kd_fp*65536;
	return write_n(hroboClaw, 18, hroboClaw->packetserial_address,SETM2PID,SetDWORDval(kd),SetDWORDval(kp),SetDWORDval(ki),SetDWORDval(qpps));
}
ROBOCLAW_StatusTypeDef ResetEncoders(RoboClaw_HandleTypeDef* hroboClaw){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	return write_n(hroboClaw, 2, hroboClaw->packetserial_address,RESETENC);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7b1b      	ldrb	r3, [r3, #12]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2314      	movs	r3, #20
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff67 	bl	8001e22 <write_n>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <SetEncM1>:
ROBOCLAW_StatusTypeDef SetEncM1(RoboClaw_HandleTypeDef* hroboClaw, int32_t val){
 8001f5e:	b590      	push	{r4, r7, lr}
 8001f60:	b087      	sub	sp, #28
 8001f62:	af04      	add	r7, sp, #16
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
	return write_n(hroboClaw, 6, hroboClaw->packetserial_address,SETM1ENCCOUNT,SetDWORDval(val));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7b1b      	ldrb	r3, [r3, #12]
 8001f6c:	461c      	mov	r4, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	0e1b      	lsrs	r3, r3, #24
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	6838      	ldr	r0, [r7, #0]
 8001f86:	b2c0      	uxtb	r0, r0
 8001f88:	9003      	str	r0, [sp, #12]
 8001f8a:	9302      	str	r3, [sp, #8]
 8001f8c:	9101      	str	r1, [sp, #4]
 8001f8e:	9200      	str	r2, [sp, #0]
 8001f90:	2316      	movs	r3, #22
 8001f92:	4622      	mov	r2, r4
 8001f94:	2106      	movs	r1, #6
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff43 	bl	8001e22 <write_n>
 8001f9c:	4603      	mov	r3, r0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd90      	pop	{r4, r7, pc}

08001fa6 <SetEncM2>:

ROBOCLAW_StatusTypeDef SetEncM2(RoboClaw_HandleTypeDef* hroboClaw, int32_t val){
 8001fa6:	b590      	push	{r4, r7, lr}
 8001fa8:	b087      	sub	sp, #28
 8001faa:	af04      	add	r7, sp, #16
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
	return write_n(hroboClaw, 6, hroboClaw->packetserial_address,SETM2ENCCOUNT,SetDWORDval(val));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7b1b      	ldrb	r3, [r3, #12]
 8001fb4:	461c      	mov	r4, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	0e1b      	lsrs	r3, r3, #24
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	0c1b      	lsrs	r3, r3, #16
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	6838      	ldr	r0, [r7, #0]
 8001fce:	b2c0      	uxtb	r0, r0
 8001fd0:	9003      	str	r0, [sp, #12]
 8001fd2:	9302      	str	r3, [sp, #8]
 8001fd4:	9101      	str	r1, [sp, #4]
 8001fd6:	9200      	str	r2, [sp, #0]
 8001fd8:	2317      	movs	r3, #23
 8001fda:	4622      	mov	r2, r4
 8001fdc:	2106      	movs	r1, #6
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ff1f 	bl	8001e22 <write_n>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd90      	pop	{r4, r7, pc}

08001fee <DriveM1M2withSpeedandPosition>:
}

ROBOCLAW_StatusTypeDef DriveM2withSpeedandPosition(RoboClaw_HandleTypeDef* hroboClaw, int32_t speed, int32_t Position){
	return write_n(hroboClaw, 11, hroboClaw->packetserial_address,M2SPEEDPOSITION, SetDWORDval(speed), SetDWORDval(Position));
}
ROBOCLAW_StatusTypeDef DriveM1M2withSpeedandPosition(RoboClaw_HandleTypeDef* hroboClaw, int32_t speed1, int32_t Position1,int32_t speed2, int32_t Position2){
 8001fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff0:	b09f      	sub	sp, #124	; 0x7c
 8001ff2:	af10      	add	r7, sp, #64	; 0x40
 8001ff4:	6378      	str	r0, [r7, #52]	; 0x34
 8001ff6:	6339      	str	r1, [r7, #48]	; 0x30
 8001ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	return write_n(hroboClaw, 19, hroboClaw->packetserial_address,M1M2SPEEDPOSITION, SetDWORDval(speed1), SetDWORDval(Position1), SetDWORDval(speed2), SetDWORDval(Position2));
 8001ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffe:	7b1b      	ldrb	r3, [r3, #12]
 8002000:	469c      	mov	ip, r3
 8002002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002004:	0e1b      	lsrs	r3, r3, #24
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461c      	mov	r4, r3
 800200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200c:	0c1b      	lsrs	r3, r3, #16
 800200e:	b2db      	uxtb	r3, r3
 8002010:	461d      	mov	r5, r3
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	b2db      	uxtb	r3, r3
 8002018:	461e      	mov	r6, r3
 800201a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201c:	b2db      	uxtb	r3, r3
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
 8002020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002022:	0e1b      	lsrs	r3, r3, #24
 8002024:	b2db      	uxtb	r3, r3
 8002026:	623b      	str	r3, [r7, #32]
 8002028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202a:	0c1b      	lsrs	r3, r3, #16
 800202c:	b2db      	uxtb	r3, r3
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	b2db      	uxtb	r3, r3
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	b2db      	uxtb	r3, r3
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	0e1b      	lsrs	r3, r3, #24
 8002042:	b2db      	uxtb	r3, r3
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	b2db      	uxtb	r3, r3
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b2db      	uxtb	r3, r3
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	b2db      	uxtb	r3, r3
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800205e:	0e1b      	lsrs	r3, r3, #24
 8002060:	b2db      	uxtb	r3, r3
 8002062:	4618      	mov	r0, r3
 8002064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002066:	0c1b      	lsrs	r3, r3, #16
 8002068:	b2db      	uxtb	r3, r3
 800206a:	4619      	mov	r1, r3
 800206c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002076:	b2db      	uxtb	r3, r3
 8002078:	930f      	str	r3, [sp, #60]	; 0x3c
 800207a:	920e      	str	r2, [sp, #56]	; 0x38
 800207c:	910d      	str	r1, [sp, #52]	; 0x34
 800207e:	900c      	str	r0, [sp, #48]	; 0x30
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	920b      	str	r2, [sp, #44]	; 0x2c
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	920a      	str	r2, [sp, #40]	; 0x28
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	9209      	str	r2, [sp, #36]	; 0x24
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	9208      	str	r2, [sp, #32]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	9207      	str	r2, [sp, #28]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	9206      	str	r2, [sp, #24]
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	9205      	str	r2, [sp, #20]
 800209c:	6a3a      	ldr	r2, [r7, #32]
 800209e:	9204      	str	r2, [sp, #16]
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	9303      	str	r3, [sp, #12]
 80020a4:	9602      	str	r6, [sp, #8]
 80020a6:	9501      	str	r5, [sp, #4]
 80020a8:	9400      	str	r4, [sp, #0]
 80020aa:	237c      	movs	r3, #124	; 0x7c
 80020ac:	4662      	mov	r2, ip
 80020ae:	2113      	movs	r1, #19
 80020b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020b2:	f7ff feb6 	bl	8001e22 <write_n>
 80020b6:	4603      	mov	r3, r0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	373c      	adds	r7, #60	; 0x3c
 80020bc:	46bd      	mov	sp, r7
 80020be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_MspInit+0x4c>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	4a0f      	ldr	r2, [pc, #60]	; (800210c <HAL_MspInit+0x4c>)
 80020d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d4:	6453      	str	r3, [r2, #68]	; 0x44
 80020d6:	4b0d      	ldr	r3, [pc, #52]	; (800210c <HAL_MspInit+0x4c>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_MspInit+0x4c>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <HAL_MspInit+0x4c>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_MspInit+0x4c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800

08002110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <NMI_Handler+0x4>

08002116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211a:	e7fe      	b.n	800211a <HardFault_Handler+0x4>

0800211c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <MemManage_Handler+0x4>

08002122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <BusFault_Handler+0x4>

08002128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <UsageFault_Handler+0x4>

0800212e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215c:	f000 fbcc 	bl	80028f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}

08002164 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <DMA1_Stream0_IRQHandler+0x10>)
 800216a:	f000 fecf 	bl	8002f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000458 	.word	0x20000458

08002178 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <USART2_IRQHandler+0x10>)
 800217e:	f002 f91b 	bl	80043b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000038c 	.word	0x2000038c

0800218c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <USART3_IRQHandler+0x10>)
 8002192:	f002 f911 	bl	80043b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200003d0 	.word	0x200003d0

080021a0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <DMA1_Stream7_IRQHandler+0x10>)
 80021a6:	f000 feb1 	bl	8002f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200004b8 	.word	0x200004b8

080021b4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <UART5_IRQHandler+0x10>)
 80021ba:	f002 f8fd 	bl	80043b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000348 	.word	0x20000348

080021c8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <USART6_IRQHandler+0x10>)
 80021ce:	f002 f8f3 	bl	80043b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000414 	.word	0x20000414

080021dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return 1;
 80021e0:	2301      	movs	r3, #1
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_kill>:

int _kill(int pid, int sig)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021f6:	f004 ffc7 	bl	8007188 <__errno>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2216      	movs	r2, #22
 80021fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_exit>:

void _exit (int status)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ffe7 	bl	80021ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800221e:	e7fe      	b.n	800221e <_exit+0x12>

08002220 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	e00a      	b.n	8002248 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002232:	f3af 8000 	nop.w
 8002236:	4601      	mov	r1, r0
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	60ba      	str	r2, [r7, #8]
 800223e:	b2ca      	uxtb	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	dbf0      	blt.n	8002232 <_read+0x12>
  }

  return len;
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e009      	b.n	8002280 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	60ba      	str	r2, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3301      	adds	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	dbf1      	blt.n	800226c <_write+0x12>
  }
  return len;
 8002288:	687b      	ldr	r3, [r7, #4]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <_close>:

int _close(int file)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ba:	605a      	str	r2, [r3, #4]
  return 0;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <_isatty>:

int _isatty(int file)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <_sbrk+0x5c>)
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <_sbrk+0x60>)
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <_sbrk+0x64>)
 800231a:	4a12      	ldr	r2, [pc, #72]	; (8002364 <_sbrk+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	d207      	bcs.n	800233c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800232c:	f004 ff2c 	bl	8007188 <__errno>
 8002330:	4603      	mov	r3, r0
 8002332:	220c      	movs	r2, #12
 8002334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800233a:	e009      	b.n	8002350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <_sbrk+0x64>)
 800234c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20020000 	.word	0x20020000
 800235c:	00000400 	.word	0x00000400
 8002360:	20000344 	.word	0x20000344
 8002364:	20000668 	.word	0x20000668

08002368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <SystemInit+0x20>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <SystemInit+0x20>)
 8002374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_UART5_Init+0x4c>)
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <MX_UART5_Init+0x50>)
 8002394:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <MX_UART5_Init+0x4c>)
 8002398:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800239c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_UART5_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_UART5_Init+0x4c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <MX_UART5_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_UART5_Init+0x4c>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <MX_UART5_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_UART5_Init+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80023c2:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_UART5_Init+0x4c>)
 80023c4:	f001 fe6a 	bl	800409c <HAL_UART_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80023ce:	f7ff fa95 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000348 	.word	0x20000348
 80023dc:	40005000 	.word	0x40005000

080023e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_USART2_UART_Init+0x4c>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <MX_USART2_UART_Init+0x50>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <MX_USART2_UART_Init+0x4c>)
 80023ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_USART2_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_USART2_UART_Init+0x4c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <MX_USART2_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_USART2_UART_Init+0x4c>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <MX_USART2_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_USART2_UART_Init+0x4c>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_USART2_UART_Init+0x4c>)
 8002418:	f001 fe40 	bl	800409c <HAL_UART_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002422:	f7ff fa6b 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000038c 	.word	0x2000038c
 8002430:	40004400 	.word	0x40004400

08002434 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <MX_USART3_UART_Init+0x50>)
 800243c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002440:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002444:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_USART3_UART_Init+0x4c>)
 800246c:	f001 fe16 	bl	800409c <HAL_UART_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002476:	f7ff fa41 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200003d0 	.word	0x200003d0
 8002484:	40004800 	.word	0x40004800

08002488 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <MX_USART6_UART_Init+0x4c>)
 800248e:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <MX_USART6_UART_Init+0x50>)
 8002490:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002492:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <MX_USART6_UART_Init+0x4c>)
 8002494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002498:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <MX_USART6_UART_Init+0x4c>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_USART6_UART_Init+0x4c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <MX_USART6_UART_Init+0x4c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_USART6_UART_Init+0x4c>)
 80024ae:	220c      	movs	r2, #12
 80024b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <MX_USART6_UART_Init+0x4c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <MX_USART6_UART_Init+0x4c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_USART6_UART_Init+0x4c>)
 80024c0:	f001 fdec 	bl	800409c <HAL_UART_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024ca:	f7ff fa17 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000414 	.word	0x20000414
 80024d8:	40011400 	.word	0x40011400

080024dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b090      	sub	sp, #64	; 0x40
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a94      	ldr	r2, [pc, #592]	; (800274c <HAL_UART_MspInit+0x270>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	f040 80b0 	bne.w	8002660 <HAL_UART_MspInit+0x184>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
 8002504:	4b92      	ldr	r3, [pc, #584]	; (8002750 <HAL_UART_MspInit+0x274>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	4a91      	ldr	r2, [pc, #580]	; (8002750 <HAL_UART_MspInit+0x274>)
 800250a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250e:	6413      	str	r3, [r2, #64]	; 0x40
 8002510:	4b8f      	ldr	r3, [pc, #572]	; (8002750 <HAL_UART_MspInit+0x274>)
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
 8002520:	4b8b      	ldr	r3, [pc, #556]	; (8002750 <HAL_UART_MspInit+0x274>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4a8a      	ldr	r2, [pc, #552]	; (8002750 <HAL_UART_MspInit+0x274>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	6313      	str	r3, [r2, #48]	; 0x30
 800252c:	4b88      	ldr	r3, [pc, #544]	; (8002750 <HAL_UART_MspInit+0x274>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	4b84      	ldr	r3, [pc, #528]	; (8002750 <HAL_UART_MspInit+0x274>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	4a83      	ldr	r2, [pc, #524]	; (8002750 <HAL_UART_MspInit+0x274>)
 8002542:	f043 0308 	orr.w	r3, r3, #8
 8002546:	6313      	str	r3, [r2, #48]	; 0x30
 8002548:	4b81      	ldr	r3, [pc, #516]	; (8002750 <HAL_UART_MspInit+0x274>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	623b      	str	r3, [r7, #32]
 8002552:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002562:	2303      	movs	r3, #3
 8002564:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002566:	2308      	movs	r3, #8
 8002568:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256e:	4619      	mov	r1, r3
 8002570:	4878      	ldr	r0, [pc, #480]	; (8002754 <HAL_UART_MspInit+0x278>)
 8002572:	f000 ff35 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002576:	2304      	movs	r3, #4
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002582:	2303      	movs	r3, #3
 8002584:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002586:	2308      	movs	r3, #8
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800258a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258e:	4619      	mov	r1, r3
 8002590:	4871      	ldr	r0, [pc, #452]	; (8002758 <HAL_UART_MspInit+0x27c>)
 8002592:	f000 ff25 	bl	80033e0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002596:	4b71      	ldr	r3, [pc, #452]	; (800275c <HAL_UART_MspInit+0x280>)
 8002598:	4a71      	ldr	r2, [pc, #452]	; (8002760 <HAL_UART_MspInit+0x284>)
 800259a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800259c:	4b6f      	ldr	r3, [pc, #444]	; (800275c <HAL_UART_MspInit+0x280>)
 800259e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025a2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025a4:	4b6d      	ldr	r3, [pc, #436]	; (800275c <HAL_UART_MspInit+0x280>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025aa:	4b6c      	ldr	r3, [pc, #432]	; (800275c <HAL_UART_MspInit+0x280>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025b0:	4b6a      	ldr	r3, [pc, #424]	; (800275c <HAL_UART_MspInit+0x280>)
 80025b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b8:	4b68      	ldr	r3, [pc, #416]	; (800275c <HAL_UART_MspInit+0x280>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025be:	4b67      	ldr	r3, [pc, #412]	; (800275c <HAL_UART_MspInit+0x280>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80025c4:	4b65      	ldr	r3, [pc, #404]	; (800275c <HAL_UART_MspInit+0x280>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025ca:	4b64      	ldr	r3, [pc, #400]	; (800275c <HAL_UART_MspInit+0x280>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025d0:	4b62      	ldr	r3, [pc, #392]	; (800275c <HAL_UART_MspInit+0x280>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80025d6:	4861      	ldr	r0, [pc, #388]	; (800275c <HAL_UART_MspInit+0x280>)
 80025d8:	f000 fb00 	bl	8002bdc <HAL_DMA_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80025e2:	f7ff f98b 	bl	80018fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a5c      	ldr	r2, [pc, #368]	; (800275c <HAL_UART_MspInit+0x280>)
 80025ea:	639a      	str	r2, [r3, #56]	; 0x38
 80025ec:	4a5b      	ldr	r2, [pc, #364]	; (800275c <HAL_UART_MspInit+0x280>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80025f2:	4b5c      	ldr	r3, [pc, #368]	; (8002764 <HAL_UART_MspInit+0x288>)
 80025f4:	4a5c      	ldr	r2, [pc, #368]	; (8002768 <HAL_UART_MspInit+0x28c>)
 80025f6:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80025f8:	4b5a      	ldr	r3, [pc, #360]	; (8002764 <HAL_UART_MspInit+0x288>)
 80025fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025fe:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002600:	4b58      	ldr	r3, [pc, #352]	; (8002764 <HAL_UART_MspInit+0x288>)
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002606:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_UART_MspInit+0x288>)
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800260c:	4b55      	ldr	r3, [pc, #340]	; (8002764 <HAL_UART_MspInit+0x288>)
 800260e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002612:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_UART_MspInit+0x288>)
 8002616:	2200      	movs	r2, #0
 8002618:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800261a:	4b52      	ldr	r3, [pc, #328]	; (8002764 <HAL_UART_MspInit+0x288>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002620:	4b50      	ldr	r3, [pc, #320]	; (8002764 <HAL_UART_MspInit+0x288>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002626:	4b4f      	ldr	r3, [pc, #316]	; (8002764 <HAL_UART_MspInit+0x288>)
 8002628:	2200      	movs	r2, #0
 800262a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800262c:	4b4d      	ldr	r3, [pc, #308]	; (8002764 <HAL_UART_MspInit+0x288>)
 800262e:	2200      	movs	r2, #0
 8002630:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002632:	484c      	ldr	r0, [pc, #304]	; (8002764 <HAL_UART_MspInit+0x288>)
 8002634:	f000 fad2 	bl	8002bdc <HAL_DMA_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800263e:	f7ff f95d 	bl	80018fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a47      	ldr	r2, [pc, #284]	; (8002764 <HAL_UART_MspInit+0x288>)
 8002646:	635a      	str	r2, [r3, #52]	; 0x34
 8002648:	4a46      	ldr	r2, [pc, #280]	; (8002764 <HAL_UART_MspInit+0x288>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	2035      	movs	r0, #53	; 0x35
 8002654:	f000 fa6f 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002658:	2035      	movs	r0, #53	; 0x35
 800265a:	f000 fa88 	bl	8002b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800265e:	e0c4      	b.n	80027ea <HAL_UART_MspInit+0x30e>
  else if(uartHandle->Instance==USART2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a41      	ldr	r2, [pc, #260]	; (800276c <HAL_UART_MspInit+0x290>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d134      	bne.n	80026d4 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	4b38      	ldr	r3, [pc, #224]	; (8002750 <HAL_UART_MspInit+0x274>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a37      	ldr	r2, [pc, #220]	; (8002750 <HAL_UART_MspInit+0x274>)
 8002674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b35      	ldr	r3, [pc, #212]	; (8002750 <HAL_UART_MspInit+0x274>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <HAL_UART_MspInit+0x274>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a30      	ldr	r2, [pc, #192]	; (8002750 <HAL_UART_MspInit+0x274>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <HAL_UART_MspInit+0x274>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026a2:	230c      	movs	r3, #12
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026b2:	2307      	movs	r3, #7
 80026b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ba:	4619      	mov	r1, r3
 80026bc:	482c      	ldr	r0, [pc, #176]	; (8002770 <HAL_UART_MspInit+0x294>)
 80026be:	f000 fe8f 	bl	80033e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2026      	movs	r0, #38	; 0x26
 80026c8:	f000 fa35 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026cc:	2026      	movs	r0, #38	; 0x26
 80026ce:	f000 fa4e 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 80026d2:	e08a      	b.n	80027ea <HAL_UART_MspInit+0x30e>
  else if(uartHandle->Instance==USART3)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a26      	ldr	r2, [pc, #152]	; (8002774 <HAL_UART_MspInit+0x298>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d14c      	bne.n	8002778 <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <HAL_UART_MspInit+0x274>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	4a1a      	ldr	r2, [pc, #104]	; (8002750 <HAL_UART_MspInit+0x274>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ec:	6413      	str	r3, [r2, #64]	; 0x40
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_UART_MspInit+0x274>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_UART_MspInit+0x274>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a13      	ldr	r2, [pc, #76]	; (8002750 <HAL_UART_MspInit+0x274>)
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_UART_MspInit+0x274>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002716:	f44f 7340 	mov.w	r3, #768	; 0x300
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002728:	2307      	movs	r3, #7
 800272a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002730:	4619      	mov	r1, r3
 8002732:	4809      	ldr	r0, [pc, #36]	; (8002758 <HAL_UART_MspInit+0x27c>)
 8002734:	f000 fe54 	bl	80033e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	2027      	movs	r0, #39	; 0x27
 800273e:	f000 f9fa 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002742:	2027      	movs	r0, #39	; 0x27
 8002744:	f000 fa13 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 8002748:	e04f      	b.n	80027ea <HAL_UART_MspInit+0x30e>
 800274a:	bf00      	nop
 800274c:	40005000 	.word	0x40005000
 8002750:	40023800 	.word	0x40023800
 8002754:	40020800 	.word	0x40020800
 8002758:	40020c00 	.word	0x40020c00
 800275c:	20000458 	.word	0x20000458
 8002760:	40026010 	.word	0x40026010
 8002764:	200004b8 	.word	0x200004b8
 8002768:	400260b8 	.word	0x400260b8
 800276c:	40004400 	.word	0x40004400
 8002770:	40020000 	.word	0x40020000
 8002774:	40004800 	.word	0x40004800
  else if(uartHandle->Instance==USART6)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <HAL_UART_MspInit+0x318>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d133      	bne.n	80027ea <HAL_UART_MspInit+0x30e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_UART_MspInit+0x31c>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a1b      	ldr	r2, [pc, #108]	; (80027f8 <HAL_UART_MspInit+0x31c>)
 800278c:	f043 0320 	orr.w	r3, r3, #32
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_UART_MspInit+0x31c>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_UART_MspInit+0x31c>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <HAL_UART_MspInit+0x31c>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_UART_MspInit+0x31c>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027ba:	23c0      	movs	r3, #192	; 0xc0
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027ca:	2308      	movs	r3, #8
 80027cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d2:	4619      	mov	r1, r3
 80027d4:	4809      	ldr	r0, [pc, #36]	; (80027fc <HAL_UART_MspInit+0x320>)
 80027d6:	f000 fe03 	bl	80033e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	2047      	movs	r0, #71	; 0x47
 80027e0:	f000 f9a9 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80027e4:	2047      	movs	r0, #71	; 0x47
 80027e6:	f000 f9c2 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 80027ea:	bf00      	nop
 80027ec:	3740      	adds	r7, #64	; 0x40
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40011400 	.word	0x40011400
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020800 	.word	0x40020800

08002800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002838 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002804:	480d      	ldr	r0, [pc, #52]	; (800283c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002806:	490e      	ldr	r1, [pc, #56]	; (8002840 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002808:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800280c:	e002      	b.n	8002814 <LoopCopyDataInit>

0800280e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002812:	3304      	adds	r3, #4

08002814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002818:	d3f9      	bcc.n	800280e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281a:	4a0b      	ldr	r2, [pc, #44]	; (8002848 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800281c:	4c0b      	ldr	r4, [pc, #44]	; (800284c <LoopFillZerobss+0x26>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002820:	e001      	b.n	8002826 <LoopFillZerobss>

08002822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002824:	3204      	adds	r2, #4

08002826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002828:	d3fb      	bcc.n	8002822 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800282a:	f7ff fd9d 	bl	8002368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800282e:	f004 fcb1 	bl	8007194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002832:	f7fe ff25 	bl	8001680 <main>
  bx  lr    
 8002836:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800283c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002840:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002844:	0800a988 	.word	0x0800a988
  ldr r2, =_sbss
 8002848:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800284c:	20000668 	.word	0x20000668

08002850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002850:	e7fe      	b.n	8002850 <ADC_IRQHandler>
	...

08002854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <HAL_Init+0x40>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <HAL_Init+0x40>)
 800285e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HAL_Init+0x40>)
 800286a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800286e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_Init+0x40>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a07      	ldr	r2, [pc, #28]	; (8002894 <HAL_Init+0x40>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287c:	2003      	movs	r0, #3
 800287e:	f000 f94f 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002882:	200f      	movs	r0, #15
 8002884:	f000 f808 	bl	8002898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002888:	f7ff fc1a 	bl	80020c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_InitTick+0x54>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x58>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f967 	bl	8002b8a <HAL_SYSTICK_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00e      	b.n	80028e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	d80a      	bhi.n	80028e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028cc:	2200      	movs	r2, #0
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d4:	f000 f92f 	bl	8002b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_InitTick+0x5c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000000 	.word	0x20000000
 80028f0:	20000008 	.word	0x20000008
 80028f4:	20000004 	.word	0x20000004

080028f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x20>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x24>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_IncTick+0x24>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000008 	.word	0x20000008
 800291c:	20000518 	.word	0x20000518

08002920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return uwTick;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_GetTick+0x14>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000518 	.word	0x20000518

08002938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff ffee 	bl	8002920 <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002950:	d005      	beq.n	800295e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_Delay+0x44>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800295e:	bf00      	nop
 8002960:	f7ff ffde 	bl	8002920 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	429a      	cmp	r2, r3
 800296e:	d8f7      	bhi.n	8002960 <HAL_Delay+0x28>
  {
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000008 	.word	0x20000008

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b2:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60d3      	str	r3, [r2, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b00:	f7ff ff8e 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff29 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b48:	f7ff ff3e 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7ff ff8e 	bl	8002a74 <NVIC_EncodePriority>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff5d 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff31 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffa2 	bl	8002adc <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e00e      	b.n	8002bd2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	795b      	ldrb	r3, [r3, #5]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d105      	bne.n	8002bca <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fe facf 	bl	8001168 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002be8:	f7ff fe9a 	bl	8002920 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e099      	b.n	8002d2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c18:	e00f      	b.n	8002c3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c1a:	f7ff fe81 	bl	8002920 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b05      	cmp	r3, #5
 8002c26:	d908      	bls.n	8002c3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2203      	movs	r2, #3
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e078      	b.n	8002d2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e8      	bne.n	8002c1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4b38      	ldr	r3, [pc, #224]	; (8002d34 <HAL_DMA_Init+0x158>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d107      	bne.n	8002ca4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f023 0307 	bic.w	r3, r3, #7
 8002cba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d117      	bne.n	8002cfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00e      	beq.n	8002cfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fb01 	bl	80032e8 <DMA_CheckFifoParam>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2240      	movs	r2, #64	; 0x40
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e016      	b.n	8002d2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fab8 	bl	800327c <DMA_CalcBaseAndBitshift>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	223f      	movs	r2, #63	; 0x3f
 8002d16:	409a      	lsls	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	f010803f 	.word	0xf010803f

08002d38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_DMA_Start_IT+0x26>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e040      	b.n	8002de0 <HAL_DMA_Start_IT+0xa8>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d12f      	bne.n	8002dd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 fa4a 	bl	8003220 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	223f      	movs	r2, #63	; 0x3f
 8002d92:	409a      	lsls	r2, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0216 	orr.w	r2, r2, #22
 8002da6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d007      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0208 	orr.w	r2, r2, #8
 8002dbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e005      	b.n	8002dde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002df6:	f7ff fd93 	bl	8002920 <HAL_GetTick>
 8002dfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d008      	beq.n	8002e1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2280      	movs	r2, #128	; 0x80
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e052      	b.n	8002ec0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0216 	bic.w	r2, r2, #22
 8002e28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <HAL_DMA_Abort+0x62>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0208 	bic.w	r2, r2, #8
 8002e58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6a:	e013      	b.n	8002e94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6c:	f7ff fd58 	bl	8002920 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d90c      	bls.n	8002e94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2203      	movs	r2, #3
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e015      	b.n	8002ec0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e4      	bne.n	8002e6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	223f      	movs	r2, #63	; 0x3f
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d004      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00c      	b.n	8002f00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2205      	movs	r2, #5
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f18:	4b8e      	ldr	r3, [pc, #568]	; (8003154 <HAL_DMA_IRQHandler+0x248>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a8e      	ldr	r2, [pc, #568]	; (8003158 <HAL_DMA_IRQHandler+0x24c>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	0a9b      	lsrs	r3, r3, #10
 8002f24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	2208      	movs	r2, #8
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01a      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0204 	bic.w	r2, r2, #4
 8002f5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	2208      	movs	r2, #8
 8002f66:	409a      	lsls	r2, r3
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa6:	f043 0202 	orr.w	r2, r3, #2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d012      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	f043 0204 	orr.w	r2, r3, #4
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	2210      	movs	r2, #16
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d043      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d03c      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	2210      	movs	r2, #16
 8003008:	409a      	lsls	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d018      	beq.n	800304e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d024      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
 800303a:	e01f      	b.n	800307c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e016      	b.n	800307c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0208 	bic.w	r2, r2, #8
 800306a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	2220      	movs	r2, #32
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 808f 	beq.w	80031ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8087 	beq.w	80031ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	2220      	movs	r2, #32
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	d136      	bne.n	8003124 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0216 	bic.w	r2, r2, #22
 80030c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <HAL_DMA_IRQHandler+0x1da>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0208 	bic.w	r2, r2, #8
 80030f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	223f      	movs	r2, #63	; 0x3f
 80030fc:	409a      	lsls	r2, r3
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003116:	2b00      	cmp	r3, #0
 8003118:	d07e      	beq.n	8003218 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
        }
        return;
 8003122:	e079      	b.n	8003218 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01d      	beq.n	800316e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10d      	bne.n	800315c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	2b00      	cmp	r3, #0
 8003146:	d031      	beq.n	80031ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
 8003150:	e02c      	b.n	80031ac <HAL_DMA_IRQHandler+0x2a0>
 8003152:	bf00      	nop
 8003154:	20000000 	.word	0x20000000
 8003158:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d023      	beq.n	80031ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
 800316c:	e01e      	b.n	80031ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10f      	bne.n	800319c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0210 	bic.w	r2, r2, #16
 800318a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d032      	beq.n	800321a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d022      	beq.n	8003206 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2205      	movs	r2, #5
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	3301      	adds	r3, #1
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d307      	bcc.n	80031f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f2      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x2cc>
 80031f2:	e000      	b.n	80031f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
 8003216:	e000      	b.n	800321a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003218:	bf00      	nop
    }
  }
}
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800323c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b40      	cmp	r3, #64	; 0x40
 800324c:	d108      	bne.n	8003260 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800325e:	e007      	b.n	8003270 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	3b10      	subs	r3, #16
 800328c:	4a14      	ldr	r2, [pc, #80]	; (80032e0 <DMA_CalcBaseAndBitshift+0x64>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003296:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d909      	bls.n	80032be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	1d1a      	adds	r2, r3, #4
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	659a      	str	r2, [r3, #88]	; 0x58
 80032bc:	e007      	b.n	80032ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	aaaaaaab 	.word	0xaaaaaaab
 80032e4:	0800a528 	.word	0x0800a528

080032e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11f      	bne.n	8003342 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d856      	bhi.n	80033b6 <DMA_CheckFifoParam+0xce>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <DMA_CheckFifoParam+0x28>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003321 	.word	0x08003321
 8003314:	08003333 	.word	0x08003333
 8003318:	08003321 	.word	0x08003321
 800331c:	080033b7 	.word	0x080033b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d046      	beq.n	80033ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003330:	e043      	b.n	80033ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800333a:	d140      	bne.n	80033be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003340:	e03d      	b.n	80033be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334a:	d121      	bne.n	8003390 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d837      	bhi.n	80033c2 <DMA_CheckFifoParam+0xda>
 8003352:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <DMA_CheckFifoParam+0x70>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	08003369 	.word	0x08003369
 800335c:	0800336f 	.word	0x0800336f
 8003360:	08003369 	.word	0x08003369
 8003364:	08003381 	.word	0x08003381
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      break;
 800336c:	e030      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d025      	beq.n	80033c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337e:	e022      	b.n	80033c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003388:	d11f      	bne.n	80033ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800338e:	e01c      	b.n	80033ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d903      	bls.n	800339e <DMA_CheckFifoParam+0xb6>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d003      	beq.n	80033a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800339c:	e018      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
      break;
 80033a2:	e015      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00e      	beq.n	80033ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      break;
 80033b4:	e00b      	b.n	80033ce <DMA_CheckFifoParam+0xe6>
      break;
 80033b6:	bf00      	nop
 80033b8:	e00a      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ba:	bf00      	nop
 80033bc:	e008      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033be:	bf00      	nop
 80033c0:	e006      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033c2:	bf00      	nop
 80033c4:	e004      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033c6:	bf00      	nop
 80033c8:	e002      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80033ca:	bf00      	nop
 80033cc:	e000      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
    }
  } 
  
  return status; 
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop

080033e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	e16b      	b.n	80036d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033fc:	2201      	movs	r2, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	429a      	cmp	r2, r3
 8003416:	f040 815a 	bne.w	80036ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b01      	cmp	r3, #1
 8003424:	d005      	beq.n	8003432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800342e:	2b02      	cmp	r3, #2
 8003430:	d130      	bne.n	8003494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003468:	2201      	movs	r2, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 0201 	and.w	r2, r3, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b03      	cmp	r3, #3
 800349e:	d017      	beq.n	80034d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d123      	bne.n	8003524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	08da      	lsrs	r2, r3, #3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3208      	adds	r2, #8
 80034e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	220f      	movs	r2, #15
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	08da      	lsrs	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3208      	adds	r2, #8
 800351e:	69b9      	ldr	r1, [r7, #24]
 8003520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	2203      	movs	r2, #3
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0203 	and.w	r2, r3, #3
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80b4 	beq.w	80036ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	4b60      	ldr	r3, [pc, #384]	; (80036ec <HAL_GPIO_Init+0x30c>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	4a5f      	ldr	r2, [pc, #380]	; (80036ec <HAL_GPIO_Init+0x30c>)
 8003570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003574:	6453      	str	r3, [r2, #68]	; 0x44
 8003576:	4b5d      	ldr	r3, [pc, #372]	; (80036ec <HAL_GPIO_Init+0x30c>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003582:	4a5b      	ldr	r2, [pc, #364]	; (80036f0 <HAL_GPIO_Init+0x310>)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3302      	adds	r3, #2
 800358a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	220f      	movs	r2, #15
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4013      	ands	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a52      	ldr	r2, [pc, #328]	; (80036f4 <HAL_GPIO_Init+0x314>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d02b      	beq.n	8003606 <HAL_GPIO_Init+0x226>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a51      	ldr	r2, [pc, #324]	; (80036f8 <HAL_GPIO_Init+0x318>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d025      	beq.n	8003602 <HAL_GPIO_Init+0x222>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a50      	ldr	r2, [pc, #320]	; (80036fc <HAL_GPIO_Init+0x31c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01f      	beq.n	80035fe <HAL_GPIO_Init+0x21e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4f      	ldr	r2, [pc, #316]	; (8003700 <HAL_GPIO_Init+0x320>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d019      	beq.n	80035fa <HAL_GPIO_Init+0x21a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a4e      	ldr	r2, [pc, #312]	; (8003704 <HAL_GPIO_Init+0x324>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_GPIO_Init+0x216>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4d      	ldr	r2, [pc, #308]	; (8003708 <HAL_GPIO_Init+0x328>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00d      	beq.n	80035f2 <HAL_GPIO_Init+0x212>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4c      	ldr	r2, [pc, #304]	; (800370c <HAL_GPIO_Init+0x32c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d007      	beq.n	80035ee <HAL_GPIO_Init+0x20e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4b      	ldr	r2, [pc, #300]	; (8003710 <HAL_GPIO_Init+0x330>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <HAL_GPIO_Init+0x20a>
 80035e6:	2307      	movs	r3, #7
 80035e8:	e00e      	b.n	8003608 <HAL_GPIO_Init+0x228>
 80035ea:	2308      	movs	r3, #8
 80035ec:	e00c      	b.n	8003608 <HAL_GPIO_Init+0x228>
 80035ee:	2306      	movs	r3, #6
 80035f0:	e00a      	b.n	8003608 <HAL_GPIO_Init+0x228>
 80035f2:	2305      	movs	r3, #5
 80035f4:	e008      	b.n	8003608 <HAL_GPIO_Init+0x228>
 80035f6:	2304      	movs	r3, #4
 80035f8:	e006      	b.n	8003608 <HAL_GPIO_Init+0x228>
 80035fa:	2303      	movs	r3, #3
 80035fc:	e004      	b.n	8003608 <HAL_GPIO_Init+0x228>
 80035fe:	2302      	movs	r3, #2
 8003600:	e002      	b.n	8003608 <HAL_GPIO_Init+0x228>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <HAL_GPIO_Init+0x228>
 8003606:	2300      	movs	r3, #0
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	f002 0203 	and.w	r2, r2, #3
 800360e:	0092      	lsls	r2, r2, #2
 8003610:	4093      	lsls	r3, r2
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003618:	4935      	ldr	r1, [pc, #212]	; (80036f0 <HAL_GPIO_Init+0x310>)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	089b      	lsrs	r3, r3, #2
 800361e:	3302      	adds	r3, #2
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003626:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_GPIO_Init+0x334>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800364a:	4a32      	ldr	r2, [pc, #200]	; (8003714 <HAL_GPIO_Init+0x334>)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003650:	4b30      	ldr	r3, [pc, #192]	; (8003714 <HAL_GPIO_Init+0x334>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003674:	4a27      	ldr	r2, [pc, #156]	; (8003714 <HAL_GPIO_Init+0x334>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800367a:	4b26      	ldr	r3, [pc, #152]	; (8003714 <HAL_GPIO_Init+0x334>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800369e:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <HAL_GPIO_Init+0x334>)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_GPIO_Init+0x334>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036c8:	4a12      	ldr	r2, [pc, #72]	; (8003714 <HAL_GPIO_Init+0x334>)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3301      	adds	r3, #1
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b0f      	cmp	r3, #15
 80036d8:	f67f ae90 	bls.w	80033fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	3724      	adds	r7, #36	; 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40013800 	.word	0x40013800
 80036f4:	40020000 	.word	0x40020000
 80036f8:	40020400 	.word	0x40020400
 80036fc:	40020800 	.word	0x40020800
 8003700:	40020c00 	.word	0x40020c00
 8003704:	40021000 	.word	0x40021000
 8003708:	40021400 	.word	0x40021400
 800370c:	40021800 	.word	0x40021800
 8003710:	40021c00 	.word	0x40021c00
 8003714:	40013c00 	.word	0x40013c00

08003718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e267      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d075      	beq.n	8003822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003736:	4b88      	ldr	r3, [pc, #544]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b04      	cmp	r3, #4
 8003740:	d00c      	beq.n	800375c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003742:	4b85      	ldr	r3, [pc, #532]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800374a:	2b08      	cmp	r3, #8
 800374c:	d112      	bne.n	8003774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374e:	4b82      	ldr	r3, [pc, #520]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375a:	d10b      	bne.n	8003774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	4b7e      	ldr	r3, [pc, #504]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d05b      	beq.n	8003820 <HAL_RCC_OscConfig+0x108>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d157      	bne.n	8003820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e242      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377c:	d106      	bne.n	800378c <HAL_RCC_OscConfig+0x74>
 800377e:	4b76      	ldr	r3, [pc, #472]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a75      	ldr	r2, [pc, #468]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e01d      	b.n	80037c8 <HAL_RCC_OscConfig+0xb0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003794:	d10c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x98>
 8003796:	4b70      	ldr	r3, [pc, #448]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a6f      	ldr	r2, [pc, #444]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 800379c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b6d      	ldr	r3, [pc, #436]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a6c      	ldr	r2, [pc, #432]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e00b      	b.n	80037c8 <HAL_RCC_OscConfig+0xb0>
 80037b0:	4b69      	ldr	r3, [pc, #420]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a68      	ldr	r2, [pc, #416]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b66      	ldr	r3, [pc, #408]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a65      	ldr	r2, [pc, #404]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7ff f8a6 	bl	8002920 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d8:	f7ff f8a2 	bl	8002920 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e207      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b5b      	ldr	r3, [pc, #364]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0xc0>
 80037f6:	e014      	b.n	8003822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7ff f892 	bl	8002920 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003800:	f7ff f88e 	bl	8002920 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e1f3      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	4b51      	ldr	r3, [pc, #324]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0xe8>
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d063      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382e:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383a:	4b47      	ldr	r3, [pc, #284]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003842:	2b08      	cmp	r3, #8
 8003844:	d11c      	bne.n	8003880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003846:	4b44      	ldr	r3, [pc, #272]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d116      	bne.n	8003880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003852:	4b41      	ldr	r3, [pc, #260]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_RCC_OscConfig+0x152>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d001      	beq.n	800386a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e1c7      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b3b      	ldr	r3, [pc, #236]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4937      	ldr	r1, [pc, #220]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387e:	e03a      	b.n	80038f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003888:	4b34      	ldr	r3, [pc, #208]	; (800395c <HAL_RCC_OscConfig+0x244>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388e:	f7ff f847 	bl	8002920 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003896:	f7ff f843 	bl	8002920 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e1a8      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4b28      	ldr	r3, [pc, #160]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4925      	ldr	r1, [pc, #148]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
 80038c8:	e015      	b.n	80038f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ca:	4b24      	ldr	r3, [pc, #144]	; (800395c <HAL_RCC_OscConfig+0x244>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7ff f826 	bl	8002920 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d8:	f7ff f822 	bl	8002920 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e187      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d036      	beq.n	8003970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d016      	beq.n	8003938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <HAL_RCC_OscConfig+0x248>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7ff f806 	bl	8002920 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003918:	f7ff f802 	bl	8002920 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e167      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 800392c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x200>
 8003936:	e01b      	b.n	8003970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <HAL_RCC_OscConfig+0x248>)
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fe ffef 	bl	8002920 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003944:	e00e      	b.n	8003964 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003946:	f7fe ffeb 	bl	8002920 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d907      	bls.n	8003964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e150      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
 8003958:	40023800 	.word	0x40023800
 800395c:	42470000 	.word	0x42470000
 8003960:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	4b88      	ldr	r3, [pc, #544]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ea      	bne.n	8003946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8097 	beq.w	8003aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003982:	4b81      	ldr	r3, [pc, #516]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10f      	bne.n	80039ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	4b7d      	ldr	r3, [pc, #500]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a7c      	ldr	r2, [pc, #496]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b7a      	ldr	r3, [pc, #488]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ae:	4b77      	ldr	r3, [pc, #476]	; (8003b8c <HAL_RCC_OscConfig+0x474>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d118      	bne.n	80039ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ba:	4b74      	ldr	r3, [pc, #464]	; (8003b8c <HAL_RCC_OscConfig+0x474>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a73      	ldr	r2, [pc, #460]	; (8003b8c <HAL_RCC_OscConfig+0x474>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c6:	f7fe ffab 	bl	8002920 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ce:	f7fe ffa7 	bl	8002920 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e10c      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	4b6a      	ldr	r3, [pc, #424]	; (8003b8c <HAL_RCC_OscConfig+0x474>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x2ea>
 80039f4:	4b64      	ldr	r3, [pc, #400]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a63      	ldr	r2, [pc, #396]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	e01c      	b.n	8003a3c <HAL_RCC_OscConfig+0x324>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b05      	cmp	r3, #5
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x30c>
 8003a0a:	4b5f      	ldr	r3, [pc, #380]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4a5e      	ldr	r2, [pc, #376]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a10:	f043 0304 	orr.w	r3, r3, #4
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70
 8003a16:	4b5c      	ldr	r3, [pc, #368]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	4a5b      	ldr	r2, [pc, #364]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6713      	str	r3, [r2, #112]	; 0x70
 8003a22:	e00b      	b.n	8003a3c <HAL_RCC_OscConfig+0x324>
 8003a24:	4b58      	ldr	r3, [pc, #352]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a57      	ldr	r2, [pc, #348]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a30:	4b55      	ldr	r3, [pc, #340]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	4a54      	ldr	r2, [pc, #336]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a36:	f023 0304 	bic.w	r3, r3, #4
 8003a3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d015      	beq.n	8003a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a44:	f7fe ff6c 	bl	8002920 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4a:	e00a      	b.n	8003a62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a4c:	f7fe ff68 	bl	8002920 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e0cb      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a62:	4b49      	ldr	r3, [pc, #292]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0ee      	beq.n	8003a4c <HAL_RCC_OscConfig+0x334>
 8003a6e:	e014      	b.n	8003a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a70:	f7fe ff56 	bl	8002920 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a78:	f7fe ff52 	bl	8002920 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0b5      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8e:	4b3e      	ldr	r3, [pc, #248]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1ee      	bne.n	8003a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa0:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	4a38      	ldr	r2, [pc, #224]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80a1 	beq.w	8003bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ab6:	4b34      	ldr	r3, [pc, #208]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d05c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d141      	bne.n	8003b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <HAL_RCC_OscConfig+0x478>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fe ff26 	bl	8002920 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fe ff22 	bl	8002920 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e087      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	019b      	lsls	r3, r3, #6
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	061b      	lsls	r3, r3, #24
 8003b1a:	491b      	ldr	r1, [pc, #108]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_RCC_OscConfig+0x478>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fe fefb 	bl	8002920 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2e:	f7fe fef7 	bl	8002920 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e05c      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x416>
 8003b4c:	e054      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4e:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <HAL_RCC_OscConfig+0x478>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fee4 	bl	8002920 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fe fee0 	bl	8002920 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e045      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x444>
 8003b7a:	e03d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d107      	bne.n	8003b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e038      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_RCC_OscConfig+0x4ec>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d028      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d121      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d11a      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d111      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800

08003c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0cc      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b68      	ldr	r3, [pc, #416]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d90c      	bls.n	8003c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b65      	ldr	r3, [pc, #404]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b63      	ldr	r3, [pc, #396]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0b8      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d020      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c5c:	4b59      	ldr	r3, [pc, #356]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a58      	ldr	r2, [pc, #352]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c74:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a52      	ldr	r2, [pc, #328]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c80:	4b50      	ldr	r3, [pc, #320]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	494d      	ldr	r1, [pc, #308]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d044      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d119      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e07f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc6:	4b3f      	ldr	r3, [pc, #252]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e06f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd6:	4b3b      	ldr	r3, [pc, #236]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e067      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce6:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f023 0203 	bic.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4934      	ldr	r1, [pc, #208]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf8:	f7fe fe12 	bl	8002920 <HAL_GetTick>
 8003cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d00:	f7fe fe0e 	bl	8002920 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e04f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 020c 	and.w	r2, r3, #12
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d1eb      	bne.n	8003d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d28:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d20c      	bcs.n	8003d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e032      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d5c:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4916      	ldr	r1, [pc, #88]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	490e      	ldr	r1, [pc, #56]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d8e:	f000 f821 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	490a      	ldr	r1, [pc, #40]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	5ccb      	ldrb	r3, [r1, r3]
 8003da2:	fa22 f303 	lsr.w	r3, r2, r3
 8003da6:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fd72 	bl	8002898 <HAL_InitTick>

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023c00 	.word	0x40023c00
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	0800a510 	.word	0x0800a510
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	20000004 	.word	0x20000004

08003dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd8:	b094      	sub	sp, #80	; 0x50
 8003dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	647b      	str	r3, [r7, #68]	; 0x44
 8003de0:	2300      	movs	r3, #0
 8003de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003de4:	2300      	movs	r3, #0
 8003de6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dec:	4b79      	ldr	r3, [pc, #484]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d00d      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x40>
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	f200 80e1 	bhi.w	8003fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x34>
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e06:	e0db      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e08:	4b73      	ldr	r3, [pc, #460]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e0c:	e0db      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e0e:	4b73      	ldr	r3, [pc, #460]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8003e10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e12:	e0d8      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e14:	4b6f      	ldr	r3, [pc, #444]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e1e:	4b6d      	ldr	r3, [pc, #436]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d063      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2a:	4b6a      	ldr	r3, [pc, #424]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	099b      	lsrs	r3, r3, #6
 8003e30:	2200      	movs	r2, #0
 8003e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e3e:	2300      	movs	r3, #0
 8003e40:	637b      	str	r3, [r7, #52]	; 0x34
 8003e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e46:	4622      	mov	r2, r4
 8003e48:	462b      	mov	r3, r5
 8003e4a:	f04f 0000 	mov.w	r0, #0
 8003e4e:	f04f 0100 	mov.w	r1, #0
 8003e52:	0159      	lsls	r1, r3, #5
 8003e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e58:	0150      	lsls	r0, r2, #5
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4621      	mov	r1, r4
 8003e60:	1a51      	subs	r1, r2, r1
 8003e62:	6139      	str	r1, [r7, #16]
 8003e64:	4629      	mov	r1, r5
 8003e66:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e78:	4659      	mov	r1, fp
 8003e7a:	018b      	lsls	r3, r1, #6
 8003e7c:	4651      	mov	r1, sl
 8003e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e82:	4651      	mov	r1, sl
 8003e84:	018a      	lsls	r2, r1, #6
 8003e86:	4651      	mov	r1, sl
 8003e88:	ebb2 0801 	subs.w	r8, r2, r1
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ea6:	4690      	mov	r8, r2
 8003ea8:	4699      	mov	r9, r3
 8003eaa:	4623      	mov	r3, r4
 8003eac:	eb18 0303 	adds.w	r3, r8, r3
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	462b      	mov	r3, r5
 8003eb4:	eb49 0303 	adc.w	r3, r9, r3
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	024b      	lsls	r3, r1, #9
 8003eca:	4621      	mov	r1, r4
 8003ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	024a      	lsls	r2, r1, #9
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eda:	2200      	movs	r2, #0
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ee4:	f7fc fed0 	bl	8000c88 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4613      	mov	r3, r2
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef0:	e058      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef2:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	099b      	lsrs	r3, r3, #6
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	4611      	mov	r1, r2
 8003efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	2300      	movs	r3, #0
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
 8003f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	464b      	mov	r3, r9
 8003f10:	f04f 0000 	mov.w	r0, #0
 8003f14:	f04f 0100 	mov.w	r1, #0
 8003f18:	0159      	lsls	r1, r3, #5
 8003f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f1e:	0150      	lsls	r0, r2, #5
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4641      	mov	r1, r8
 8003f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f44:	ebb2 040a 	subs.w	r4, r2, sl
 8003f48:	eb63 050b 	sbc.w	r5, r3, fp
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	00eb      	lsls	r3, r5, #3
 8003f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f5a:	00e2      	lsls	r2, r4, #3
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	4643      	mov	r3, r8
 8003f62:	18e3      	adds	r3, r4, r3
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	464b      	mov	r3, r9
 8003f68:	eb45 0303 	adc.w	r3, r5, r3
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	028b      	lsls	r3, r1, #10
 8003f7e:	4621      	mov	r1, r4
 8003f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f84:	4621      	mov	r1, r4
 8003f86:	028a      	lsls	r2, r1, #10
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	61fa      	str	r2, [r7, #28]
 8003f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f98:	f7fc fe76 	bl	8000c88 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3750      	adds	r7, #80	; 0x50
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	00f42400 	.word	0x00f42400
 8003fdc:	007a1200 	.word	0x007a1200

08003fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000000 	.word	0x20000000

08003ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ffc:	f7ff fff0 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	0a9b      	lsrs	r3, r3, #10
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4903      	ldr	r1, [pc, #12]	; (800401c <HAL_RCC_GetPCLK1Freq+0x24>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004014:	4618      	mov	r0, r3
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	0800a520 	.word	0x0800a520

08004020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004024:	f7ff ffdc 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	0b5b      	lsrs	r3, r3, #13
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4903      	ldr	r1, [pc, #12]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40023800 	.word	0x40023800
 8004044:	0800a520 	.word	0x0800a520

08004048 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e01c      	b.n	8004094 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	795b      	ldrb	r3, [r3, #5]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd fe44 	bl	8001cf8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0204 	orr.w	r2, r2, #4
 8004084:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e03f      	b.n	800412e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fe fa0a 	bl	80024dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2224      	movs	r2, #36	; 0x24
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 ff2b 	bl	8004f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b08a      	sub	sp, #40	; 0x28
 800413a:	af02      	add	r7, sp, #8
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b20      	cmp	r3, #32
 8004154:	d17c      	bne.n	8004250 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_UART_Transmit+0x2c>
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e075      	b.n	8004252 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_UART_Transmit+0x3e>
 8004170:	2302      	movs	r3, #2
 8004172:	e06e      	b.n	8004252 <HAL_UART_Transmit+0x11c>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2221      	movs	r2, #33	; 0x21
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800418a:	f7fe fbc9 	bl	8002920 <HAL_GetTick>
 800418e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	88fa      	ldrh	r2, [r7, #6]
 8004194:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	88fa      	ldrh	r2, [r7, #6]
 800419a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a4:	d108      	bne.n	80041b8 <HAL_UART_Transmit+0x82>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d104      	bne.n	80041b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	e003      	b.n	80041c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041c8:	e02a      	b.n	8004220 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	2180      	movs	r1, #128	; 0x80
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fc42 	bl	8004a5e <UART_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e036      	b.n	8004252 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	3302      	adds	r3, #2
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	e007      	b.n	8004212 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	3301      	adds	r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1cf      	bne.n	80041ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2200      	movs	r2, #0
 8004232:	2140      	movs	r1, #64	; 0x40
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fc12 	bl	8004a5e <UART_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e006      	b.n	8004252 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	4613      	mov	r3, r2
 8004266:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b20      	cmp	r3, #32
 8004272:	d11d      	bne.n	80042b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_UART_Receive_IT+0x26>
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e016      	b.n	80042b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_UART_Receive_IT+0x38>
 800428e:	2302      	movs	r3, #2
 8004290:	e00f      	b.n	80042b2 <HAL_UART_Receive_IT+0x58>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	461a      	mov	r2, r3
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fc47 	bl	8004b3a <UART_Start_Receive_IT>
 80042ac:	4603      	mov	r3, r0
 80042ae:	e000      	b.n	80042b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042b0:	2302      	movs	r3, #2
  }
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	; 0x30
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	d165      	bne.n	80043a2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_UART_Transmit_DMA+0x26>
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e05e      	b.n	80043a4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_UART_Transmit_DMA+0x38>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e057      	b.n	80043a4 <HAL_UART_Transmit_DMA+0xe8>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	88fa      	ldrh	r2, [r7, #6]
 8004306:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2221      	movs	r2, #33	; 0x21
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	4a22      	ldr	r2, [pc, #136]	; (80043ac <HAL_UART_Transmit_DMA+0xf0>)
 8004322:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <HAL_UART_Transmit_DMA+0xf4>)
 800432a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004330:	4a20      	ldr	r2, [pc, #128]	; (80043b4 <HAL_UART_Transmit_DMA+0xf8>)
 8004332:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	2200      	movs	r2, #0
 800433a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800433c:	f107 0308 	add.w	r3, r7, #8
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	6819      	ldr	r1, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3304      	adds	r3, #4
 8004350:	461a      	mov	r2, r3
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	f7fe fcf0 	bl	8002d38 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004360:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3314      	adds	r3, #20
 8004370:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	617b      	str	r3, [r7, #20]
   return(result);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3314      	adds	r3, #20
 8004388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800438a:	627a      	str	r2, [r7, #36]	; 0x24
 800438c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6a39      	ldr	r1, [r7, #32]
 8004390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	61fb      	str	r3, [r7, #28]
   return(result);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e5      	bne.n	800436a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3730      	adds	r7, #48	; 0x30
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	08004915 	.word	0x08004915
 80043b0:	080049af 	.word	0x080049af
 80043b4:	080049cb 	.word	0x080049cb

080043b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b0ba      	sub	sp, #232	; 0xe8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043de:	2300      	movs	r3, #0
 80043e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10f      	bne.n	800441e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_UART_IRQHandler+0x66>
 800440a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fcd4 	bl	8004dc4 <UART_Receive_IT>
      return;
 800441c:	e256      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800441e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80de 	beq.w	80045e4 <HAL_UART_IRQHandler+0x22c>
 8004428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004438:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80d1 	beq.w	80045e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_UART_IRQHandler+0xae>
 800444e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_UART_IRQHandler+0xd2>
 8004472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f043 0202 	orr.w	r2, r3, #2
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800448a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_UART_IRQHandler+0xf6>
 8004496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d011      	beq.n	80044de <HAL_UART_IRQHandler+0x126>
 80044ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d105      	bne.n	80044d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0208 	orr.w	r2, r3, #8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 81ed 	beq.w	80048c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_UART_IRQHandler+0x14e>
 80044f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fc5f 	bl	8004dc4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <HAL_UART_IRQHandler+0x17a>
 800452a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d04f      	beq.n	80045d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fb67 	bl	8004c06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d141      	bne.n	80045ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800455c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3314      	adds	r3, #20
 800456e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004572:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800457e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800458a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1d9      	bne.n	8004546 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	2b00      	cmp	r3, #0
 8004598:	d013      	beq.n	80045c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	4a7d      	ldr	r2, [pc, #500]	; (8004794 <HAL_UART_IRQHandler+0x3dc>)
 80045a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fc8e 	bl	8002ec8 <HAL_DMA_Abort_IT>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045bc:	4610      	mov	r0, r2
 80045be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	e00e      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fc fd7a 	bl	80010bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	e00a      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fc fd76 	bl	80010bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	e006      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fc fd72 	bl	80010bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045de:	e170      	b.n	80048c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	bf00      	nop
    return;
 80045e2:	e16e      	b.n	80048c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f040 814a 	bne.w	8004882 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8143 	beq.w	8004882 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 813c 	beq.w	8004882 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	f040 80b4 	bne.w	8004798 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800463c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8140 	beq.w	80048c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800464a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800464e:	429a      	cmp	r2, r3
 8004650:	f080 8139 	bcs.w	80048c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800465a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004666:	f000 8088 	beq.w	800477a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	330c      	adds	r3, #12
 8004670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	330c      	adds	r3, #12
 8004692:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004696:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800469a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1d9      	bne.n	800466a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e1      	bne.n	80046b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3314      	adds	r3, #20
 8004712:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004716:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004718:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800471c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e3      	bne.n	80046f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800474a:	f023 0310 	bic.w	r3, r3, #16
 800474e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800475c:	65ba      	str	r2, [r7, #88]	; 0x58
 800475e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004762:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800476a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e3      	bne.n	8004738 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	4618      	mov	r0, r3
 8004776:	f7fe fb37 	bl	8002de8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004782:	b29b      	uxth	r3, r3
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	b29b      	uxth	r3, r3
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f8b6 	bl	80048fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004790:	e099      	b.n	80048c6 <HAL_UART_IRQHandler+0x50e>
 8004792:	bf00      	nop
 8004794:	08004ccd 	.word	0x08004ccd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 808b 	beq.w	80048ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8086 	beq.w	80048ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047e2:	647a      	str	r2, [r7, #68]	; 0x44
 80047e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e3      	bne.n	80047be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	623b      	str	r3, [r7, #32]
   return(result);
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3314      	adds	r3, #20
 8004816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800481a:	633a      	str	r2, [r7, #48]	; 0x30
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e3      	bne.n	80047f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	330c      	adds	r3, #12
 8004842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	60fb      	str	r3, [r7, #12]
   return(result);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0310 	bic.w	r3, r3, #16
 8004852:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004860:	61fa      	str	r2, [r7, #28]
 8004862:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	69b9      	ldr	r1, [r7, #24]
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	617b      	str	r3, [r7, #20]
   return(result);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e3      	bne.n	800483c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004874:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f83e 	bl	80048fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004880:	e023      	b.n	80048ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <HAL_UART_IRQHandler+0x4ea>
 800488e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fa2a 	bl	8004cf4 <UART_Transmit_IT>
    return;
 80048a0:	e014      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00e      	beq.n	80048cc <HAL_UART_IRQHandler+0x514>
 80048ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d008      	beq.n	80048cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa6a 	bl	8004d94 <UART_EndTransmit_IT>
    return;
 80048c0:	e004      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
    return;
 80048c2:	bf00      	nop
 80048c4:	e002      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
      return;
 80048c6:	bf00      	nop
 80048c8:	e000      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
      return;
 80048ca:	bf00      	nop
  }
}
 80048cc:	37e8      	adds	r7, #232	; 0xe8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop

080048d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b090      	sub	sp, #64	; 0x40
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d137      	bne.n	80049a0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004932:	2200      	movs	r2, #0
 8004934:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3314      	adds	r3, #20
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	623b      	str	r3, [r7, #32]
   return(result);
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494c:	63bb      	str	r3, [r7, #56]	; 0x38
 800494e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3314      	adds	r3, #20
 8004954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004956:	633a      	str	r2, [r7, #48]	; 0x30
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800495c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e5      	bne.n	8004936 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	330c      	adds	r3, #12
 8004970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	60fb      	str	r3, [r7, #12]
   return(result);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
 8004982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800498a:	61fa      	str	r2, [r7, #28]
 800498c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	69b9      	ldr	r1, [r7, #24]
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	617b      	str	r3, [r7, #20]
   return(result);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e5      	bne.n	800496a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800499e:	e002      	b.n	80049a6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80049a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049a2:	f7ff ff97 	bl	80048d4 <HAL_UART_TxCpltCallback>
}
 80049a6:	bf00      	nop
 80049a8:	3740      	adds	r7, #64	; 0x40
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff ff93 	bl	80048e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049c2:	bf00      	nop
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e6:	2b80      	cmp	r3, #128	; 0x80
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b21      	cmp	r3, #33	; 0x21
 80049fc:	d108      	bne.n	8004a10 <UART_DMAError+0x46>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2200      	movs	r2, #0
 8004a08:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004a0a:	68b8      	ldr	r0, [r7, #8]
 8004a0c:	f000 f8d3 	bl	8004bb6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b40      	cmp	r3, #64	; 0x40
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b22      	cmp	r3, #34	; 0x22
 8004a30:	d108      	bne.n	8004a44 <UART_DMAError+0x7a>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a3e:	68b8      	ldr	r0, [r7, #8]
 8004a40:	f000 f8e1 	bl	8004c06 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	f043 0210 	orr.w	r2, r3, #16
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a50:	68b8      	ldr	r0, [r7, #8]
 8004a52:	f7fc fb33 	bl	80010bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b090      	sub	sp, #64	; 0x40
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	603b      	str	r3, [r7, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a6e:	e050      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a76:	d04c      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a7e:	f7fd ff4f 	bl	8002920 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d241      	bcs.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	330c      	adds	r3, #12
 8004aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004aae:	637a      	str	r2, [r7, #52]	; 0x34
 8004ab0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e5      	bne.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3314      	adds	r3, #20
 8004ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3314      	adds	r3, #20
 8004ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae2:	623a      	str	r2, [r7, #32]
 8004ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	69f9      	ldr	r1, [r7, #28]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e5      	bne.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e00f      	b.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	bf0c      	ite	eq
 8004b22:	2301      	moveq	r3, #1
 8004b24:	2300      	movne	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d09f      	beq.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3740      	adds	r7, #64	; 0x40
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	4613      	mov	r3, r2
 8004b46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2222      	movs	r2, #34	; 0x22
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b86:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695a      	ldr	r2, [r3, #20]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0220 	orr.w	r2, r2, #32
 8004ba6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b089      	sub	sp, #36	; 0x24
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bd4:	61fb      	str	r3, [r7, #28]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	330c      	adds	r3, #12
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	61ba      	str	r2, [r7, #24]
 8004be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6979      	ldr	r1, [r7, #20]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	613b      	str	r3, [r7, #16]
   return(result);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e5      	bne.n	8004bbe <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004bfa:	bf00      	nop
 8004bfc:	3724      	adds	r7, #36	; 0x24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b095      	sub	sp, #84	; 0x54
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c2e:	643a      	str	r2, [r7, #64]	; 0x40
 8004c30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e5      	bne.n	8004c0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3314      	adds	r3, #20
 8004c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e5      	bne.n	8004c42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d119      	bne.n	8004cb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	330c      	adds	r3, #12
 8004c84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f023 0310 	bic.w	r3, r3, #16
 8004c94:	647b      	str	r3, [r7, #68]	; 0x44
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c9e:	61ba      	str	r2, [r7, #24]
 8004ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6979      	ldr	r1, [r7, #20]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	613b      	str	r3, [r7, #16]
   return(result);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e5      	bne.n	8004c7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cc0:	bf00      	nop
 8004cc2:	3754      	adds	r7, #84	; 0x54
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7fc f9e8 	bl	80010bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b21      	cmp	r3, #33	; 0x21
 8004d06:	d13e      	bne.n	8004d86 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d10:	d114      	bne.n	8004d3c <UART_Transmit_IT+0x48>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d110      	bne.n	8004d3c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d2e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	1c9a      	adds	r2, r3, #2
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	621a      	str	r2, [r3, #32]
 8004d3a:	e008      	b.n	8004d4e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	1c59      	adds	r1, r3, #1
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6211      	str	r1, [r2, #32]
 8004d46:	781a      	ldrb	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10f      	bne.n	8004d82 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e000      	b.n	8004d88 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d86:	2302      	movs	r3, #2
  }
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004daa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fd8d 	bl	80048d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08c      	sub	sp, #48	; 0x30
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b22      	cmp	r3, #34	; 0x22
 8004dd6:	f040 80ab 	bne.w	8004f30 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d117      	bne.n	8004e14 <UART_Receive_IT+0x50>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d113      	bne.n	8004e14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	1c9a      	adds	r2, r3, #2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	629a      	str	r2, [r3, #40]	; 0x28
 8004e12:	e026      	b.n	8004e62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e26:	d007      	beq.n	8004e38 <UART_Receive_IT+0x74>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <UART_Receive_IT+0x82>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	e008      	b.n	8004e58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d15a      	bne.n	8004f2c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0220 	bic.w	r2, r2, #32
 8004e84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695a      	ldr	r2, [r3, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d135      	bne.n	8004f22 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	613b      	str	r3, [r7, #16]
   return(result);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f023 0310 	bic.w	r3, r3, #16
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004edc:	623a      	str	r2, [r7, #32]
 8004ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	69f9      	ldr	r1, [r7, #28]
 8004ee2:	6a3a      	ldr	r2, [r7, #32]
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e5      	bne.n	8004ebc <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d10a      	bne.n	8004f14 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fcee 	bl	80048fc <HAL_UARTEx_RxEventCallback>
 8004f20:	e002      	b.n	8004f28 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc fcc0 	bl	80018a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e002      	b.n	8004f32 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
  }
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3730      	adds	r7, #48	; 0x30
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f40:	b0c0      	sub	sp, #256	; 0x100
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	68d9      	ldr	r1, [r3, #12]
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	ea40 0301 	orr.w	r3, r0, r1
 8004f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f94:	f021 010c 	bic.w	r1, r1, #12
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb6:	6999      	ldr	r1, [r3, #24]
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	ea40 0301 	orr.w	r3, r0, r1
 8004fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b8f      	ldr	r3, [pc, #572]	; (8005208 <UART_SetConfig+0x2cc>)
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d005      	beq.n	8004fdc <UART_SetConfig+0xa0>
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b8d      	ldr	r3, [pc, #564]	; (800520c <UART_SetConfig+0x2d0>)
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d104      	bne.n	8004fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7ff f820 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8004fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fe4:	e003      	b.n	8004fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fe6:	f7ff f807 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8004fea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff8:	f040 810c 	bne.w	8005214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005000:	2200      	movs	r2, #0
 8005002:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005006:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800500a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800500e:	4622      	mov	r2, r4
 8005010:	462b      	mov	r3, r5
 8005012:	1891      	adds	r1, r2, r2
 8005014:	65b9      	str	r1, [r7, #88]	; 0x58
 8005016:	415b      	adcs	r3, r3
 8005018:	65fb      	str	r3, [r7, #92]	; 0x5c
 800501a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800501e:	4621      	mov	r1, r4
 8005020:	eb12 0801 	adds.w	r8, r2, r1
 8005024:	4629      	mov	r1, r5
 8005026:	eb43 0901 	adc.w	r9, r3, r1
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800503a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800503e:	4690      	mov	r8, r2
 8005040:	4699      	mov	r9, r3
 8005042:	4623      	mov	r3, r4
 8005044:	eb18 0303 	adds.w	r3, r8, r3
 8005048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800504c:	462b      	mov	r3, r5
 800504e:	eb49 0303 	adc.w	r3, r9, r3
 8005052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005062:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800506a:	460b      	mov	r3, r1
 800506c:	18db      	adds	r3, r3, r3
 800506e:	653b      	str	r3, [r7, #80]	; 0x50
 8005070:	4613      	mov	r3, r2
 8005072:	eb42 0303 	adc.w	r3, r2, r3
 8005076:	657b      	str	r3, [r7, #84]	; 0x54
 8005078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800507c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005080:	f7fb fe02 	bl	8000c88 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4b61      	ldr	r3, [pc, #388]	; (8005210 <UART_SetConfig+0x2d4>)
 800508a:	fba3 2302 	umull	r2, r3, r3, r2
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	011c      	lsls	r4, r3, #4
 8005092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005096:	2200      	movs	r2, #0
 8005098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800509c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80050ac:	415b      	adcs	r3, r3
 80050ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050b4:	4641      	mov	r1, r8
 80050b6:	eb12 0a01 	adds.w	sl, r2, r1
 80050ba:	4649      	mov	r1, r9
 80050bc:	eb43 0b01 	adc.w	fp, r3, r1
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050d4:	4692      	mov	sl, r2
 80050d6:	469b      	mov	fp, r3
 80050d8:	4643      	mov	r3, r8
 80050da:	eb1a 0303 	adds.w	r3, sl, r3
 80050de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050e2:	464b      	mov	r3, r9
 80050e4:	eb4b 0303 	adc.w	r3, fp, r3
 80050e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005100:	460b      	mov	r3, r1
 8005102:	18db      	adds	r3, r3, r3
 8005104:	643b      	str	r3, [r7, #64]	; 0x40
 8005106:	4613      	mov	r3, r2
 8005108:	eb42 0303 	adc.w	r3, r2, r3
 800510c:	647b      	str	r3, [r7, #68]	; 0x44
 800510e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005116:	f7fb fdb7 	bl	8000c88 <__aeabi_uldivmod>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4611      	mov	r1, r2
 8005120:	4b3b      	ldr	r3, [pc, #236]	; (8005210 <UART_SetConfig+0x2d4>)
 8005122:	fba3 2301 	umull	r2, r3, r3, r1
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	2264      	movs	r2, #100	; 0x64
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	1acb      	subs	r3, r1, r3
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005136:	4b36      	ldr	r3, [pc, #216]	; (8005210 <UART_SetConfig+0x2d4>)
 8005138:	fba3 2302 	umull	r2, r3, r3, r2
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005144:	441c      	add	r4, r3
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005150:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005160:	415b      	adcs	r3, r3
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005168:	4641      	mov	r1, r8
 800516a:	1851      	adds	r1, r2, r1
 800516c:	6339      	str	r1, [r7, #48]	; 0x30
 800516e:	4649      	mov	r1, r9
 8005170:	414b      	adcs	r3, r1
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005180:	4659      	mov	r1, fp
 8005182:	00cb      	lsls	r3, r1, #3
 8005184:	4651      	mov	r1, sl
 8005186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518a:	4651      	mov	r1, sl
 800518c:	00ca      	lsls	r2, r1, #3
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	4603      	mov	r3, r0
 8005194:	4642      	mov	r2, r8
 8005196:	189b      	adds	r3, r3, r2
 8005198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800519c:	464b      	mov	r3, r9
 800519e:	460a      	mov	r2, r1
 80051a0:	eb42 0303 	adc.w	r3, r2, r3
 80051a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051bc:	460b      	mov	r3, r1
 80051be:	18db      	adds	r3, r3, r3
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c2:	4613      	mov	r3, r2
 80051c4:	eb42 0303 	adc.w	r3, r2, r3
 80051c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051d2:	f7fb fd59 	bl	8000c88 <__aeabi_uldivmod>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <UART_SetConfig+0x2d4>)
 80051dc:	fba3 1302 	umull	r1, r3, r3, r2
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	2164      	movs	r1, #100	; 0x64
 80051e4:	fb01 f303 	mul.w	r3, r1, r3
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	3332      	adds	r3, #50	; 0x32
 80051ee:	4a08      	ldr	r2, [pc, #32]	; (8005210 <UART_SetConfig+0x2d4>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	f003 0207 	and.w	r2, r3, #7
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4422      	add	r2, r4
 8005202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005204:	e106      	b.n	8005414 <UART_SetConfig+0x4d8>
 8005206:	bf00      	nop
 8005208:	40011000 	.word	0x40011000
 800520c:	40011400 	.word	0x40011400
 8005210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005218:	2200      	movs	r2, #0
 800521a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800521e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005226:	4642      	mov	r2, r8
 8005228:	464b      	mov	r3, r9
 800522a:	1891      	adds	r1, r2, r2
 800522c:	6239      	str	r1, [r7, #32]
 800522e:	415b      	adcs	r3, r3
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
 8005232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005236:	4641      	mov	r1, r8
 8005238:	1854      	adds	r4, r2, r1
 800523a:	4649      	mov	r1, r9
 800523c:	eb43 0501 	adc.w	r5, r3, r1
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	00eb      	lsls	r3, r5, #3
 800524a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800524e:	00e2      	lsls	r2, r4, #3
 8005250:	4614      	mov	r4, r2
 8005252:	461d      	mov	r5, r3
 8005254:	4643      	mov	r3, r8
 8005256:	18e3      	adds	r3, r4, r3
 8005258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800525c:	464b      	mov	r3, r9
 800525e:	eb45 0303 	adc.w	r3, r5, r3
 8005262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005272:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005282:	4629      	mov	r1, r5
 8005284:	008b      	lsls	r3, r1, #2
 8005286:	4621      	mov	r1, r4
 8005288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800528c:	4621      	mov	r1, r4
 800528e:	008a      	lsls	r2, r1, #2
 8005290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005294:	f7fb fcf8 	bl	8000c88 <__aeabi_uldivmod>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4b60      	ldr	r3, [pc, #384]	; (8005420 <UART_SetConfig+0x4e4>)
 800529e:	fba3 2302 	umull	r2, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	011c      	lsls	r4, r3, #4
 80052a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	61b9      	str	r1, [r7, #24]
 80052c0:	415b      	adcs	r3, r3
 80052c2:	61fb      	str	r3, [r7, #28]
 80052c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c8:	4641      	mov	r1, r8
 80052ca:	1851      	adds	r1, r2, r1
 80052cc:	6139      	str	r1, [r7, #16]
 80052ce:	4649      	mov	r1, r9
 80052d0:	414b      	adcs	r3, r1
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052e0:	4659      	mov	r1, fp
 80052e2:	00cb      	lsls	r3, r1, #3
 80052e4:	4651      	mov	r1, sl
 80052e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ea:	4651      	mov	r1, sl
 80052ec:	00ca      	lsls	r2, r1, #3
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	4642      	mov	r2, r8
 80052f6:	189b      	adds	r3, r3, r2
 80052f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052fc:	464b      	mov	r3, r9
 80052fe:	460a      	mov	r2, r1
 8005300:	eb42 0303 	adc.w	r3, r2, r3
 8005304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	67bb      	str	r3, [r7, #120]	; 0x78
 8005312:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005320:	4649      	mov	r1, r9
 8005322:	008b      	lsls	r3, r1, #2
 8005324:	4641      	mov	r1, r8
 8005326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800532a:	4641      	mov	r1, r8
 800532c:	008a      	lsls	r2, r1, #2
 800532e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005332:	f7fb fca9 	bl	8000c88 <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4611      	mov	r1, r2
 800533c:	4b38      	ldr	r3, [pc, #224]	; (8005420 <UART_SetConfig+0x4e4>)
 800533e:	fba3 2301 	umull	r2, r3, r3, r1
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2264      	movs	r2, #100	; 0x64
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	1acb      	subs	r3, r1, r3
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	3332      	adds	r3, #50	; 0x32
 8005350:	4a33      	ldr	r2, [pc, #204]	; (8005420 <UART_SetConfig+0x4e4>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800535c:	441c      	add	r4, r3
 800535e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005362:	2200      	movs	r2, #0
 8005364:	673b      	str	r3, [r7, #112]	; 0x70
 8005366:	677a      	str	r2, [r7, #116]	; 0x74
 8005368:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	415b      	adcs	r3, r3
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800537c:	4641      	mov	r1, r8
 800537e:	1851      	adds	r1, r2, r1
 8005380:	6039      	str	r1, [r7, #0]
 8005382:	4649      	mov	r1, r9
 8005384:	414b      	adcs	r3, r1
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005394:	4659      	mov	r1, fp
 8005396:	00cb      	lsls	r3, r1, #3
 8005398:	4651      	mov	r1, sl
 800539a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539e:	4651      	mov	r1, sl
 80053a0:	00ca      	lsls	r2, r1, #3
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	4642      	mov	r2, r8
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ae:	464b      	mov	r3, r9
 80053b0:	460a      	mov	r2, r1
 80053b2:	eb42 0303 	adc.w	r3, r2, r3
 80053b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	663b      	str	r3, [r7, #96]	; 0x60
 80053c2:	667a      	str	r2, [r7, #100]	; 0x64
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053d0:	4649      	mov	r1, r9
 80053d2:	008b      	lsls	r3, r1, #2
 80053d4:	4641      	mov	r1, r8
 80053d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053da:	4641      	mov	r1, r8
 80053dc:	008a      	lsls	r2, r1, #2
 80053de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053e2:	f7fb fc51 	bl	8000c88 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <UART_SetConfig+0x4e4>)
 80053ec:	fba3 1302 	umull	r1, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	2164      	movs	r1, #100	; 0x64
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	3332      	adds	r3, #50	; 0x32
 80053fe:	4a08      	ldr	r2, [pc, #32]	; (8005420 <UART_SetConfig+0x4e4>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 020f 	and.w	r2, r3, #15
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4422      	add	r2, r4
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	bf00      	nop
 8005416:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800541a:	46bd      	mov	sp, r7
 800541c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005420:	51eb851f 	.word	0x51eb851f

08005424 <__cvt>:
 8005424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005428:	ec55 4b10 	vmov	r4, r5, d0
 800542c:	2d00      	cmp	r5, #0
 800542e:	460e      	mov	r6, r1
 8005430:	4619      	mov	r1, r3
 8005432:	462b      	mov	r3, r5
 8005434:	bfbb      	ittet	lt
 8005436:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800543a:	461d      	movlt	r5, r3
 800543c:	2300      	movge	r3, #0
 800543e:	232d      	movlt	r3, #45	; 0x2d
 8005440:	700b      	strb	r3, [r1, #0]
 8005442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005444:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005448:	4691      	mov	r9, r2
 800544a:	f023 0820 	bic.w	r8, r3, #32
 800544e:	bfbc      	itt	lt
 8005450:	4622      	movlt	r2, r4
 8005452:	4614      	movlt	r4, r2
 8005454:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005458:	d005      	beq.n	8005466 <__cvt+0x42>
 800545a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800545e:	d100      	bne.n	8005462 <__cvt+0x3e>
 8005460:	3601      	adds	r6, #1
 8005462:	2102      	movs	r1, #2
 8005464:	e000      	b.n	8005468 <__cvt+0x44>
 8005466:	2103      	movs	r1, #3
 8005468:	ab03      	add	r3, sp, #12
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	ab02      	add	r3, sp, #8
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	ec45 4b10 	vmov	d0, r4, r5
 8005474:	4653      	mov	r3, sl
 8005476:	4632      	mov	r2, r6
 8005478:	f001 ff5a 	bl	8007330 <_dtoa_r>
 800547c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005480:	4607      	mov	r7, r0
 8005482:	d102      	bne.n	800548a <__cvt+0x66>
 8005484:	f019 0f01 	tst.w	r9, #1
 8005488:	d022      	beq.n	80054d0 <__cvt+0xac>
 800548a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800548e:	eb07 0906 	add.w	r9, r7, r6
 8005492:	d110      	bne.n	80054b6 <__cvt+0x92>
 8005494:	783b      	ldrb	r3, [r7, #0]
 8005496:	2b30      	cmp	r3, #48	; 0x30
 8005498:	d10a      	bne.n	80054b0 <__cvt+0x8c>
 800549a:	2200      	movs	r2, #0
 800549c:	2300      	movs	r3, #0
 800549e:	4620      	mov	r0, r4
 80054a0:	4629      	mov	r1, r5
 80054a2:	f7fb fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 80054a6:	b918      	cbnz	r0, 80054b0 <__cvt+0x8c>
 80054a8:	f1c6 0601 	rsb	r6, r6, #1
 80054ac:	f8ca 6000 	str.w	r6, [sl]
 80054b0:	f8da 3000 	ldr.w	r3, [sl]
 80054b4:	4499      	add	r9, r3
 80054b6:	2200      	movs	r2, #0
 80054b8:	2300      	movs	r3, #0
 80054ba:	4620      	mov	r0, r4
 80054bc:	4629      	mov	r1, r5
 80054be:	f7fb fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 80054c2:	b108      	cbz	r0, 80054c8 <__cvt+0xa4>
 80054c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80054c8:	2230      	movs	r2, #48	; 0x30
 80054ca:	9b03      	ldr	r3, [sp, #12]
 80054cc:	454b      	cmp	r3, r9
 80054ce:	d307      	bcc.n	80054e0 <__cvt+0xbc>
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054d4:	1bdb      	subs	r3, r3, r7
 80054d6:	4638      	mov	r0, r7
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	b004      	add	sp, #16
 80054dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e0:	1c59      	adds	r1, r3, #1
 80054e2:	9103      	str	r1, [sp, #12]
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	e7f0      	b.n	80054ca <__cvt+0xa6>

080054e8 <__exponent>:
 80054e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ea:	4603      	mov	r3, r0
 80054ec:	2900      	cmp	r1, #0
 80054ee:	bfb8      	it	lt
 80054f0:	4249      	neglt	r1, r1
 80054f2:	f803 2b02 	strb.w	r2, [r3], #2
 80054f6:	bfb4      	ite	lt
 80054f8:	222d      	movlt	r2, #45	; 0x2d
 80054fa:	222b      	movge	r2, #43	; 0x2b
 80054fc:	2909      	cmp	r1, #9
 80054fe:	7042      	strb	r2, [r0, #1]
 8005500:	dd2a      	ble.n	8005558 <__exponent+0x70>
 8005502:	f10d 0207 	add.w	r2, sp, #7
 8005506:	4617      	mov	r7, r2
 8005508:	260a      	movs	r6, #10
 800550a:	4694      	mov	ip, r2
 800550c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005510:	fb06 1415 	mls	r4, r6, r5, r1
 8005514:	3430      	adds	r4, #48	; 0x30
 8005516:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800551a:	460c      	mov	r4, r1
 800551c:	2c63      	cmp	r4, #99	; 0x63
 800551e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005522:	4629      	mov	r1, r5
 8005524:	dcf1      	bgt.n	800550a <__exponent+0x22>
 8005526:	3130      	adds	r1, #48	; 0x30
 8005528:	f1ac 0402 	sub.w	r4, ip, #2
 800552c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005530:	1c41      	adds	r1, r0, #1
 8005532:	4622      	mov	r2, r4
 8005534:	42ba      	cmp	r2, r7
 8005536:	d30a      	bcc.n	800554e <__exponent+0x66>
 8005538:	f10d 0209 	add.w	r2, sp, #9
 800553c:	eba2 020c 	sub.w	r2, r2, ip
 8005540:	42bc      	cmp	r4, r7
 8005542:	bf88      	it	hi
 8005544:	2200      	movhi	r2, #0
 8005546:	4413      	add	r3, r2
 8005548:	1a18      	subs	r0, r3, r0
 800554a:	b003      	add	sp, #12
 800554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800554e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005552:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005556:	e7ed      	b.n	8005534 <__exponent+0x4c>
 8005558:	2330      	movs	r3, #48	; 0x30
 800555a:	3130      	adds	r1, #48	; 0x30
 800555c:	7083      	strb	r3, [r0, #2]
 800555e:	70c1      	strb	r1, [r0, #3]
 8005560:	1d03      	adds	r3, r0, #4
 8005562:	e7f1      	b.n	8005548 <__exponent+0x60>

08005564 <_printf_float>:
 8005564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	ed2d 8b02 	vpush	{d8}
 800556c:	b08d      	sub	sp, #52	; 0x34
 800556e:	460c      	mov	r4, r1
 8005570:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005574:	4616      	mov	r6, r2
 8005576:	461f      	mov	r7, r3
 8005578:	4605      	mov	r5, r0
 800557a:	f001 fdbb 	bl	80070f4 <_localeconv_r>
 800557e:	f8d0 a000 	ldr.w	sl, [r0]
 8005582:	4650      	mov	r0, sl
 8005584:	f7fa fe74 	bl	8000270 <strlen>
 8005588:	2300      	movs	r3, #0
 800558a:	930a      	str	r3, [sp, #40]	; 0x28
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	9305      	str	r3, [sp, #20]
 8005590:	f8d8 3000 	ldr.w	r3, [r8]
 8005594:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005598:	3307      	adds	r3, #7
 800559a:	f023 0307 	bic.w	r3, r3, #7
 800559e:	f103 0208 	add.w	r2, r3, #8
 80055a2:	f8c8 2000 	str.w	r2, [r8]
 80055a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055ae:	9307      	str	r3, [sp, #28]
 80055b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80055b4:	ee08 0a10 	vmov	s16, r0
 80055b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80055bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055c0:	4b9e      	ldr	r3, [pc, #632]	; (800583c <_printf_float+0x2d8>)
 80055c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055c6:	f7fb fab1 	bl	8000b2c <__aeabi_dcmpun>
 80055ca:	bb88      	cbnz	r0, 8005630 <_printf_float+0xcc>
 80055cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055d0:	4b9a      	ldr	r3, [pc, #616]	; (800583c <_printf_float+0x2d8>)
 80055d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055d6:	f7fb fa8b 	bl	8000af0 <__aeabi_dcmple>
 80055da:	bb48      	cbnz	r0, 8005630 <_printf_float+0xcc>
 80055dc:	2200      	movs	r2, #0
 80055de:	2300      	movs	r3, #0
 80055e0:	4640      	mov	r0, r8
 80055e2:	4649      	mov	r1, r9
 80055e4:	f7fb fa7a 	bl	8000adc <__aeabi_dcmplt>
 80055e8:	b110      	cbz	r0, 80055f0 <_printf_float+0x8c>
 80055ea:	232d      	movs	r3, #45	; 0x2d
 80055ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f0:	4a93      	ldr	r2, [pc, #588]	; (8005840 <_printf_float+0x2dc>)
 80055f2:	4b94      	ldr	r3, [pc, #592]	; (8005844 <_printf_float+0x2e0>)
 80055f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055f8:	bf94      	ite	ls
 80055fa:	4690      	movls	r8, r2
 80055fc:	4698      	movhi	r8, r3
 80055fe:	2303      	movs	r3, #3
 8005600:	6123      	str	r3, [r4, #16]
 8005602:	9b05      	ldr	r3, [sp, #20]
 8005604:	f023 0304 	bic.w	r3, r3, #4
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	f04f 0900 	mov.w	r9, #0
 800560e:	9700      	str	r7, [sp, #0]
 8005610:	4633      	mov	r3, r6
 8005612:	aa0b      	add	r2, sp, #44	; 0x2c
 8005614:	4621      	mov	r1, r4
 8005616:	4628      	mov	r0, r5
 8005618:	f000 f9da 	bl	80059d0 <_printf_common>
 800561c:	3001      	adds	r0, #1
 800561e:	f040 8090 	bne.w	8005742 <_printf_float+0x1de>
 8005622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005626:	b00d      	add	sp, #52	; 0x34
 8005628:	ecbd 8b02 	vpop	{d8}
 800562c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005630:	4642      	mov	r2, r8
 8005632:	464b      	mov	r3, r9
 8005634:	4640      	mov	r0, r8
 8005636:	4649      	mov	r1, r9
 8005638:	f7fb fa78 	bl	8000b2c <__aeabi_dcmpun>
 800563c:	b140      	cbz	r0, 8005650 <_printf_float+0xec>
 800563e:	464b      	mov	r3, r9
 8005640:	2b00      	cmp	r3, #0
 8005642:	bfbc      	itt	lt
 8005644:	232d      	movlt	r3, #45	; 0x2d
 8005646:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800564a:	4a7f      	ldr	r2, [pc, #508]	; (8005848 <_printf_float+0x2e4>)
 800564c:	4b7f      	ldr	r3, [pc, #508]	; (800584c <_printf_float+0x2e8>)
 800564e:	e7d1      	b.n	80055f4 <_printf_float+0x90>
 8005650:	6863      	ldr	r3, [r4, #4]
 8005652:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005656:	9206      	str	r2, [sp, #24]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	d13f      	bne.n	80056dc <_printf_float+0x178>
 800565c:	2306      	movs	r3, #6
 800565e:	6063      	str	r3, [r4, #4]
 8005660:	9b05      	ldr	r3, [sp, #20]
 8005662:	6861      	ldr	r1, [r4, #4]
 8005664:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005668:	2300      	movs	r3, #0
 800566a:	9303      	str	r3, [sp, #12]
 800566c:	ab0a      	add	r3, sp, #40	; 0x28
 800566e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005672:	ab09      	add	r3, sp, #36	; 0x24
 8005674:	ec49 8b10 	vmov	d0, r8, r9
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6022      	str	r2, [r4, #0]
 800567c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005680:	4628      	mov	r0, r5
 8005682:	f7ff fecf 	bl	8005424 <__cvt>
 8005686:	9b06      	ldr	r3, [sp, #24]
 8005688:	9909      	ldr	r1, [sp, #36]	; 0x24
 800568a:	2b47      	cmp	r3, #71	; 0x47
 800568c:	4680      	mov	r8, r0
 800568e:	d108      	bne.n	80056a2 <_printf_float+0x13e>
 8005690:	1cc8      	adds	r0, r1, #3
 8005692:	db02      	blt.n	800569a <_printf_float+0x136>
 8005694:	6863      	ldr	r3, [r4, #4]
 8005696:	4299      	cmp	r1, r3
 8005698:	dd41      	ble.n	800571e <_printf_float+0x1ba>
 800569a:	f1ab 0302 	sub.w	r3, fp, #2
 800569e:	fa5f fb83 	uxtb.w	fp, r3
 80056a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056a6:	d820      	bhi.n	80056ea <_printf_float+0x186>
 80056a8:	3901      	subs	r1, #1
 80056aa:	465a      	mov	r2, fp
 80056ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056b0:	9109      	str	r1, [sp, #36]	; 0x24
 80056b2:	f7ff ff19 	bl	80054e8 <__exponent>
 80056b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056b8:	1813      	adds	r3, r2, r0
 80056ba:	2a01      	cmp	r2, #1
 80056bc:	4681      	mov	r9, r0
 80056be:	6123      	str	r3, [r4, #16]
 80056c0:	dc02      	bgt.n	80056c8 <_printf_float+0x164>
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	07d2      	lsls	r2, r2, #31
 80056c6:	d501      	bpl.n	80056cc <_printf_float+0x168>
 80056c8:	3301      	adds	r3, #1
 80056ca:	6123      	str	r3, [r4, #16]
 80056cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d09c      	beq.n	800560e <_printf_float+0xaa>
 80056d4:	232d      	movs	r3, #45	; 0x2d
 80056d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056da:	e798      	b.n	800560e <_printf_float+0xaa>
 80056dc:	9a06      	ldr	r2, [sp, #24]
 80056de:	2a47      	cmp	r2, #71	; 0x47
 80056e0:	d1be      	bne.n	8005660 <_printf_float+0xfc>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1bc      	bne.n	8005660 <_printf_float+0xfc>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e7b9      	b.n	800565e <_printf_float+0xfa>
 80056ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056ee:	d118      	bne.n	8005722 <_printf_float+0x1be>
 80056f0:	2900      	cmp	r1, #0
 80056f2:	6863      	ldr	r3, [r4, #4]
 80056f4:	dd0b      	ble.n	800570e <_printf_float+0x1aa>
 80056f6:	6121      	str	r1, [r4, #16]
 80056f8:	b913      	cbnz	r3, 8005700 <_printf_float+0x19c>
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	07d0      	lsls	r0, r2, #31
 80056fe:	d502      	bpl.n	8005706 <_printf_float+0x1a2>
 8005700:	3301      	adds	r3, #1
 8005702:	440b      	add	r3, r1
 8005704:	6123      	str	r3, [r4, #16]
 8005706:	65a1      	str	r1, [r4, #88]	; 0x58
 8005708:	f04f 0900 	mov.w	r9, #0
 800570c:	e7de      	b.n	80056cc <_printf_float+0x168>
 800570e:	b913      	cbnz	r3, 8005716 <_printf_float+0x1b2>
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	07d2      	lsls	r2, r2, #31
 8005714:	d501      	bpl.n	800571a <_printf_float+0x1b6>
 8005716:	3302      	adds	r3, #2
 8005718:	e7f4      	b.n	8005704 <_printf_float+0x1a0>
 800571a:	2301      	movs	r3, #1
 800571c:	e7f2      	b.n	8005704 <_printf_float+0x1a0>
 800571e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005724:	4299      	cmp	r1, r3
 8005726:	db05      	blt.n	8005734 <_printf_float+0x1d0>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	6121      	str	r1, [r4, #16]
 800572c:	07d8      	lsls	r0, r3, #31
 800572e:	d5ea      	bpl.n	8005706 <_printf_float+0x1a2>
 8005730:	1c4b      	adds	r3, r1, #1
 8005732:	e7e7      	b.n	8005704 <_printf_float+0x1a0>
 8005734:	2900      	cmp	r1, #0
 8005736:	bfd4      	ite	le
 8005738:	f1c1 0202 	rsble	r2, r1, #2
 800573c:	2201      	movgt	r2, #1
 800573e:	4413      	add	r3, r2
 8005740:	e7e0      	b.n	8005704 <_printf_float+0x1a0>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	055a      	lsls	r2, r3, #21
 8005746:	d407      	bmi.n	8005758 <_printf_float+0x1f4>
 8005748:	6923      	ldr	r3, [r4, #16]
 800574a:	4642      	mov	r2, r8
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	d12c      	bne.n	80057b0 <_printf_float+0x24c>
 8005756:	e764      	b.n	8005622 <_printf_float+0xbe>
 8005758:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800575c:	f240 80e0 	bls.w	8005920 <_printf_float+0x3bc>
 8005760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005764:	2200      	movs	r2, #0
 8005766:	2300      	movs	r3, #0
 8005768:	f7fb f9ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800576c:	2800      	cmp	r0, #0
 800576e:	d034      	beq.n	80057da <_printf_float+0x276>
 8005770:	4a37      	ldr	r2, [pc, #220]	; (8005850 <_printf_float+0x2ec>)
 8005772:	2301      	movs	r3, #1
 8005774:	4631      	mov	r1, r6
 8005776:	4628      	mov	r0, r5
 8005778:	47b8      	blx	r7
 800577a:	3001      	adds	r0, #1
 800577c:	f43f af51 	beq.w	8005622 <_printf_float+0xbe>
 8005780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005784:	429a      	cmp	r2, r3
 8005786:	db02      	blt.n	800578e <_printf_float+0x22a>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	07d8      	lsls	r0, r3, #31
 800578c:	d510      	bpl.n	80057b0 <_printf_float+0x24c>
 800578e:	ee18 3a10 	vmov	r3, s16
 8005792:	4652      	mov	r2, sl
 8005794:	4631      	mov	r1, r6
 8005796:	4628      	mov	r0, r5
 8005798:	47b8      	blx	r7
 800579a:	3001      	adds	r0, #1
 800579c:	f43f af41 	beq.w	8005622 <_printf_float+0xbe>
 80057a0:	f04f 0800 	mov.w	r8, #0
 80057a4:	f104 091a 	add.w	r9, r4, #26
 80057a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057aa:	3b01      	subs	r3, #1
 80057ac:	4543      	cmp	r3, r8
 80057ae:	dc09      	bgt.n	80057c4 <_printf_float+0x260>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	079b      	lsls	r3, r3, #30
 80057b4:	f100 8107 	bmi.w	80059c6 <_printf_float+0x462>
 80057b8:	68e0      	ldr	r0, [r4, #12]
 80057ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057bc:	4298      	cmp	r0, r3
 80057be:	bfb8      	it	lt
 80057c0:	4618      	movlt	r0, r3
 80057c2:	e730      	b.n	8005626 <_printf_float+0xc2>
 80057c4:	2301      	movs	r3, #1
 80057c6:	464a      	mov	r2, r9
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f af27 	beq.w	8005622 <_printf_float+0xbe>
 80057d4:	f108 0801 	add.w	r8, r8, #1
 80057d8:	e7e6      	b.n	80057a8 <_printf_float+0x244>
 80057da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dc39      	bgt.n	8005854 <_printf_float+0x2f0>
 80057e0:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <_printf_float+0x2ec>)
 80057e2:	2301      	movs	r3, #1
 80057e4:	4631      	mov	r1, r6
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	f43f af19 	beq.w	8005622 <_printf_float+0xbe>
 80057f0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80057f4:	4313      	orrs	r3, r2
 80057f6:	d102      	bne.n	80057fe <_printf_float+0x29a>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	07d9      	lsls	r1, r3, #31
 80057fc:	d5d8      	bpl.n	80057b0 <_printf_float+0x24c>
 80057fe:	ee18 3a10 	vmov	r3, s16
 8005802:	4652      	mov	r2, sl
 8005804:	4631      	mov	r1, r6
 8005806:	4628      	mov	r0, r5
 8005808:	47b8      	blx	r7
 800580a:	3001      	adds	r0, #1
 800580c:	f43f af09 	beq.w	8005622 <_printf_float+0xbe>
 8005810:	f04f 0900 	mov.w	r9, #0
 8005814:	f104 0a1a 	add.w	sl, r4, #26
 8005818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581a:	425b      	negs	r3, r3
 800581c:	454b      	cmp	r3, r9
 800581e:	dc01      	bgt.n	8005824 <_printf_float+0x2c0>
 8005820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005822:	e792      	b.n	800574a <_printf_float+0x1e6>
 8005824:	2301      	movs	r3, #1
 8005826:	4652      	mov	r2, sl
 8005828:	4631      	mov	r1, r6
 800582a:	4628      	mov	r0, r5
 800582c:	47b8      	blx	r7
 800582e:	3001      	adds	r0, #1
 8005830:	f43f aef7 	beq.w	8005622 <_printf_float+0xbe>
 8005834:	f109 0901 	add.w	r9, r9, #1
 8005838:	e7ee      	b.n	8005818 <_printf_float+0x2b4>
 800583a:	bf00      	nop
 800583c:	7fefffff 	.word	0x7fefffff
 8005840:	0800a530 	.word	0x0800a530
 8005844:	0800a534 	.word	0x0800a534
 8005848:	0800a538 	.word	0x0800a538
 800584c:	0800a53c 	.word	0x0800a53c
 8005850:	0800a7dd 	.word	0x0800a7dd
 8005854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005858:	429a      	cmp	r2, r3
 800585a:	bfa8      	it	ge
 800585c:	461a      	movge	r2, r3
 800585e:	2a00      	cmp	r2, #0
 8005860:	4691      	mov	r9, r2
 8005862:	dc37      	bgt.n	80058d4 <_printf_float+0x370>
 8005864:	f04f 0b00 	mov.w	fp, #0
 8005868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800586c:	f104 021a 	add.w	r2, r4, #26
 8005870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005872:	9305      	str	r3, [sp, #20]
 8005874:	eba3 0309 	sub.w	r3, r3, r9
 8005878:	455b      	cmp	r3, fp
 800587a:	dc33      	bgt.n	80058e4 <_printf_float+0x380>
 800587c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005880:	429a      	cmp	r2, r3
 8005882:	db3b      	blt.n	80058fc <_printf_float+0x398>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	07da      	lsls	r2, r3, #31
 8005888:	d438      	bmi.n	80058fc <_printf_float+0x398>
 800588a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800588e:	eba2 0903 	sub.w	r9, r2, r3
 8005892:	9b05      	ldr	r3, [sp, #20]
 8005894:	1ad2      	subs	r2, r2, r3
 8005896:	4591      	cmp	r9, r2
 8005898:	bfa8      	it	ge
 800589a:	4691      	movge	r9, r2
 800589c:	f1b9 0f00 	cmp.w	r9, #0
 80058a0:	dc35      	bgt.n	800590e <_printf_float+0x3aa>
 80058a2:	f04f 0800 	mov.w	r8, #0
 80058a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058aa:	f104 0a1a 	add.w	sl, r4, #26
 80058ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	eba3 0309 	sub.w	r3, r3, r9
 80058b8:	4543      	cmp	r3, r8
 80058ba:	f77f af79 	ble.w	80057b0 <_printf_float+0x24c>
 80058be:	2301      	movs	r3, #1
 80058c0:	4652      	mov	r2, sl
 80058c2:	4631      	mov	r1, r6
 80058c4:	4628      	mov	r0, r5
 80058c6:	47b8      	blx	r7
 80058c8:	3001      	adds	r0, #1
 80058ca:	f43f aeaa 	beq.w	8005622 <_printf_float+0xbe>
 80058ce:	f108 0801 	add.w	r8, r8, #1
 80058d2:	e7ec      	b.n	80058ae <_printf_float+0x34a>
 80058d4:	4613      	mov	r3, r2
 80058d6:	4631      	mov	r1, r6
 80058d8:	4642      	mov	r2, r8
 80058da:	4628      	mov	r0, r5
 80058dc:	47b8      	blx	r7
 80058de:	3001      	adds	r0, #1
 80058e0:	d1c0      	bne.n	8005864 <_printf_float+0x300>
 80058e2:	e69e      	b.n	8005622 <_printf_float+0xbe>
 80058e4:	2301      	movs	r3, #1
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	9205      	str	r2, [sp, #20]
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	f43f ae97 	beq.w	8005622 <_printf_float+0xbe>
 80058f4:	9a05      	ldr	r2, [sp, #20]
 80058f6:	f10b 0b01 	add.w	fp, fp, #1
 80058fa:	e7b9      	b.n	8005870 <_printf_float+0x30c>
 80058fc:	ee18 3a10 	vmov	r3, s16
 8005900:	4652      	mov	r2, sl
 8005902:	4631      	mov	r1, r6
 8005904:	4628      	mov	r0, r5
 8005906:	47b8      	blx	r7
 8005908:	3001      	adds	r0, #1
 800590a:	d1be      	bne.n	800588a <_printf_float+0x326>
 800590c:	e689      	b.n	8005622 <_printf_float+0xbe>
 800590e:	9a05      	ldr	r2, [sp, #20]
 8005910:	464b      	mov	r3, r9
 8005912:	4442      	add	r2, r8
 8005914:	4631      	mov	r1, r6
 8005916:	4628      	mov	r0, r5
 8005918:	47b8      	blx	r7
 800591a:	3001      	adds	r0, #1
 800591c:	d1c1      	bne.n	80058a2 <_printf_float+0x33e>
 800591e:	e680      	b.n	8005622 <_printf_float+0xbe>
 8005920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005922:	2a01      	cmp	r2, #1
 8005924:	dc01      	bgt.n	800592a <_printf_float+0x3c6>
 8005926:	07db      	lsls	r3, r3, #31
 8005928:	d53a      	bpl.n	80059a0 <_printf_float+0x43c>
 800592a:	2301      	movs	r3, #1
 800592c:	4642      	mov	r2, r8
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	f43f ae74 	beq.w	8005622 <_printf_float+0xbe>
 800593a:	ee18 3a10 	vmov	r3, s16
 800593e:	4652      	mov	r2, sl
 8005940:	4631      	mov	r1, r6
 8005942:	4628      	mov	r0, r5
 8005944:	47b8      	blx	r7
 8005946:	3001      	adds	r0, #1
 8005948:	f43f ae6b 	beq.w	8005622 <_printf_float+0xbe>
 800594c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005950:	2200      	movs	r2, #0
 8005952:	2300      	movs	r3, #0
 8005954:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005958:	f7fb f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800595c:	b9d8      	cbnz	r0, 8005996 <_printf_float+0x432>
 800595e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005962:	f108 0201 	add.w	r2, r8, #1
 8005966:	4631      	mov	r1, r6
 8005968:	4628      	mov	r0, r5
 800596a:	47b8      	blx	r7
 800596c:	3001      	adds	r0, #1
 800596e:	d10e      	bne.n	800598e <_printf_float+0x42a>
 8005970:	e657      	b.n	8005622 <_printf_float+0xbe>
 8005972:	2301      	movs	r3, #1
 8005974:	4652      	mov	r2, sl
 8005976:	4631      	mov	r1, r6
 8005978:	4628      	mov	r0, r5
 800597a:	47b8      	blx	r7
 800597c:	3001      	adds	r0, #1
 800597e:	f43f ae50 	beq.w	8005622 <_printf_float+0xbe>
 8005982:	f108 0801 	add.w	r8, r8, #1
 8005986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005988:	3b01      	subs	r3, #1
 800598a:	4543      	cmp	r3, r8
 800598c:	dcf1      	bgt.n	8005972 <_printf_float+0x40e>
 800598e:	464b      	mov	r3, r9
 8005990:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005994:	e6da      	b.n	800574c <_printf_float+0x1e8>
 8005996:	f04f 0800 	mov.w	r8, #0
 800599a:	f104 0a1a 	add.w	sl, r4, #26
 800599e:	e7f2      	b.n	8005986 <_printf_float+0x422>
 80059a0:	2301      	movs	r3, #1
 80059a2:	4642      	mov	r2, r8
 80059a4:	e7df      	b.n	8005966 <_printf_float+0x402>
 80059a6:	2301      	movs	r3, #1
 80059a8:	464a      	mov	r2, r9
 80059aa:	4631      	mov	r1, r6
 80059ac:	4628      	mov	r0, r5
 80059ae:	47b8      	blx	r7
 80059b0:	3001      	adds	r0, #1
 80059b2:	f43f ae36 	beq.w	8005622 <_printf_float+0xbe>
 80059b6:	f108 0801 	add.w	r8, r8, #1
 80059ba:	68e3      	ldr	r3, [r4, #12]
 80059bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059be:	1a5b      	subs	r3, r3, r1
 80059c0:	4543      	cmp	r3, r8
 80059c2:	dcf0      	bgt.n	80059a6 <_printf_float+0x442>
 80059c4:	e6f8      	b.n	80057b8 <_printf_float+0x254>
 80059c6:	f04f 0800 	mov.w	r8, #0
 80059ca:	f104 0919 	add.w	r9, r4, #25
 80059ce:	e7f4      	b.n	80059ba <_printf_float+0x456>

080059d0 <_printf_common>:
 80059d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d4:	4616      	mov	r6, r2
 80059d6:	4699      	mov	r9, r3
 80059d8:	688a      	ldr	r2, [r1, #8]
 80059da:	690b      	ldr	r3, [r1, #16]
 80059dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	bfb8      	it	lt
 80059e4:	4613      	movlt	r3, r2
 80059e6:	6033      	str	r3, [r6, #0]
 80059e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059ec:	4607      	mov	r7, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	b10a      	cbz	r2, 80059f6 <_printf_common+0x26>
 80059f2:	3301      	adds	r3, #1
 80059f4:	6033      	str	r3, [r6, #0]
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	0699      	lsls	r1, r3, #26
 80059fa:	bf42      	ittt	mi
 80059fc:	6833      	ldrmi	r3, [r6, #0]
 80059fe:	3302      	addmi	r3, #2
 8005a00:	6033      	strmi	r3, [r6, #0]
 8005a02:	6825      	ldr	r5, [r4, #0]
 8005a04:	f015 0506 	ands.w	r5, r5, #6
 8005a08:	d106      	bne.n	8005a18 <_printf_common+0x48>
 8005a0a:	f104 0a19 	add.w	sl, r4, #25
 8005a0e:	68e3      	ldr	r3, [r4, #12]
 8005a10:	6832      	ldr	r2, [r6, #0]
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	42ab      	cmp	r3, r5
 8005a16:	dc26      	bgt.n	8005a66 <_printf_common+0x96>
 8005a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a1c:	1e13      	subs	r3, r2, #0
 8005a1e:	6822      	ldr	r2, [r4, #0]
 8005a20:	bf18      	it	ne
 8005a22:	2301      	movne	r3, #1
 8005a24:	0692      	lsls	r2, r2, #26
 8005a26:	d42b      	bmi.n	8005a80 <_printf_common+0xb0>
 8005a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	4638      	mov	r0, r7
 8005a30:	47c0      	blx	r8
 8005a32:	3001      	adds	r0, #1
 8005a34:	d01e      	beq.n	8005a74 <_printf_common+0xa4>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	6922      	ldr	r2, [r4, #16]
 8005a3a:	f003 0306 	and.w	r3, r3, #6
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	bf02      	ittt	eq
 8005a42:	68e5      	ldreq	r5, [r4, #12]
 8005a44:	6833      	ldreq	r3, [r6, #0]
 8005a46:	1aed      	subeq	r5, r5, r3
 8005a48:	68a3      	ldr	r3, [r4, #8]
 8005a4a:	bf0c      	ite	eq
 8005a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a50:	2500      	movne	r5, #0
 8005a52:	4293      	cmp	r3, r2
 8005a54:	bfc4      	itt	gt
 8005a56:	1a9b      	subgt	r3, r3, r2
 8005a58:	18ed      	addgt	r5, r5, r3
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	341a      	adds	r4, #26
 8005a5e:	42b5      	cmp	r5, r6
 8005a60:	d11a      	bne.n	8005a98 <_printf_common+0xc8>
 8005a62:	2000      	movs	r0, #0
 8005a64:	e008      	b.n	8005a78 <_printf_common+0xa8>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4652      	mov	r2, sl
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	47c0      	blx	r8
 8005a70:	3001      	adds	r0, #1
 8005a72:	d103      	bne.n	8005a7c <_printf_common+0xac>
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7c:	3501      	adds	r5, #1
 8005a7e:	e7c6      	b.n	8005a0e <_printf_common+0x3e>
 8005a80:	18e1      	adds	r1, r4, r3
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	2030      	movs	r0, #48	; 0x30
 8005a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a8a:	4422      	add	r2, r4
 8005a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a94:	3302      	adds	r3, #2
 8005a96:	e7c7      	b.n	8005a28 <_printf_common+0x58>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	4622      	mov	r2, r4
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	47c0      	blx	r8
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d0e6      	beq.n	8005a74 <_printf_common+0xa4>
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7d9      	b.n	8005a5e <_printf_common+0x8e>
	...

08005aac <_printf_i>:
 8005aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab0:	7e0f      	ldrb	r7, [r1, #24]
 8005ab2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ab4:	2f78      	cmp	r7, #120	; 0x78
 8005ab6:	4691      	mov	r9, r2
 8005ab8:	4680      	mov	r8, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	469a      	mov	sl, r3
 8005abe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ac2:	d807      	bhi.n	8005ad4 <_printf_i+0x28>
 8005ac4:	2f62      	cmp	r7, #98	; 0x62
 8005ac6:	d80a      	bhi.n	8005ade <_printf_i+0x32>
 8005ac8:	2f00      	cmp	r7, #0
 8005aca:	f000 80d4 	beq.w	8005c76 <_printf_i+0x1ca>
 8005ace:	2f58      	cmp	r7, #88	; 0x58
 8005ad0:	f000 80c0 	beq.w	8005c54 <_printf_i+0x1a8>
 8005ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005adc:	e03a      	b.n	8005b54 <_printf_i+0xa8>
 8005ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ae2:	2b15      	cmp	r3, #21
 8005ae4:	d8f6      	bhi.n	8005ad4 <_printf_i+0x28>
 8005ae6:	a101      	add	r1, pc, #4	; (adr r1, 8005aec <_printf_i+0x40>)
 8005ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005aec:	08005b45 	.word	0x08005b45
 8005af0:	08005b59 	.word	0x08005b59
 8005af4:	08005ad5 	.word	0x08005ad5
 8005af8:	08005ad5 	.word	0x08005ad5
 8005afc:	08005ad5 	.word	0x08005ad5
 8005b00:	08005ad5 	.word	0x08005ad5
 8005b04:	08005b59 	.word	0x08005b59
 8005b08:	08005ad5 	.word	0x08005ad5
 8005b0c:	08005ad5 	.word	0x08005ad5
 8005b10:	08005ad5 	.word	0x08005ad5
 8005b14:	08005ad5 	.word	0x08005ad5
 8005b18:	08005c5d 	.word	0x08005c5d
 8005b1c:	08005b85 	.word	0x08005b85
 8005b20:	08005c17 	.word	0x08005c17
 8005b24:	08005ad5 	.word	0x08005ad5
 8005b28:	08005ad5 	.word	0x08005ad5
 8005b2c:	08005c7f 	.word	0x08005c7f
 8005b30:	08005ad5 	.word	0x08005ad5
 8005b34:	08005b85 	.word	0x08005b85
 8005b38:	08005ad5 	.word	0x08005ad5
 8005b3c:	08005ad5 	.word	0x08005ad5
 8005b40:	08005c1f 	.word	0x08005c1f
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	1d1a      	adds	r2, r3, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	602a      	str	r2, [r5, #0]
 8005b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b54:	2301      	movs	r3, #1
 8005b56:	e09f      	b.n	8005c98 <_printf_i+0x1ec>
 8005b58:	6820      	ldr	r0, [r4, #0]
 8005b5a:	682b      	ldr	r3, [r5, #0]
 8005b5c:	0607      	lsls	r7, r0, #24
 8005b5e:	f103 0104 	add.w	r1, r3, #4
 8005b62:	6029      	str	r1, [r5, #0]
 8005b64:	d501      	bpl.n	8005b6a <_printf_i+0xbe>
 8005b66:	681e      	ldr	r6, [r3, #0]
 8005b68:	e003      	b.n	8005b72 <_printf_i+0xc6>
 8005b6a:	0646      	lsls	r6, r0, #25
 8005b6c:	d5fb      	bpl.n	8005b66 <_printf_i+0xba>
 8005b6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b72:	2e00      	cmp	r6, #0
 8005b74:	da03      	bge.n	8005b7e <_printf_i+0xd2>
 8005b76:	232d      	movs	r3, #45	; 0x2d
 8005b78:	4276      	negs	r6, r6
 8005b7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b7e:	485a      	ldr	r0, [pc, #360]	; (8005ce8 <_printf_i+0x23c>)
 8005b80:	230a      	movs	r3, #10
 8005b82:	e012      	b.n	8005baa <_printf_i+0xfe>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	6820      	ldr	r0, [r4, #0]
 8005b88:	1d19      	adds	r1, r3, #4
 8005b8a:	6029      	str	r1, [r5, #0]
 8005b8c:	0605      	lsls	r5, r0, #24
 8005b8e:	d501      	bpl.n	8005b94 <_printf_i+0xe8>
 8005b90:	681e      	ldr	r6, [r3, #0]
 8005b92:	e002      	b.n	8005b9a <_printf_i+0xee>
 8005b94:	0641      	lsls	r1, r0, #25
 8005b96:	d5fb      	bpl.n	8005b90 <_printf_i+0xe4>
 8005b98:	881e      	ldrh	r6, [r3, #0]
 8005b9a:	4853      	ldr	r0, [pc, #332]	; (8005ce8 <_printf_i+0x23c>)
 8005b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2308      	moveq	r3, #8
 8005ba2:	230a      	movne	r3, #10
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005baa:	6865      	ldr	r5, [r4, #4]
 8005bac:	60a5      	str	r5, [r4, #8]
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	bfa2      	ittt	ge
 8005bb2:	6821      	ldrge	r1, [r4, #0]
 8005bb4:	f021 0104 	bicge.w	r1, r1, #4
 8005bb8:	6021      	strge	r1, [r4, #0]
 8005bba:	b90e      	cbnz	r6, 8005bc0 <_printf_i+0x114>
 8005bbc:	2d00      	cmp	r5, #0
 8005bbe:	d04b      	beq.n	8005c58 <_printf_i+0x1ac>
 8005bc0:	4615      	mov	r5, r2
 8005bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8005bca:	5dc7      	ldrb	r7, [r0, r7]
 8005bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bd0:	4637      	mov	r7, r6
 8005bd2:	42bb      	cmp	r3, r7
 8005bd4:	460e      	mov	r6, r1
 8005bd6:	d9f4      	bls.n	8005bc2 <_printf_i+0x116>
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d10b      	bne.n	8005bf4 <_printf_i+0x148>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	07de      	lsls	r6, r3, #31
 8005be0:	d508      	bpl.n	8005bf4 <_printf_i+0x148>
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	6861      	ldr	r1, [r4, #4]
 8005be6:	4299      	cmp	r1, r3
 8005be8:	bfde      	ittt	le
 8005bea:	2330      	movle	r3, #48	; 0x30
 8005bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bf0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005bf4:	1b52      	subs	r2, r2, r5
 8005bf6:	6122      	str	r2, [r4, #16]
 8005bf8:	f8cd a000 	str.w	sl, [sp]
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	aa03      	add	r2, sp, #12
 8005c00:	4621      	mov	r1, r4
 8005c02:	4640      	mov	r0, r8
 8005c04:	f7ff fee4 	bl	80059d0 <_printf_common>
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d14a      	bne.n	8005ca2 <_printf_i+0x1f6>
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c10:	b004      	add	sp, #16
 8005c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	f043 0320 	orr.w	r3, r3, #32
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	4833      	ldr	r0, [pc, #204]	; (8005cec <_printf_i+0x240>)
 8005c20:	2778      	movs	r7, #120	; 0x78
 8005c22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	6829      	ldr	r1, [r5, #0]
 8005c2a:	061f      	lsls	r7, r3, #24
 8005c2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c30:	d402      	bmi.n	8005c38 <_printf_i+0x18c>
 8005c32:	065f      	lsls	r7, r3, #25
 8005c34:	bf48      	it	mi
 8005c36:	b2b6      	uxthmi	r6, r6
 8005c38:	07df      	lsls	r7, r3, #31
 8005c3a:	bf48      	it	mi
 8005c3c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c40:	6029      	str	r1, [r5, #0]
 8005c42:	bf48      	it	mi
 8005c44:	6023      	strmi	r3, [r4, #0]
 8005c46:	b91e      	cbnz	r6, 8005c50 <_printf_i+0x1a4>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	f023 0320 	bic.w	r3, r3, #32
 8005c4e:	6023      	str	r3, [r4, #0]
 8005c50:	2310      	movs	r3, #16
 8005c52:	e7a7      	b.n	8005ba4 <_printf_i+0xf8>
 8005c54:	4824      	ldr	r0, [pc, #144]	; (8005ce8 <_printf_i+0x23c>)
 8005c56:	e7e4      	b.n	8005c22 <_printf_i+0x176>
 8005c58:	4615      	mov	r5, r2
 8005c5a:	e7bd      	b.n	8005bd8 <_printf_i+0x12c>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	6826      	ldr	r6, [r4, #0]
 8005c60:	6961      	ldr	r1, [r4, #20]
 8005c62:	1d18      	adds	r0, r3, #4
 8005c64:	6028      	str	r0, [r5, #0]
 8005c66:	0635      	lsls	r5, r6, #24
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	d501      	bpl.n	8005c70 <_printf_i+0x1c4>
 8005c6c:	6019      	str	r1, [r3, #0]
 8005c6e:	e002      	b.n	8005c76 <_printf_i+0x1ca>
 8005c70:	0670      	lsls	r0, r6, #25
 8005c72:	d5fb      	bpl.n	8005c6c <_printf_i+0x1c0>
 8005c74:	8019      	strh	r1, [r3, #0]
 8005c76:	2300      	movs	r3, #0
 8005c78:	6123      	str	r3, [r4, #16]
 8005c7a:	4615      	mov	r5, r2
 8005c7c:	e7bc      	b.n	8005bf8 <_printf_i+0x14c>
 8005c7e:	682b      	ldr	r3, [r5, #0]
 8005c80:	1d1a      	adds	r2, r3, #4
 8005c82:	602a      	str	r2, [r5, #0]
 8005c84:	681d      	ldr	r5, [r3, #0]
 8005c86:	6862      	ldr	r2, [r4, #4]
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f7fa faa0 	bl	80001d0 <memchr>
 8005c90:	b108      	cbz	r0, 8005c96 <_printf_i+0x1ea>
 8005c92:	1b40      	subs	r0, r0, r5
 8005c94:	6060      	str	r0, [r4, #4]
 8005c96:	6863      	ldr	r3, [r4, #4]
 8005c98:	6123      	str	r3, [r4, #16]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca0:	e7aa      	b.n	8005bf8 <_printf_i+0x14c>
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	462a      	mov	r2, r5
 8005ca6:	4649      	mov	r1, r9
 8005ca8:	4640      	mov	r0, r8
 8005caa:	47d0      	blx	sl
 8005cac:	3001      	adds	r0, #1
 8005cae:	d0ad      	beq.n	8005c0c <_printf_i+0x160>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	079b      	lsls	r3, r3, #30
 8005cb4:	d413      	bmi.n	8005cde <_printf_i+0x232>
 8005cb6:	68e0      	ldr	r0, [r4, #12]
 8005cb8:	9b03      	ldr	r3, [sp, #12]
 8005cba:	4298      	cmp	r0, r3
 8005cbc:	bfb8      	it	lt
 8005cbe:	4618      	movlt	r0, r3
 8005cc0:	e7a6      	b.n	8005c10 <_printf_i+0x164>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	4640      	mov	r0, r8
 8005cca:	47d0      	blx	sl
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d09d      	beq.n	8005c0c <_printf_i+0x160>
 8005cd0:	3501      	adds	r5, #1
 8005cd2:	68e3      	ldr	r3, [r4, #12]
 8005cd4:	9903      	ldr	r1, [sp, #12]
 8005cd6:	1a5b      	subs	r3, r3, r1
 8005cd8:	42ab      	cmp	r3, r5
 8005cda:	dcf2      	bgt.n	8005cc2 <_printf_i+0x216>
 8005cdc:	e7eb      	b.n	8005cb6 <_printf_i+0x20a>
 8005cde:	2500      	movs	r5, #0
 8005ce0:	f104 0619 	add.w	r6, r4, #25
 8005ce4:	e7f5      	b.n	8005cd2 <_printf_i+0x226>
 8005ce6:	bf00      	nop
 8005ce8:	0800a540 	.word	0x0800a540
 8005cec:	0800a551 	.word	0x0800a551

08005cf0 <_scanf_float>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	b087      	sub	sp, #28
 8005cf6:	4617      	mov	r7, r2
 8005cf8:	9303      	str	r3, [sp, #12]
 8005cfa:	688b      	ldr	r3, [r1, #8]
 8005cfc:	1e5a      	subs	r2, r3, #1
 8005cfe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005d02:	bf83      	ittte	hi
 8005d04:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005d08:	195b      	addhi	r3, r3, r5
 8005d0a:	9302      	strhi	r3, [sp, #8]
 8005d0c:	2300      	movls	r3, #0
 8005d0e:	bf86      	itte	hi
 8005d10:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005d14:	608b      	strhi	r3, [r1, #8]
 8005d16:	9302      	strls	r3, [sp, #8]
 8005d18:	680b      	ldr	r3, [r1, #0]
 8005d1a:	468b      	mov	fp, r1
 8005d1c:	2500      	movs	r5, #0
 8005d1e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005d22:	f84b 3b1c 	str.w	r3, [fp], #28
 8005d26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d2a:	4680      	mov	r8, r0
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	465e      	mov	r6, fp
 8005d30:	46aa      	mov	sl, r5
 8005d32:	46a9      	mov	r9, r5
 8005d34:	9501      	str	r5, [sp, #4]
 8005d36:	68a2      	ldr	r2, [r4, #8]
 8005d38:	b152      	cbz	r2, 8005d50 <_scanf_float+0x60>
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b4e      	cmp	r3, #78	; 0x4e
 8005d40:	d864      	bhi.n	8005e0c <_scanf_float+0x11c>
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	d83c      	bhi.n	8005dc0 <_scanf_float+0xd0>
 8005d46:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d4a:	b2c8      	uxtb	r0, r1
 8005d4c:	280e      	cmp	r0, #14
 8005d4e:	d93a      	bls.n	8005dc6 <_scanf_float+0xd6>
 8005d50:	f1b9 0f00 	cmp.w	r9, #0
 8005d54:	d003      	beq.n	8005d5e <_scanf_float+0x6e>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005d62:	f1ba 0f01 	cmp.w	sl, #1
 8005d66:	f200 8113 	bhi.w	8005f90 <_scanf_float+0x2a0>
 8005d6a:	455e      	cmp	r6, fp
 8005d6c:	f200 8105 	bhi.w	8005f7a <_scanf_float+0x28a>
 8005d70:	2501      	movs	r5, #1
 8005d72:	4628      	mov	r0, r5
 8005d74:	b007      	add	sp, #28
 8005d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d7e:	2a0d      	cmp	r2, #13
 8005d80:	d8e6      	bhi.n	8005d50 <_scanf_float+0x60>
 8005d82:	a101      	add	r1, pc, #4	; (adr r1, 8005d88 <_scanf_float+0x98>)
 8005d84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d88:	08005ec7 	.word	0x08005ec7
 8005d8c:	08005d51 	.word	0x08005d51
 8005d90:	08005d51 	.word	0x08005d51
 8005d94:	08005d51 	.word	0x08005d51
 8005d98:	08005f27 	.word	0x08005f27
 8005d9c:	08005eff 	.word	0x08005eff
 8005da0:	08005d51 	.word	0x08005d51
 8005da4:	08005d51 	.word	0x08005d51
 8005da8:	08005ed5 	.word	0x08005ed5
 8005dac:	08005d51 	.word	0x08005d51
 8005db0:	08005d51 	.word	0x08005d51
 8005db4:	08005d51 	.word	0x08005d51
 8005db8:	08005d51 	.word	0x08005d51
 8005dbc:	08005e8d 	.word	0x08005e8d
 8005dc0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005dc4:	e7db      	b.n	8005d7e <_scanf_float+0x8e>
 8005dc6:	290e      	cmp	r1, #14
 8005dc8:	d8c2      	bhi.n	8005d50 <_scanf_float+0x60>
 8005dca:	a001      	add	r0, pc, #4	; (adr r0, 8005dd0 <_scanf_float+0xe0>)
 8005dcc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005dd0:	08005e7f 	.word	0x08005e7f
 8005dd4:	08005d51 	.word	0x08005d51
 8005dd8:	08005e7f 	.word	0x08005e7f
 8005ddc:	08005f13 	.word	0x08005f13
 8005de0:	08005d51 	.word	0x08005d51
 8005de4:	08005e2d 	.word	0x08005e2d
 8005de8:	08005e69 	.word	0x08005e69
 8005dec:	08005e69 	.word	0x08005e69
 8005df0:	08005e69 	.word	0x08005e69
 8005df4:	08005e69 	.word	0x08005e69
 8005df8:	08005e69 	.word	0x08005e69
 8005dfc:	08005e69 	.word	0x08005e69
 8005e00:	08005e69 	.word	0x08005e69
 8005e04:	08005e69 	.word	0x08005e69
 8005e08:	08005e69 	.word	0x08005e69
 8005e0c:	2b6e      	cmp	r3, #110	; 0x6e
 8005e0e:	d809      	bhi.n	8005e24 <_scanf_float+0x134>
 8005e10:	2b60      	cmp	r3, #96	; 0x60
 8005e12:	d8b2      	bhi.n	8005d7a <_scanf_float+0x8a>
 8005e14:	2b54      	cmp	r3, #84	; 0x54
 8005e16:	d077      	beq.n	8005f08 <_scanf_float+0x218>
 8005e18:	2b59      	cmp	r3, #89	; 0x59
 8005e1a:	d199      	bne.n	8005d50 <_scanf_float+0x60>
 8005e1c:	2d07      	cmp	r5, #7
 8005e1e:	d197      	bne.n	8005d50 <_scanf_float+0x60>
 8005e20:	2508      	movs	r5, #8
 8005e22:	e029      	b.n	8005e78 <_scanf_float+0x188>
 8005e24:	2b74      	cmp	r3, #116	; 0x74
 8005e26:	d06f      	beq.n	8005f08 <_scanf_float+0x218>
 8005e28:	2b79      	cmp	r3, #121	; 0x79
 8005e2a:	e7f6      	b.n	8005e1a <_scanf_float+0x12a>
 8005e2c:	6821      	ldr	r1, [r4, #0]
 8005e2e:	05c8      	lsls	r0, r1, #23
 8005e30:	d51a      	bpl.n	8005e68 <_scanf_float+0x178>
 8005e32:	9b02      	ldr	r3, [sp, #8]
 8005e34:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005e38:	6021      	str	r1, [r4, #0]
 8005e3a:	f109 0901 	add.w	r9, r9, #1
 8005e3e:	b11b      	cbz	r3, 8005e48 <_scanf_float+0x158>
 8005e40:	3b01      	subs	r3, #1
 8005e42:	3201      	adds	r2, #1
 8005e44:	9302      	str	r3, [sp, #8]
 8005e46:	60a2      	str	r2, [r4, #8]
 8005e48:	68a3      	ldr	r3, [r4, #8]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	60a3      	str	r3, [r4, #8]
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	3301      	adds	r3, #1
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	607b      	str	r3, [r7, #4]
 8005e5c:	f340 8084 	ble.w	8005f68 <_scanf_float+0x278>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	603b      	str	r3, [r7, #0]
 8005e66:	e766      	b.n	8005d36 <_scanf_float+0x46>
 8005e68:	eb1a 0f05 	cmn.w	sl, r5
 8005e6c:	f47f af70 	bne.w	8005d50 <_scanf_float+0x60>
 8005e70:	6822      	ldr	r2, [r4, #0]
 8005e72:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e76:	6022      	str	r2, [r4, #0]
 8005e78:	f806 3b01 	strb.w	r3, [r6], #1
 8005e7c:	e7e4      	b.n	8005e48 <_scanf_float+0x158>
 8005e7e:	6822      	ldr	r2, [r4, #0]
 8005e80:	0610      	lsls	r0, r2, #24
 8005e82:	f57f af65 	bpl.w	8005d50 <_scanf_float+0x60>
 8005e86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e8a:	e7f4      	b.n	8005e76 <_scanf_float+0x186>
 8005e8c:	f1ba 0f00 	cmp.w	sl, #0
 8005e90:	d10e      	bne.n	8005eb0 <_scanf_float+0x1c0>
 8005e92:	f1b9 0f00 	cmp.w	r9, #0
 8005e96:	d10e      	bne.n	8005eb6 <_scanf_float+0x1c6>
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e9e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ea2:	d108      	bne.n	8005eb6 <_scanf_float+0x1c6>
 8005ea4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ea8:	6022      	str	r2, [r4, #0]
 8005eaa:	f04f 0a01 	mov.w	sl, #1
 8005eae:	e7e3      	b.n	8005e78 <_scanf_float+0x188>
 8005eb0:	f1ba 0f02 	cmp.w	sl, #2
 8005eb4:	d055      	beq.n	8005f62 <_scanf_float+0x272>
 8005eb6:	2d01      	cmp	r5, #1
 8005eb8:	d002      	beq.n	8005ec0 <_scanf_float+0x1d0>
 8005eba:	2d04      	cmp	r5, #4
 8005ebc:	f47f af48 	bne.w	8005d50 <_scanf_float+0x60>
 8005ec0:	3501      	adds	r5, #1
 8005ec2:	b2ed      	uxtb	r5, r5
 8005ec4:	e7d8      	b.n	8005e78 <_scanf_float+0x188>
 8005ec6:	f1ba 0f01 	cmp.w	sl, #1
 8005eca:	f47f af41 	bne.w	8005d50 <_scanf_float+0x60>
 8005ece:	f04f 0a02 	mov.w	sl, #2
 8005ed2:	e7d1      	b.n	8005e78 <_scanf_float+0x188>
 8005ed4:	b97d      	cbnz	r5, 8005ef6 <_scanf_float+0x206>
 8005ed6:	f1b9 0f00 	cmp.w	r9, #0
 8005eda:	f47f af3c 	bne.w	8005d56 <_scanf_float+0x66>
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ee4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ee8:	f47f af39 	bne.w	8005d5e <_scanf_float+0x6e>
 8005eec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ef0:	6022      	str	r2, [r4, #0]
 8005ef2:	2501      	movs	r5, #1
 8005ef4:	e7c0      	b.n	8005e78 <_scanf_float+0x188>
 8005ef6:	2d03      	cmp	r5, #3
 8005ef8:	d0e2      	beq.n	8005ec0 <_scanf_float+0x1d0>
 8005efa:	2d05      	cmp	r5, #5
 8005efc:	e7de      	b.n	8005ebc <_scanf_float+0x1cc>
 8005efe:	2d02      	cmp	r5, #2
 8005f00:	f47f af26 	bne.w	8005d50 <_scanf_float+0x60>
 8005f04:	2503      	movs	r5, #3
 8005f06:	e7b7      	b.n	8005e78 <_scanf_float+0x188>
 8005f08:	2d06      	cmp	r5, #6
 8005f0a:	f47f af21 	bne.w	8005d50 <_scanf_float+0x60>
 8005f0e:	2507      	movs	r5, #7
 8005f10:	e7b2      	b.n	8005e78 <_scanf_float+0x188>
 8005f12:	6822      	ldr	r2, [r4, #0]
 8005f14:	0591      	lsls	r1, r2, #22
 8005f16:	f57f af1b 	bpl.w	8005d50 <_scanf_float+0x60>
 8005f1a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005f1e:	6022      	str	r2, [r4, #0]
 8005f20:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f24:	e7a8      	b.n	8005e78 <_scanf_float+0x188>
 8005f26:	6822      	ldr	r2, [r4, #0]
 8005f28:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005f2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f30:	d006      	beq.n	8005f40 <_scanf_float+0x250>
 8005f32:	0550      	lsls	r0, r2, #21
 8005f34:	f57f af0c 	bpl.w	8005d50 <_scanf_float+0x60>
 8005f38:	f1b9 0f00 	cmp.w	r9, #0
 8005f3c:	f43f af0f 	beq.w	8005d5e <_scanf_float+0x6e>
 8005f40:	0591      	lsls	r1, r2, #22
 8005f42:	bf58      	it	pl
 8005f44:	9901      	ldrpl	r1, [sp, #4]
 8005f46:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f4a:	bf58      	it	pl
 8005f4c:	eba9 0101 	subpl.w	r1, r9, r1
 8005f50:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005f54:	bf58      	it	pl
 8005f56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f5a:	6022      	str	r2, [r4, #0]
 8005f5c:	f04f 0900 	mov.w	r9, #0
 8005f60:	e78a      	b.n	8005e78 <_scanf_float+0x188>
 8005f62:	f04f 0a03 	mov.w	sl, #3
 8005f66:	e787      	b.n	8005e78 <_scanf_float+0x188>
 8005f68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f6c:	4639      	mov	r1, r7
 8005f6e:	4640      	mov	r0, r8
 8005f70:	4798      	blx	r3
 8005f72:	2800      	cmp	r0, #0
 8005f74:	f43f aedf 	beq.w	8005d36 <_scanf_float+0x46>
 8005f78:	e6ea      	b.n	8005d50 <_scanf_float+0x60>
 8005f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f82:	463a      	mov	r2, r7
 8005f84:	4640      	mov	r0, r8
 8005f86:	4798      	blx	r3
 8005f88:	6923      	ldr	r3, [r4, #16]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	6123      	str	r3, [r4, #16]
 8005f8e:	e6ec      	b.n	8005d6a <_scanf_float+0x7a>
 8005f90:	1e6b      	subs	r3, r5, #1
 8005f92:	2b06      	cmp	r3, #6
 8005f94:	d825      	bhi.n	8005fe2 <_scanf_float+0x2f2>
 8005f96:	2d02      	cmp	r5, #2
 8005f98:	d836      	bhi.n	8006008 <_scanf_float+0x318>
 8005f9a:	455e      	cmp	r6, fp
 8005f9c:	f67f aee8 	bls.w	8005d70 <_scanf_float+0x80>
 8005fa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fa4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fa8:	463a      	mov	r2, r7
 8005faa:	4640      	mov	r0, r8
 8005fac:	4798      	blx	r3
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	6123      	str	r3, [r4, #16]
 8005fb4:	e7f1      	b.n	8005f9a <_scanf_float+0x2aa>
 8005fb6:	9802      	ldr	r0, [sp, #8]
 8005fb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fbc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005fc0:	9002      	str	r0, [sp, #8]
 8005fc2:	463a      	mov	r2, r7
 8005fc4:	4640      	mov	r0, r8
 8005fc6:	4798      	blx	r3
 8005fc8:	6923      	ldr	r3, [r4, #16]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	6123      	str	r3, [r4, #16]
 8005fce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005fd2:	fa5f fa8a 	uxtb.w	sl, sl
 8005fd6:	f1ba 0f02 	cmp.w	sl, #2
 8005fda:	d1ec      	bne.n	8005fb6 <_scanf_float+0x2c6>
 8005fdc:	3d03      	subs	r5, #3
 8005fde:	b2ed      	uxtb	r5, r5
 8005fe0:	1b76      	subs	r6, r6, r5
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	05da      	lsls	r2, r3, #23
 8005fe6:	d52f      	bpl.n	8006048 <_scanf_float+0x358>
 8005fe8:	055b      	lsls	r3, r3, #21
 8005fea:	d510      	bpl.n	800600e <_scanf_float+0x31e>
 8005fec:	455e      	cmp	r6, fp
 8005fee:	f67f aebf 	bls.w	8005d70 <_scanf_float+0x80>
 8005ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ff6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ffa:	463a      	mov	r2, r7
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4798      	blx	r3
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	3b01      	subs	r3, #1
 8006004:	6123      	str	r3, [r4, #16]
 8006006:	e7f1      	b.n	8005fec <_scanf_float+0x2fc>
 8006008:	46aa      	mov	sl, r5
 800600a:	9602      	str	r6, [sp, #8]
 800600c:	e7df      	b.n	8005fce <_scanf_float+0x2de>
 800600e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	2965      	cmp	r1, #101	; 0x65
 8006016:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800601a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800601e:	6123      	str	r3, [r4, #16]
 8006020:	d00c      	beq.n	800603c <_scanf_float+0x34c>
 8006022:	2945      	cmp	r1, #69	; 0x45
 8006024:	d00a      	beq.n	800603c <_scanf_float+0x34c>
 8006026:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800602a:	463a      	mov	r2, r7
 800602c:	4640      	mov	r0, r8
 800602e:	4798      	blx	r3
 8006030:	6923      	ldr	r3, [r4, #16]
 8006032:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006036:	3b01      	subs	r3, #1
 8006038:	1eb5      	subs	r5, r6, #2
 800603a:	6123      	str	r3, [r4, #16]
 800603c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006040:	463a      	mov	r2, r7
 8006042:	4640      	mov	r0, r8
 8006044:	4798      	blx	r3
 8006046:	462e      	mov	r6, r5
 8006048:	6825      	ldr	r5, [r4, #0]
 800604a:	f015 0510 	ands.w	r5, r5, #16
 800604e:	d158      	bne.n	8006102 <_scanf_float+0x412>
 8006050:	7035      	strb	r5, [r6, #0]
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800605c:	d11c      	bne.n	8006098 <_scanf_float+0x3a8>
 800605e:	9b01      	ldr	r3, [sp, #4]
 8006060:	454b      	cmp	r3, r9
 8006062:	eba3 0209 	sub.w	r2, r3, r9
 8006066:	d124      	bne.n	80060b2 <_scanf_float+0x3c2>
 8006068:	2200      	movs	r2, #0
 800606a:	4659      	mov	r1, fp
 800606c:	4640      	mov	r0, r8
 800606e:	f000 ff7f 	bl	8006f70 <_strtod_r>
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	6821      	ldr	r1, [r4, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f011 0f02 	tst.w	r1, #2
 800607c:	ec57 6b10 	vmov	r6, r7, d0
 8006080:	f103 0204 	add.w	r2, r3, #4
 8006084:	d020      	beq.n	80060c8 <_scanf_float+0x3d8>
 8006086:	9903      	ldr	r1, [sp, #12]
 8006088:	600a      	str	r2, [r1, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	e9c3 6700 	strd	r6, r7, [r3]
 8006090:	68e3      	ldr	r3, [r4, #12]
 8006092:	3301      	adds	r3, #1
 8006094:	60e3      	str	r3, [r4, #12]
 8006096:	e66c      	b.n	8005d72 <_scanf_float+0x82>
 8006098:	9b04      	ldr	r3, [sp, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0e4      	beq.n	8006068 <_scanf_float+0x378>
 800609e:	9905      	ldr	r1, [sp, #20]
 80060a0:	230a      	movs	r3, #10
 80060a2:	462a      	mov	r2, r5
 80060a4:	3101      	adds	r1, #1
 80060a6:	4640      	mov	r0, r8
 80060a8:	f000 ffea 	bl	8007080 <_strtol_r>
 80060ac:	9b04      	ldr	r3, [sp, #16]
 80060ae:	9e05      	ldr	r6, [sp, #20]
 80060b0:	1ac2      	subs	r2, r0, r3
 80060b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80060b6:	429e      	cmp	r6, r3
 80060b8:	bf28      	it	cs
 80060ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80060be:	4912      	ldr	r1, [pc, #72]	; (8006108 <_scanf_float+0x418>)
 80060c0:	4630      	mov	r0, r6
 80060c2:	f000 f825 	bl	8006110 <siprintf>
 80060c6:	e7cf      	b.n	8006068 <_scanf_float+0x378>
 80060c8:	f011 0f04 	tst.w	r1, #4
 80060cc:	9903      	ldr	r1, [sp, #12]
 80060ce:	600a      	str	r2, [r1, #0]
 80060d0:	d1db      	bne.n	800608a <_scanf_float+0x39a>
 80060d2:	f8d3 8000 	ldr.w	r8, [r3]
 80060d6:	ee10 2a10 	vmov	r2, s0
 80060da:	ee10 0a10 	vmov	r0, s0
 80060de:	463b      	mov	r3, r7
 80060e0:	4639      	mov	r1, r7
 80060e2:	f7fa fd23 	bl	8000b2c <__aeabi_dcmpun>
 80060e6:	b128      	cbz	r0, 80060f4 <_scanf_float+0x404>
 80060e8:	4808      	ldr	r0, [pc, #32]	; (800610c <_scanf_float+0x41c>)
 80060ea:	f001 f891 	bl	8007210 <nanf>
 80060ee:	ed88 0a00 	vstr	s0, [r8]
 80060f2:	e7cd      	b.n	8006090 <_scanf_float+0x3a0>
 80060f4:	4630      	mov	r0, r6
 80060f6:	4639      	mov	r1, r7
 80060f8:	f7fa fd76 	bl	8000be8 <__aeabi_d2f>
 80060fc:	f8c8 0000 	str.w	r0, [r8]
 8006100:	e7c6      	b.n	8006090 <_scanf_float+0x3a0>
 8006102:	2500      	movs	r5, #0
 8006104:	e635      	b.n	8005d72 <_scanf_float+0x82>
 8006106:	bf00      	nop
 8006108:	0800a562 	.word	0x0800a562
 800610c:	0800a977 	.word	0x0800a977

08006110 <siprintf>:
 8006110:	b40e      	push	{r1, r2, r3}
 8006112:	b500      	push	{lr}
 8006114:	b09c      	sub	sp, #112	; 0x70
 8006116:	ab1d      	add	r3, sp, #116	; 0x74
 8006118:	9002      	str	r0, [sp, #8]
 800611a:	9006      	str	r0, [sp, #24]
 800611c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006120:	4809      	ldr	r0, [pc, #36]	; (8006148 <siprintf+0x38>)
 8006122:	9107      	str	r1, [sp, #28]
 8006124:	9104      	str	r1, [sp, #16]
 8006126:	4909      	ldr	r1, [pc, #36]	; (800614c <siprintf+0x3c>)
 8006128:	f853 2b04 	ldr.w	r2, [r3], #4
 800612c:	9105      	str	r1, [sp, #20]
 800612e:	6800      	ldr	r0, [r0, #0]
 8006130:	9301      	str	r3, [sp, #4]
 8006132:	a902      	add	r1, sp, #8
 8006134:	f002 faec 	bl	8008710 <_svfiprintf_r>
 8006138:	9b02      	ldr	r3, [sp, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	b01c      	add	sp, #112	; 0x70
 8006140:	f85d eb04 	ldr.w	lr, [sp], #4
 8006144:	b003      	add	sp, #12
 8006146:	4770      	bx	lr
 8006148:	200001d0 	.word	0x200001d0
 800614c:	ffff0208 	.word	0xffff0208

08006150 <siscanf>:
 8006150:	b40e      	push	{r1, r2, r3}
 8006152:	b510      	push	{r4, lr}
 8006154:	b09f      	sub	sp, #124	; 0x7c
 8006156:	ac21      	add	r4, sp, #132	; 0x84
 8006158:	f44f 7101 	mov.w	r1, #516	; 0x204
 800615c:	f854 2b04 	ldr.w	r2, [r4], #4
 8006160:	9201      	str	r2, [sp, #4]
 8006162:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006166:	9004      	str	r0, [sp, #16]
 8006168:	9008      	str	r0, [sp, #32]
 800616a:	f7fa f881 	bl	8000270 <strlen>
 800616e:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <siscanf+0x50>)
 8006170:	9005      	str	r0, [sp, #20]
 8006172:	9009      	str	r0, [sp, #36]	; 0x24
 8006174:	930d      	str	r3, [sp, #52]	; 0x34
 8006176:	480b      	ldr	r0, [pc, #44]	; (80061a4 <siscanf+0x54>)
 8006178:	9a01      	ldr	r2, [sp, #4]
 800617a:	6800      	ldr	r0, [r0, #0]
 800617c:	9403      	str	r4, [sp, #12]
 800617e:	2300      	movs	r3, #0
 8006180:	9311      	str	r3, [sp, #68]	; 0x44
 8006182:	9316      	str	r3, [sp, #88]	; 0x58
 8006184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006188:	f8ad 301e 	strh.w	r3, [sp, #30]
 800618c:	a904      	add	r1, sp, #16
 800618e:	4623      	mov	r3, r4
 8006190:	f002 fc16 	bl	80089c0 <__ssvfiscanf_r>
 8006194:	b01f      	add	sp, #124	; 0x7c
 8006196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800619a:	b003      	add	sp, #12
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	080061cb 	.word	0x080061cb
 80061a4:	200001d0 	.word	0x200001d0

080061a8 <__sread>:
 80061a8:	b510      	push	{r4, lr}
 80061aa:	460c      	mov	r4, r1
 80061ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b0:	f000 ffc6 	bl	8007140 <_read_r>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	bfab      	itete	ge
 80061b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061ba:	89a3      	ldrhlt	r3, [r4, #12]
 80061bc:	181b      	addge	r3, r3, r0
 80061be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061c2:	bfac      	ite	ge
 80061c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80061c6:	81a3      	strhlt	r3, [r4, #12]
 80061c8:	bd10      	pop	{r4, pc}

080061ca <__seofread>:
 80061ca:	2000      	movs	r0, #0
 80061cc:	4770      	bx	lr

080061ce <__swrite>:
 80061ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d2:	461f      	mov	r7, r3
 80061d4:	898b      	ldrh	r3, [r1, #12]
 80061d6:	05db      	lsls	r3, r3, #23
 80061d8:	4605      	mov	r5, r0
 80061da:	460c      	mov	r4, r1
 80061dc:	4616      	mov	r6, r2
 80061de:	d505      	bpl.n	80061ec <__swrite+0x1e>
 80061e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e4:	2302      	movs	r3, #2
 80061e6:	2200      	movs	r2, #0
 80061e8:	f000 ff98 	bl	800711c <_lseek_r>
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061f6:	81a3      	strh	r3, [r4, #12]
 80061f8:	4632      	mov	r2, r6
 80061fa:	463b      	mov	r3, r7
 80061fc:	4628      	mov	r0, r5
 80061fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006202:	f000 bfaf 	b.w	8007164 <_write_r>

08006206 <__sseek>:
 8006206:	b510      	push	{r4, lr}
 8006208:	460c      	mov	r4, r1
 800620a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620e:	f000 ff85 	bl	800711c <_lseek_r>
 8006212:	1c43      	adds	r3, r0, #1
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	bf15      	itete	ne
 8006218:	6560      	strne	r0, [r4, #84]	; 0x54
 800621a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800621e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006222:	81a3      	strheq	r3, [r4, #12]
 8006224:	bf18      	it	ne
 8006226:	81a3      	strhne	r3, [r4, #12]
 8006228:	bd10      	pop	{r4, pc}

0800622a <__sclose>:
 800622a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800622e:	f000 bf65 	b.w	80070fc <_close_r>
	...

08006234 <std>:
 8006234:	2300      	movs	r3, #0
 8006236:	b510      	push	{r4, lr}
 8006238:	4604      	mov	r4, r0
 800623a:	e9c0 3300 	strd	r3, r3, [r0]
 800623e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006242:	6083      	str	r3, [r0, #8]
 8006244:	8181      	strh	r1, [r0, #12]
 8006246:	6643      	str	r3, [r0, #100]	; 0x64
 8006248:	81c2      	strh	r2, [r0, #14]
 800624a:	6183      	str	r3, [r0, #24]
 800624c:	4619      	mov	r1, r3
 800624e:	2208      	movs	r2, #8
 8006250:	305c      	adds	r0, #92	; 0x5c
 8006252:	f000 ff47 	bl	80070e4 <memset>
 8006256:	4b05      	ldr	r3, [pc, #20]	; (800626c <std+0x38>)
 8006258:	6263      	str	r3, [r4, #36]	; 0x24
 800625a:	4b05      	ldr	r3, [pc, #20]	; (8006270 <std+0x3c>)
 800625c:	62a3      	str	r3, [r4, #40]	; 0x28
 800625e:	4b05      	ldr	r3, [pc, #20]	; (8006274 <std+0x40>)
 8006260:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006262:	4b05      	ldr	r3, [pc, #20]	; (8006278 <std+0x44>)
 8006264:	6224      	str	r4, [r4, #32]
 8006266:	6323      	str	r3, [r4, #48]	; 0x30
 8006268:	bd10      	pop	{r4, pc}
 800626a:	bf00      	nop
 800626c:	080061a9 	.word	0x080061a9
 8006270:	080061cf 	.word	0x080061cf
 8006274:	08006207 	.word	0x08006207
 8006278:	0800622b 	.word	0x0800622b

0800627c <stdio_exit_handler>:
 800627c:	4a02      	ldr	r2, [pc, #8]	; (8006288 <stdio_exit_handler+0xc>)
 800627e:	4903      	ldr	r1, [pc, #12]	; (800628c <stdio_exit_handler+0x10>)
 8006280:	4803      	ldr	r0, [pc, #12]	; (8006290 <stdio_exit_handler+0x14>)
 8006282:	f000 beff 	b.w	8007084 <_fwalk_sglue>
 8006286:	bf00      	nop
 8006288:	2000000c 	.word	0x2000000c
 800628c:	08009241 	.word	0x08009241
 8006290:	20000184 	.word	0x20000184

08006294 <cleanup_stdio>:
 8006294:	6841      	ldr	r1, [r0, #4]
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <cleanup_stdio+0x34>)
 8006298:	4299      	cmp	r1, r3
 800629a:	b510      	push	{r4, lr}
 800629c:	4604      	mov	r4, r0
 800629e:	d001      	beq.n	80062a4 <cleanup_stdio+0x10>
 80062a0:	f002 ffce 	bl	8009240 <_fflush_r>
 80062a4:	68a1      	ldr	r1, [r4, #8]
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <cleanup_stdio+0x38>)
 80062a8:	4299      	cmp	r1, r3
 80062aa:	d002      	beq.n	80062b2 <cleanup_stdio+0x1e>
 80062ac:	4620      	mov	r0, r4
 80062ae:	f002 ffc7 	bl	8009240 <_fflush_r>
 80062b2:	68e1      	ldr	r1, [r4, #12]
 80062b4:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <cleanup_stdio+0x3c>)
 80062b6:	4299      	cmp	r1, r3
 80062b8:	d004      	beq.n	80062c4 <cleanup_stdio+0x30>
 80062ba:	4620      	mov	r0, r4
 80062bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062c0:	f002 bfbe 	b.w	8009240 <_fflush_r>
 80062c4:	bd10      	pop	{r4, pc}
 80062c6:	bf00      	nop
 80062c8:	2000051c 	.word	0x2000051c
 80062cc:	20000584 	.word	0x20000584
 80062d0:	200005ec 	.word	0x200005ec

080062d4 <global_stdio_init.part.0>:
 80062d4:	b510      	push	{r4, lr}
 80062d6:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <global_stdio_init.part.0+0x30>)
 80062d8:	4c0b      	ldr	r4, [pc, #44]	; (8006308 <global_stdio_init.part.0+0x34>)
 80062da:	4a0c      	ldr	r2, [pc, #48]	; (800630c <global_stdio_init.part.0+0x38>)
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	4620      	mov	r0, r4
 80062e0:	2200      	movs	r2, #0
 80062e2:	2104      	movs	r1, #4
 80062e4:	f7ff ffa6 	bl	8006234 <std>
 80062e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80062ec:	2201      	movs	r2, #1
 80062ee:	2109      	movs	r1, #9
 80062f0:	f7ff ffa0 	bl	8006234 <std>
 80062f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80062f8:	2202      	movs	r2, #2
 80062fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062fe:	2112      	movs	r1, #18
 8006300:	f7ff bf98 	b.w	8006234 <std>
 8006304:	20000654 	.word	0x20000654
 8006308:	2000051c 	.word	0x2000051c
 800630c:	0800627d 	.word	0x0800627d

08006310 <__sfp_lock_acquire>:
 8006310:	4801      	ldr	r0, [pc, #4]	; (8006318 <__sfp_lock_acquire+0x8>)
 8006312:	f000 bf63 	b.w	80071dc <__retarget_lock_acquire_recursive>
 8006316:	bf00      	nop
 8006318:	2000065d 	.word	0x2000065d

0800631c <__sfp_lock_release>:
 800631c:	4801      	ldr	r0, [pc, #4]	; (8006324 <__sfp_lock_release+0x8>)
 800631e:	f000 bf5e 	b.w	80071de <__retarget_lock_release_recursive>
 8006322:	bf00      	nop
 8006324:	2000065d 	.word	0x2000065d

08006328 <__sinit>:
 8006328:	b510      	push	{r4, lr}
 800632a:	4604      	mov	r4, r0
 800632c:	f7ff fff0 	bl	8006310 <__sfp_lock_acquire>
 8006330:	6a23      	ldr	r3, [r4, #32]
 8006332:	b11b      	cbz	r3, 800633c <__sinit+0x14>
 8006334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006338:	f7ff bff0 	b.w	800631c <__sfp_lock_release>
 800633c:	4b04      	ldr	r3, [pc, #16]	; (8006350 <__sinit+0x28>)
 800633e:	6223      	str	r3, [r4, #32]
 8006340:	4b04      	ldr	r3, [pc, #16]	; (8006354 <__sinit+0x2c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f5      	bne.n	8006334 <__sinit+0xc>
 8006348:	f7ff ffc4 	bl	80062d4 <global_stdio_init.part.0>
 800634c:	e7f2      	b.n	8006334 <__sinit+0xc>
 800634e:	bf00      	nop
 8006350:	08006295 	.word	0x08006295
 8006354:	20000654 	.word	0x20000654

08006358 <sulp>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	4604      	mov	r4, r0
 800635c:	460d      	mov	r5, r1
 800635e:	ec45 4b10 	vmov	d0, r4, r5
 8006362:	4616      	mov	r6, r2
 8006364:	f003 fb0c 	bl	8009980 <__ulp>
 8006368:	ec51 0b10 	vmov	r0, r1, d0
 800636c:	b17e      	cbz	r6, 800638e <sulp+0x36>
 800636e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006372:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006376:	2b00      	cmp	r3, #0
 8006378:	dd09      	ble.n	800638e <sulp+0x36>
 800637a:	051b      	lsls	r3, r3, #20
 800637c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006380:	2400      	movs	r4, #0
 8006382:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006386:	4622      	mov	r2, r4
 8006388:	462b      	mov	r3, r5
 800638a:	f7fa f935 	bl	80005f8 <__aeabi_dmul>
 800638e:	bd70      	pop	{r4, r5, r6, pc}

08006390 <_strtod_l>:
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	ed2d 8b02 	vpush	{d8}
 8006398:	b09b      	sub	sp, #108	; 0x6c
 800639a:	4604      	mov	r4, r0
 800639c:	9213      	str	r2, [sp, #76]	; 0x4c
 800639e:	2200      	movs	r2, #0
 80063a0:	9216      	str	r2, [sp, #88]	; 0x58
 80063a2:	460d      	mov	r5, r1
 80063a4:	f04f 0800 	mov.w	r8, #0
 80063a8:	f04f 0900 	mov.w	r9, #0
 80063ac:	460a      	mov	r2, r1
 80063ae:	9215      	str	r2, [sp, #84]	; 0x54
 80063b0:	7811      	ldrb	r1, [r2, #0]
 80063b2:	292b      	cmp	r1, #43	; 0x2b
 80063b4:	d04c      	beq.n	8006450 <_strtod_l+0xc0>
 80063b6:	d83a      	bhi.n	800642e <_strtod_l+0x9e>
 80063b8:	290d      	cmp	r1, #13
 80063ba:	d834      	bhi.n	8006426 <_strtod_l+0x96>
 80063bc:	2908      	cmp	r1, #8
 80063be:	d834      	bhi.n	800642a <_strtod_l+0x9a>
 80063c0:	2900      	cmp	r1, #0
 80063c2:	d03d      	beq.n	8006440 <_strtod_l+0xb0>
 80063c4:	2200      	movs	r2, #0
 80063c6:	920a      	str	r2, [sp, #40]	; 0x28
 80063c8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80063ca:	7832      	ldrb	r2, [r6, #0]
 80063cc:	2a30      	cmp	r2, #48	; 0x30
 80063ce:	f040 80b4 	bne.w	800653a <_strtod_l+0x1aa>
 80063d2:	7872      	ldrb	r2, [r6, #1]
 80063d4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80063d8:	2a58      	cmp	r2, #88	; 0x58
 80063da:	d170      	bne.n	80064be <_strtod_l+0x12e>
 80063dc:	9302      	str	r3, [sp, #8]
 80063de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	ab16      	add	r3, sp, #88	; 0x58
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	4a8e      	ldr	r2, [pc, #568]	; (8006620 <_strtod_l+0x290>)
 80063e8:	ab17      	add	r3, sp, #92	; 0x5c
 80063ea:	a915      	add	r1, sp, #84	; 0x54
 80063ec:	4620      	mov	r0, r4
 80063ee:	f001 fe45 	bl	800807c <__gethex>
 80063f2:	f010 070f 	ands.w	r7, r0, #15
 80063f6:	4605      	mov	r5, r0
 80063f8:	d005      	beq.n	8006406 <_strtod_l+0x76>
 80063fa:	2f06      	cmp	r7, #6
 80063fc:	d12a      	bne.n	8006454 <_strtod_l+0xc4>
 80063fe:	3601      	adds	r6, #1
 8006400:	2300      	movs	r3, #0
 8006402:	9615      	str	r6, [sp, #84]	; 0x54
 8006404:	930a      	str	r3, [sp, #40]	; 0x28
 8006406:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006408:	2b00      	cmp	r3, #0
 800640a:	f040 857f 	bne.w	8006f0c <_strtod_l+0xb7c>
 800640e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006410:	b1db      	cbz	r3, 800644a <_strtod_l+0xba>
 8006412:	4642      	mov	r2, r8
 8006414:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006418:	ec43 2b10 	vmov	d0, r2, r3
 800641c:	b01b      	add	sp, #108	; 0x6c
 800641e:	ecbd 8b02 	vpop	{d8}
 8006422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006426:	2920      	cmp	r1, #32
 8006428:	d1cc      	bne.n	80063c4 <_strtod_l+0x34>
 800642a:	3201      	adds	r2, #1
 800642c:	e7bf      	b.n	80063ae <_strtod_l+0x1e>
 800642e:	292d      	cmp	r1, #45	; 0x2d
 8006430:	d1c8      	bne.n	80063c4 <_strtod_l+0x34>
 8006432:	2101      	movs	r1, #1
 8006434:	910a      	str	r1, [sp, #40]	; 0x28
 8006436:	1c51      	adds	r1, r2, #1
 8006438:	9115      	str	r1, [sp, #84]	; 0x54
 800643a:	7852      	ldrb	r2, [r2, #1]
 800643c:	2a00      	cmp	r2, #0
 800643e:	d1c3      	bne.n	80063c8 <_strtod_l+0x38>
 8006440:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006442:	9515      	str	r5, [sp, #84]	; 0x54
 8006444:	2b00      	cmp	r3, #0
 8006446:	f040 855f 	bne.w	8006f08 <_strtod_l+0xb78>
 800644a:	4642      	mov	r2, r8
 800644c:	464b      	mov	r3, r9
 800644e:	e7e3      	b.n	8006418 <_strtod_l+0x88>
 8006450:	2100      	movs	r1, #0
 8006452:	e7ef      	b.n	8006434 <_strtod_l+0xa4>
 8006454:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006456:	b13a      	cbz	r2, 8006468 <_strtod_l+0xd8>
 8006458:	2135      	movs	r1, #53	; 0x35
 800645a:	a818      	add	r0, sp, #96	; 0x60
 800645c:	f003 fb8d 	bl	8009b7a <__copybits>
 8006460:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006462:	4620      	mov	r0, r4
 8006464:	f002 ff60 	bl	8009328 <_Bfree>
 8006468:	3f01      	subs	r7, #1
 800646a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800646c:	2f04      	cmp	r7, #4
 800646e:	d806      	bhi.n	800647e <_strtod_l+0xee>
 8006470:	e8df f007 	tbb	[pc, r7]
 8006474:	201d0314 	.word	0x201d0314
 8006478:	14          	.byte	0x14
 8006479:	00          	.byte	0x00
 800647a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800647e:	05e9      	lsls	r1, r5, #23
 8006480:	bf48      	it	mi
 8006482:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006486:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800648a:	0d1b      	lsrs	r3, r3, #20
 800648c:	051b      	lsls	r3, r3, #20
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1b9      	bne.n	8006406 <_strtod_l+0x76>
 8006492:	f000 fe79 	bl	8007188 <__errno>
 8006496:	2322      	movs	r3, #34	; 0x22
 8006498:	6003      	str	r3, [r0, #0]
 800649a:	e7b4      	b.n	8006406 <_strtod_l+0x76>
 800649c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80064a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80064a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80064a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80064ac:	e7e7      	b.n	800647e <_strtod_l+0xee>
 80064ae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006628 <_strtod_l+0x298>
 80064b2:	e7e4      	b.n	800647e <_strtod_l+0xee>
 80064b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80064b8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80064bc:	e7df      	b.n	800647e <_strtod_l+0xee>
 80064be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	9215      	str	r2, [sp, #84]	; 0x54
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	2b30      	cmp	r3, #48	; 0x30
 80064c8:	d0f9      	beq.n	80064be <_strtod_l+0x12e>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d09b      	beq.n	8006406 <_strtod_l+0x76>
 80064ce:	2301      	movs	r3, #1
 80064d0:	f04f 0a00 	mov.w	sl, #0
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80064da:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80064de:	46d3      	mov	fp, sl
 80064e0:	220a      	movs	r2, #10
 80064e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80064e4:	7806      	ldrb	r6, [r0, #0]
 80064e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80064ea:	b2d9      	uxtb	r1, r3
 80064ec:	2909      	cmp	r1, #9
 80064ee:	d926      	bls.n	800653e <_strtod_l+0x1ae>
 80064f0:	494c      	ldr	r1, [pc, #304]	; (8006624 <_strtod_l+0x294>)
 80064f2:	2201      	movs	r2, #1
 80064f4:	f000 fde4 	bl	80070c0 <strncmp>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d030      	beq.n	800655e <_strtod_l+0x1ce>
 80064fc:	2000      	movs	r0, #0
 80064fe:	4632      	mov	r2, r6
 8006500:	9005      	str	r0, [sp, #20]
 8006502:	465e      	mov	r6, fp
 8006504:	4603      	mov	r3, r0
 8006506:	2a65      	cmp	r2, #101	; 0x65
 8006508:	d001      	beq.n	800650e <_strtod_l+0x17e>
 800650a:	2a45      	cmp	r2, #69	; 0x45
 800650c:	d113      	bne.n	8006536 <_strtod_l+0x1a6>
 800650e:	b91e      	cbnz	r6, 8006518 <_strtod_l+0x188>
 8006510:	9a04      	ldr	r2, [sp, #16]
 8006512:	4302      	orrs	r2, r0
 8006514:	d094      	beq.n	8006440 <_strtod_l+0xb0>
 8006516:	2600      	movs	r6, #0
 8006518:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800651a:	1c6a      	adds	r2, r5, #1
 800651c:	9215      	str	r2, [sp, #84]	; 0x54
 800651e:	786a      	ldrb	r2, [r5, #1]
 8006520:	2a2b      	cmp	r2, #43	; 0x2b
 8006522:	d074      	beq.n	800660e <_strtod_l+0x27e>
 8006524:	2a2d      	cmp	r2, #45	; 0x2d
 8006526:	d078      	beq.n	800661a <_strtod_l+0x28a>
 8006528:	f04f 0c00 	mov.w	ip, #0
 800652c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006530:	2909      	cmp	r1, #9
 8006532:	d97f      	bls.n	8006634 <_strtod_l+0x2a4>
 8006534:	9515      	str	r5, [sp, #84]	; 0x54
 8006536:	2700      	movs	r7, #0
 8006538:	e09e      	b.n	8006678 <_strtod_l+0x2e8>
 800653a:	2300      	movs	r3, #0
 800653c:	e7c8      	b.n	80064d0 <_strtod_l+0x140>
 800653e:	f1bb 0f08 	cmp.w	fp, #8
 8006542:	bfd8      	it	le
 8006544:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006546:	f100 0001 	add.w	r0, r0, #1
 800654a:	bfda      	itte	le
 800654c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006550:	9309      	strle	r3, [sp, #36]	; 0x24
 8006552:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006556:	f10b 0b01 	add.w	fp, fp, #1
 800655a:	9015      	str	r0, [sp, #84]	; 0x54
 800655c:	e7c1      	b.n	80064e2 <_strtod_l+0x152>
 800655e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	9215      	str	r2, [sp, #84]	; 0x54
 8006564:	785a      	ldrb	r2, [r3, #1]
 8006566:	f1bb 0f00 	cmp.w	fp, #0
 800656a:	d037      	beq.n	80065dc <_strtod_l+0x24c>
 800656c:	9005      	str	r0, [sp, #20]
 800656e:	465e      	mov	r6, fp
 8006570:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006574:	2b09      	cmp	r3, #9
 8006576:	d912      	bls.n	800659e <_strtod_l+0x20e>
 8006578:	2301      	movs	r3, #1
 800657a:	e7c4      	b.n	8006506 <_strtod_l+0x176>
 800657c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	9215      	str	r2, [sp, #84]	; 0x54
 8006582:	785a      	ldrb	r2, [r3, #1]
 8006584:	3001      	adds	r0, #1
 8006586:	2a30      	cmp	r2, #48	; 0x30
 8006588:	d0f8      	beq.n	800657c <_strtod_l+0x1ec>
 800658a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800658e:	2b08      	cmp	r3, #8
 8006590:	f200 84c1 	bhi.w	8006f16 <_strtod_l+0xb86>
 8006594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006596:	9005      	str	r0, [sp, #20]
 8006598:	2000      	movs	r0, #0
 800659a:	930b      	str	r3, [sp, #44]	; 0x2c
 800659c:	4606      	mov	r6, r0
 800659e:	3a30      	subs	r2, #48	; 0x30
 80065a0:	f100 0301 	add.w	r3, r0, #1
 80065a4:	d014      	beq.n	80065d0 <_strtod_l+0x240>
 80065a6:	9905      	ldr	r1, [sp, #20]
 80065a8:	4419      	add	r1, r3
 80065aa:	9105      	str	r1, [sp, #20]
 80065ac:	4633      	mov	r3, r6
 80065ae:	eb00 0c06 	add.w	ip, r0, r6
 80065b2:	210a      	movs	r1, #10
 80065b4:	4563      	cmp	r3, ip
 80065b6:	d113      	bne.n	80065e0 <_strtod_l+0x250>
 80065b8:	1833      	adds	r3, r6, r0
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	f106 0601 	add.w	r6, r6, #1
 80065c0:	4406      	add	r6, r0
 80065c2:	dc1a      	bgt.n	80065fa <_strtod_l+0x26a>
 80065c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065c6:	230a      	movs	r3, #10
 80065c8:	fb03 2301 	mla	r3, r3, r1, r2
 80065cc:	9309      	str	r3, [sp, #36]	; 0x24
 80065ce:	2300      	movs	r3, #0
 80065d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065d2:	1c51      	adds	r1, r2, #1
 80065d4:	9115      	str	r1, [sp, #84]	; 0x54
 80065d6:	7852      	ldrb	r2, [r2, #1]
 80065d8:	4618      	mov	r0, r3
 80065da:	e7c9      	b.n	8006570 <_strtod_l+0x1e0>
 80065dc:	4658      	mov	r0, fp
 80065de:	e7d2      	b.n	8006586 <_strtod_l+0x1f6>
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	f103 0301 	add.w	r3, r3, #1
 80065e6:	dc03      	bgt.n	80065f0 <_strtod_l+0x260>
 80065e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80065ea:	434f      	muls	r7, r1
 80065ec:	9709      	str	r7, [sp, #36]	; 0x24
 80065ee:	e7e1      	b.n	80065b4 <_strtod_l+0x224>
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	bfd8      	it	le
 80065f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80065f8:	e7dc      	b.n	80065b4 <_strtod_l+0x224>
 80065fa:	2e10      	cmp	r6, #16
 80065fc:	bfdc      	itt	le
 80065fe:	230a      	movle	r3, #10
 8006600:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006604:	e7e3      	b.n	80065ce <_strtod_l+0x23e>
 8006606:	2300      	movs	r3, #0
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	2301      	movs	r3, #1
 800660c:	e780      	b.n	8006510 <_strtod_l+0x180>
 800660e:	f04f 0c00 	mov.w	ip, #0
 8006612:	1caa      	adds	r2, r5, #2
 8006614:	9215      	str	r2, [sp, #84]	; 0x54
 8006616:	78aa      	ldrb	r2, [r5, #2]
 8006618:	e788      	b.n	800652c <_strtod_l+0x19c>
 800661a:	f04f 0c01 	mov.w	ip, #1
 800661e:	e7f8      	b.n	8006612 <_strtod_l+0x282>
 8006620:	0800a56c 	.word	0x0800a56c
 8006624:	0800a567 	.word	0x0800a567
 8006628:	7ff00000 	.word	0x7ff00000
 800662c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800662e:	1c51      	adds	r1, r2, #1
 8006630:	9115      	str	r1, [sp, #84]	; 0x54
 8006632:	7852      	ldrb	r2, [r2, #1]
 8006634:	2a30      	cmp	r2, #48	; 0x30
 8006636:	d0f9      	beq.n	800662c <_strtod_l+0x29c>
 8006638:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800663c:	2908      	cmp	r1, #8
 800663e:	f63f af7a 	bhi.w	8006536 <_strtod_l+0x1a6>
 8006642:	3a30      	subs	r2, #48	; 0x30
 8006644:	9208      	str	r2, [sp, #32]
 8006646:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006648:	920c      	str	r2, [sp, #48]	; 0x30
 800664a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800664c:	1c57      	adds	r7, r2, #1
 800664e:	9715      	str	r7, [sp, #84]	; 0x54
 8006650:	7852      	ldrb	r2, [r2, #1]
 8006652:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006656:	f1be 0f09 	cmp.w	lr, #9
 800665a:	d938      	bls.n	80066ce <_strtod_l+0x33e>
 800665c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800665e:	1a7f      	subs	r7, r7, r1
 8006660:	2f08      	cmp	r7, #8
 8006662:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006666:	dc03      	bgt.n	8006670 <_strtod_l+0x2e0>
 8006668:	9908      	ldr	r1, [sp, #32]
 800666a:	428f      	cmp	r7, r1
 800666c:	bfa8      	it	ge
 800666e:	460f      	movge	r7, r1
 8006670:	f1bc 0f00 	cmp.w	ip, #0
 8006674:	d000      	beq.n	8006678 <_strtod_l+0x2e8>
 8006676:	427f      	negs	r7, r7
 8006678:	2e00      	cmp	r6, #0
 800667a:	d14f      	bne.n	800671c <_strtod_l+0x38c>
 800667c:	9904      	ldr	r1, [sp, #16]
 800667e:	4301      	orrs	r1, r0
 8006680:	f47f aec1 	bne.w	8006406 <_strtod_l+0x76>
 8006684:	2b00      	cmp	r3, #0
 8006686:	f47f aedb 	bne.w	8006440 <_strtod_l+0xb0>
 800668a:	2a69      	cmp	r2, #105	; 0x69
 800668c:	d029      	beq.n	80066e2 <_strtod_l+0x352>
 800668e:	dc26      	bgt.n	80066de <_strtod_l+0x34e>
 8006690:	2a49      	cmp	r2, #73	; 0x49
 8006692:	d026      	beq.n	80066e2 <_strtod_l+0x352>
 8006694:	2a4e      	cmp	r2, #78	; 0x4e
 8006696:	f47f aed3 	bne.w	8006440 <_strtod_l+0xb0>
 800669a:	499b      	ldr	r1, [pc, #620]	; (8006908 <_strtod_l+0x578>)
 800669c:	a815      	add	r0, sp, #84	; 0x54
 800669e:	f001 ff2d 	bl	80084fc <__match>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	f43f aecc 	beq.w	8006440 <_strtod_l+0xb0>
 80066a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b28      	cmp	r3, #40	; 0x28
 80066ae:	d12f      	bne.n	8006710 <_strtod_l+0x380>
 80066b0:	4996      	ldr	r1, [pc, #600]	; (800690c <_strtod_l+0x57c>)
 80066b2:	aa18      	add	r2, sp, #96	; 0x60
 80066b4:	a815      	add	r0, sp, #84	; 0x54
 80066b6:	f001 ff35 	bl	8008524 <__hexnan>
 80066ba:	2805      	cmp	r0, #5
 80066bc:	d128      	bne.n	8006710 <_strtod_l+0x380>
 80066be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80066c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80066cc:	e69b      	b.n	8006406 <_strtod_l+0x76>
 80066ce:	9f08      	ldr	r7, [sp, #32]
 80066d0:	210a      	movs	r1, #10
 80066d2:	fb01 2107 	mla	r1, r1, r7, r2
 80066d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80066da:	9208      	str	r2, [sp, #32]
 80066dc:	e7b5      	b.n	800664a <_strtod_l+0x2ba>
 80066de:	2a6e      	cmp	r2, #110	; 0x6e
 80066e0:	e7d9      	b.n	8006696 <_strtod_l+0x306>
 80066e2:	498b      	ldr	r1, [pc, #556]	; (8006910 <_strtod_l+0x580>)
 80066e4:	a815      	add	r0, sp, #84	; 0x54
 80066e6:	f001 ff09 	bl	80084fc <__match>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	f43f aea8 	beq.w	8006440 <_strtod_l+0xb0>
 80066f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066f2:	4988      	ldr	r1, [pc, #544]	; (8006914 <_strtod_l+0x584>)
 80066f4:	3b01      	subs	r3, #1
 80066f6:	a815      	add	r0, sp, #84	; 0x54
 80066f8:	9315      	str	r3, [sp, #84]	; 0x54
 80066fa:	f001 feff 	bl	80084fc <__match>
 80066fe:	b910      	cbnz	r0, 8006706 <_strtod_l+0x376>
 8006700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006702:	3301      	adds	r3, #1
 8006704:	9315      	str	r3, [sp, #84]	; 0x54
 8006706:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006924 <_strtod_l+0x594>
 800670a:	f04f 0800 	mov.w	r8, #0
 800670e:	e67a      	b.n	8006406 <_strtod_l+0x76>
 8006710:	4881      	ldr	r0, [pc, #516]	; (8006918 <_strtod_l+0x588>)
 8006712:	f000 fd75 	bl	8007200 <nan>
 8006716:	ec59 8b10 	vmov	r8, r9, d0
 800671a:	e674      	b.n	8006406 <_strtod_l+0x76>
 800671c:	9b05      	ldr	r3, [sp, #20]
 800671e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006720:	1afb      	subs	r3, r7, r3
 8006722:	f1bb 0f00 	cmp.w	fp, #0
 8006726:	bf08      	it	eq
 8006728:	46b3      	moveq	fp, r6
 800672a:	2e10      	cmp	r6, #16
 800672c:	9308      	str	r3, [sp, #32]
 800672e:	4635      	mov	r5, r6
 8006730:	bfa8      	it	ge
 8006732:	2510      	movge	r5, #16
 8006734:	f7f9 fee6 	bl	8000504 <__aeabi_ui2d>
 8006738:	2e09      	cmp	r6, #9
 800673a:	4680      	mov	r8, r0
 800673c:	4689      	mov	r9, r1
 800673e:	dd13      	ble.n	8006768 <_strtod_l+0x3d8>
 8006740:	4b76      	ldr	r3, [pc, #472]	; (800691c <_strtod_l+0x58c>)
 8006742:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006746:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800674a:	f7f9 ff55 	bl	80005f8 <__aeabi_dmul>
 800674e:	4680      	mov	r8, r0
 8006750:	4650      	mov	r0, sl
 8006752:	4689      	mov	r9, r1
 8006754:	f7f9 fed6 	bl	8000504 <__aeabi_ui2d>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4640      	mov	r0, r8
 800675e:	4649      	mov	r1, r9
 8006760:	f7f9 fd94 	bl	800028c <__adddf3>
 8006764:	4680      	mov	r8, r0
 8006766:	4689      	mov	r9, r1
 8006768:	2e0f      	cmp	r6, #15
 800676a:	dc38      	bgt.n	80067de <_strtod_l+0x44e>
 800676c:	9b08      	ldr	r3, [sp, #32]
 800676e:	2b00      	cmp	r3, #0
 8006770:	f43f ae49 	beq.w	8006406 <_strtod_l+0x76>
 8006774:	dd24      	ble.n	80067c0 <_strtod_l+0x430>
 8006776:	2b16      	cmp	r3, #22
 8006778:	dc0b      	bgt.n	8006792 <_strtod_l+0x402>
 800677a:	4968      	ldr	r1, [pc, #416]	; (800691c <_strtod_l+0x58c>)
 800677c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006784:	4642      	mov	r2, r8
 8006786:	464b      	mov	r3, r9
 8006788:	f7f9 ff36 	bl	80005f8 <__aeabi_dmul>
 800678c:	4680      	mov	r8, r0
 800678e:	4689      	mov	r9, r1
 8006790:	e639      	b.n	8006406 <_strtod_l+0x76>
 8006792:	9a08      	ldr	r2, [sp, #32]
 8006794:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006798:	4293      	cmp	r3, r2
 800679a:	db20      	blt.n	80067de <_strtod_l+0x44e>
 800679c:	4c5f      	ldr	r4, [pc, #380]	; (800691c <_strtod_l+0x58c>)
 800679e:	f1c6 060f 	rsb	r6, r6, #15
 80067a2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80067a6:	4642      	mov	r2, r8
 80067a8:	464b      	mov	r3, r9
 80067aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ae:	f7f9 ff23 	bl	80005f8 <__aeabi_dmul>
 80067b2:	9b08      	ldr	r3, [sp, #32]
 80067b4:	1b9e      	subs	r6, r3, r6
 80067b6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80067ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80067be:	e7e3      	b.n	8006788 <_strtod_l+0x3f8>
 80067c0:	9b08      	ldr	r3, [sp, #32]
 80067c2:	3316      	adds	r3, #22
 80067c4:	db0b      	blt.n	80067de <_strtod_l+0x44e>
 80067c6:	9b05      	ldr	r3, [sp, #20]
 80067c8:	1bdf      	subs	r7, r3, r7
 80067ca:	4b54      	ldr	r3, [pc, #336]	; (800691c <_strtod_l+0x58c>)
 80067cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80067d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d4:	4640      	mov	r0, r8
 80067d6:	4649      	mov	r1, r9
 80067d8:	f7fa f838 	bl	800084c <__aeabi_ddiv>
 80067dc:	e7d6      	b.n	800678c <_strtod_l+0x3fc>
 80067de:	9b08      	ldr	r3, [sp, #32]
 80067e0:	1b75      	subs	r5, r6, r5
 80067e2:	441d      	add	r5, r3
 80067e4:	2d00      	cmp	r5, #0
 80067e6:	dd70      	ble.n	80068ca <_strtod_l+0x53a>
 80067e8:	f015 030f 	ands.w	r3, r5, #15
 80067ec:	d00a      	beq.n	8006804 <_strtod_l+0x474>
 80067ee:	494b      	ldr	r1, [pc, #300]	; (800691c <_strtod_l+0x58c>)
 80067f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80067f4:	4642      	mov	r2, r8
 80067f6:	464b      	mov	r3, r9
 80067f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067fc:	f7f9 fefc 	bl	80005f8 <__aeabi_dmul>
 8006800:	4680      	mov	r8, r0
 8006802:	4689      	mov	r9, r1
 8006804:	f035 050f 	bics.w	r5, r5, #15
 8006808:	d04d      	beq.n	80068a6 <_strtod_l+0x516>
 800680a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800680e:	dd22      	ble.n	8006856 <_strtod_l+0x4c6>
 8006810:	2500      	movs	r5, #0
 8006812:	46ab      	mov	fp, r5
 8006814:	9509      	str	r5, [sp, #36]	; 0x24
 8006816:	9505      	str	r5, [sp, #20]
 8006818:	2322      	movs	r3, #34	; 0x22
 800681a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006924 <_strtod_l+0x594>
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	f04f 0800 	mov.w	r8, #0
 8006824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006826:	2b00      	cmp	r3, #0
 8006828:	f43f aded 	beq.w	8006406 <_strtod_l+0x76>
 800682c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800682e:	4620      	mov	r0, r4
 8006830:	f002 fd7a 	bl	8009328 <_Bfree>
 8006834:	9905      	ldr	r1, [sp, #20]
 8006836:	4620      	mov	r0, r4
 8006838:	f002 fd76 	bl	8009328 <_Bfree>
 800683c:	4659      	mov	r1, fp
 800683e:	4620      	mov	r0, r4
 8006840:	f002 fd72 	bl	8009328 <_Bfree>
 8006844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006846:	4620      	mov	r0, r4
 8006848:	f002 fd6e 	bl	8009328 <_Bfree>
 800684c:	4629      	mov	r1, r5
 800684e:	4620      	mov	r0, r4
 8006850:	f002 fd6a 	bl	8009328 <_Bfree>
 8006854:	e5d7      	b.n	8006406 <_strtod_l+0x76>
 8006856:	4b32      	ldr	r3, [pc, #200]	; (8006920 <_strtod_l+0x590>)
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	2300      	movs	r3, #0
 800685c:	112d      	asrs	r5, r5, #4
 800685e:	4640      	mov	r0, r8
 8006860:	4649      	mov	r1, r9
 8006862:	469a      	mov	sl, r3
 8006864:	2d01      	cmp	r5, #1
 8006866:	dc21      	bgt.n	80068ac <_strtod_l+0x51c>
 8006868:	b10b      	cbz	r3, 800686e <_strtod_l+0x4de>
 800686a:	4680      	mov	r8, r0
 800686c:	4689      	mov	r9, r1
 800686e:	492c      	ldr	r1, [pc, #176]	; (8006920 <_strtod_l+0x590>)
 8006870:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006874:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006880:	f7f9 feba 	bl	80005f8 <__aeabi_dmul>
 8006884:	4b27      	ldr	r3, [pc, #156]	; (8006924 <_strtod_l+0x594>)
 8006886:	460a      	mov	r2, r1
 8006888:	400b      	ands	r3, r1
 800688a:	4927      	ldr	r1, [pc, #156]	; (8006928 <_strtod_l+0x598>)
 800688c:	428b      	cmp	r3, r1
 800688e:	4680      	mov	r8, r0
 8006890:	d8be      	bhi.n	8006810 <_strtod_l+0x480>
 8006892:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006896:	428b      	cmp	r3, r1
 8006898:	bf86      	itte	hi
 800689a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800692c <_strtod_l+0x59c>
 800689e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80068a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80068a6:	2300      	movs	r3, #0
 80068a8:	9304      	str	r3, [sp, #16]
 80068aa:	e07b      	b.n	80069a4 <_strtod_l+0x614>
 80068ac:	07ea      	lsls	r2, r5, #31
 80068ae:	d505      	bpl.n	80068bc <_strtod_l+0x52c>
 80068b0:	9b04      	ldr	r3, [sp, #16]
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f7f9 fe9f 	bl	80005f8 <__aeabi_dmul>
 80068ba:	2301      	movs	r3, #1
 80068bc:	9a04      	ldr	r2, [sp, #16]
 80068be:	3208      	adds	r2, #8
 80068c0:	f10a 0a01 	add.w	sl, sl, #1
 80068c4:	106d      	asrs	r5, r5, #1
 80068c6:	9204      	str	r2, [sp, #16]
 80068c8:	e7cc      	b.n	8006864 <_strtod_l+0x4d4>
 80068ca:	d0ec      	beq.n	80068a6 <_strtod_l+0x516>
 80068cc:	426d      	negs	r5, r5
 80068ce:	f015 020f 	ands.w	r2, r5, #15
 80068d2:	d00a      	beq.n	80068ea <_strtod_l+0x55a>
 80068d4:	4b11      	ldr	r3, [pc, #68]	; (800691c <_strtod_l+0x58c>)
 80068d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068da:	4640      	mov	r0, r8
 80068dc:	4649      	mov	r1, r9
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	f7f9 ffb3 	bl	800084c <__aeabi_ddiv>
 80068e6:	4680      	mov	r8, r0
 80068e8:	4689      	mov	r9, r1
 80068ea:	112d      	asrs	r5, r5, #4
 80068ec:	d0db      	beq.n	80068a6 <_strtod_l+0x516>
 80068ee:	2d1f      	cmp	r5, #31
 80068f0:	dd1e      	ble.n	8006930 <_strtod_l+0x5a0>
 80068f2:	2500      	movs	r5, #0
 80068f4:	46ab      	mov	fp, r5
 80068f6:	9509      	str	r5, [sp, #36]	; 0x24
 80068f8:	9505      	str	r5, [sp, #20]
 80068fa:	2322      	movs	r3, #34	; 0x22
 80068fc:	f04f 0800 	mov.w	r8, #0
 8006900:	f04f 0900 	mov.w	r9, #0
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	e78d      	b.n	8006824 <_strtod_l+0x494>
 8006908:	0800a53d 	.word	0x0800a53d
 800690c:	0800a580 	.word	0x0800a580
 8006910:	0800a535 	.word	0x0800a535
 8006914:	0800a6cc 	.word	0x0800a6cc
 8006918:	0800a977 	.word	0x0800a977
 800691c:	0800a868 	.word	0x0800a868
 8006920:	0800a840 	.word	0x0800a840
 8006924:	7ff00000 	.word	0x7ff00000
 8006928:	7ca00000 	.word	0x7ca00000
 800692c:	7fefffff 	.word	0x7fefffff
 8006930:	f015 0310 	ands.w	r3, r5, #16
 8006934:	bf18      	it	ne
 8006936:	236a      	movne	r3, #106	; 0x6a
 8006938:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8006cdc <_strtod_l+0x94c>
 800693c:	9304      	str	r3, [sp, #16]
 800693e:	4640      	mov	r0, r8
 8006940:	4649      	mov	r1, r9
 8006942:	2300      	movs	r3, #0
 8006944:	07ea      	lsls	r2, r5, #31
 8006946:	d504      	bpl.n	8006952 <_strtod_l+0x5c2>
 8006948:	e9da 2300 	ldrd	r2, r3, [sl]
 800694c:	f7f9 fe54 	bl	80005f8 <__aeabi_dmul>
 8006950:	2301      	movs	r3, #1
 8006952:	106d      	asrs	r5, r5, #1
 8006954:	f10a 0a08 	add.w	sl, sl, #8
 8006958:	d1f4      	bne.n	8006944 <_strtod_l+0x5b4>
 800695a:	b10b      	cbz	r3, 8006960 <_strtod_l+0x5d0>
 800695c:	4680      	mov	r8, r0
 800695e:	4689      	mov	r9, r1
 8006960:	9b04      	ldr	r3, [sp, #16]
 8006962:	b1bb      	cbz	r3, 8006994 <_strtod_l+0x604>
 8006964:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006968:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800696c:	2b00      	cmp	r3, #0
 800696e:	4649      	mov	r1, r9
 8006970:	dd10      	ble.n	8006994 <_strtod_l+0x604>
 8006972:	2b1f      	cmp	r3, #31
 8006974:	f340 811e 	ble.w	8006bb4 <_strtod_l+0x824>
 8006978:	2b34      	cmp	r3, #52	; 0x34
 800697a:	bfde      	ittt	le
 800697c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8006980:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006984:	4093      	lslle	r3, r2
 8006986:	f04f 0800 	mov.w	r8, #0
 800698a:	bfcc      	ite	gt
 800698c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006990:	ea03 0901 	andle.w	r9, r3, r1
 8006994:	2200      	movs	r2, #0
 8006996:	2300      	movs	r3, #0
 8006998:	4640      	mov	r0, r8
 800699a:	4649      	mov	r1, r9
 800699c:	f7fa f894 	bl	8000ac8 <__aeabi_dcmpeq>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d1a6      	bne.n	80068f2 <_strtod_l+0x562>
 80069a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069aa:	4633      	mov	r3, r6
 80069ac:	465a      	mov	r2, fp
 80069ae:	4620      	mov	r0, r4
 80069b0:	f002 fd22 	bl	80093f8 <__s2b>
 80069b4:	9009      	str	r0, [sp, #36]	; 0x24
 80069b6:	2800      	cmp	r0, #0
 80069b8:	f43f af2a 	beq.w	8006810 <_strtod_l+0x480>
 80069bc:	9a08      	ldr	r2, [sp, #32]
 80069be:	9b05      	ldr	r3, [sp, #20]
 80069c0:	2a00      	cmp	r2, #0
 80069c2:	eba3 0307 	sub.w	r3, r3, r7
 80069c6:	bfa8      	it	ge
 80069c8:	2300      	movge	r3, #0
 80069ca:	930c      	str	r3, [sp, #48]	; 0x30
 80069cc:	2500      	movs	r5, #0
 80069ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80069d2:	9312      	str	r3, [sp, #72]	; 0x48
 80069d4:	46ab      	mov	fp, r5
 80069d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d8:	4620      	mov	r0, r4
 80069da:	6859      	ldr	r1, [r3, #4]
 80069dc:	f002 fc64 	bl	80092a8 <_Balloc>
 80069e0:	9005      	str	r0, [sp, #20]
 80069e2:	2800      	cmp	r0, #0
 80069e4:	f43f af18 	beq.w	8006818 <_strtod_l+0x488>
 80069e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	3202      	adds	r2, #2
 80069ee:	f103 010c 	add.w	r1, r3, #12
 80069f2:	0092      	lsls	r2, r2, #2
 80069f4:	300c      	adds	r0, #12
 80069f6:	f000 fbf3 	bl	80071e0 <memcpy>
 80069fa:	ec49 8b10 	vmov	d0, r8, r9
 80069fe:	aa18      	add	r2, sp, #96	; 0x60
 8006a00:	a917      	add	r1, sp, #92	; 0x5c
 8006a02:	4620      	mov	r0, r4
 8006a04:	f003 f82c 	bl	8009a60 <__d2b>
 8006a08:	ec49 8b18 	vmov	d8, r8, r9
 8006a0c:	9016      	str	r0, [sp, #88]	; 0x58
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	f43f af02 	beq.w	8006818 <_strtod_l+0x488>
 8006a14:	2101      	movs	r1, #1
 8006a16:	4620      	mov	r0, r4
 8006a18:	f002 fd86 	bl	8009528 <__i2b>
 8006a1c:	4683      	mov	fp, r0
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	f43f aefa 	beq.w	8006818 <_strtod_l+0x488>
 8006a24:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006a26:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006a28:	2e00      	cmp	r6, #0
 8006a2a:	bfab      	itete	ge
 8006a2c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006a2e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006a30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006a32:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006a36:	bfac      	ite	ge
 8006a38:	eb06 0a03 	addge.w	sl, r6, r3
 8006a3c:	1b9f      	sublt	r7, r3, r6
 8006a3e:	9b04      	ldr	r3, [sp, #16]
 8006a40:	1af6      	subs	r6, r6, r3
 8006a42:	4416      	add	r6, r2
 8006a44:	4ba0      	ldr	r3, [pc, #640]	; (8006cc8 <_strtod_l+0x938>)
 8006a46:	3e01      	subs	r6, #1
 8006a48:	429e      	cmp	r6, r3
 8006a4a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006a4e:	f280 80c4 	bge.w	8006bda <_strtod_l+0x84a>
 8006a52:	1b9b      	subs	r3, r3, r6
 8006a54:	2b1f      	cmp	r3, #31
 8006a56:	eba2 0203 	sub.w	r2, r2, r3
 8006a5a:	f04f 0101 	mov.w	r1, #1
 8006a5e:	f300 80b0 	bgt.w	8006bc2 <_strtod_l+0x832>
 8006a62:	fa01 f303 	lsl.w	r3, r1, r3
 8006a66:	930e      	str	r3, [sp, #56]	; 0x38
 8006a68:	2300      	movs	r3, #0
 8006a6a:	930d      	str	r3, [sp, #52]	; 0x34
 8006a6c:	eb0a 0602 	add.w	r6, sl, r2
 8006a70:	9b04      	ldr	r3, [sp, #16]
 8006a72:	45b2      	cmp	sl, r6
 8006a74:	4417      	add	r7, r2
 8006a76:	441f      	add	r7, r3
 8006a78:	4653      	mov	r3, sl
 8006a7a:	bfa8      	it	ge
 8006a7c:	4633      	movge	r3, r6
 8006a7e:	42bb      	cmp	r3, r7
 8006a80:	bfa8      	it	ge
 8006a82:	463b      	movge	r3, r7
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bfc2      	ittt	gt
 8006a88:	1af6      	subgt	r6, r6, r3
 8006a8a:	1aff      	subgt	r7, r7, r3
 8006a8c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	dd17      	ble.n	8006ac6 <_strtod_l+0x736>
 8006a96:	4659      	mov	r1, fp
 8006a98:	461a      	mov	r2, r3
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f002 fe04 	bl	80096a8 <__pow5mult>
 8006aa0:	4683      	mov	fp, r0
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	f43f aeb8 	beq.w	8006818 <_strtod_l+0x488>
 8006aa8:	4601      	mov	r1, r0
 8006aaa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006aac:	4620      	mov	r0, r4
 8006aae:	f002 fd51 	bl	8009554 <__multiply>
 8006ab2:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	f43f aeaf 	beq.w	8006818 <_strtod_l+0x488>
 8006aba:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006abc:	4620      	mov	r0, r4
 8006abe:	f002 fc33 	bl	8009328 <_Bfree>
 8006ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac4:	9316      	str	r3, [sp, #88]	; 0x58
 8006ac6:	2e00      	cmp	r6, #0
 8006ac8:	f300 808c 	bgt.w	8006be4 <_strtod_l+0x854>
 8006acc:	9b08      	ldr	r3, [sp, #32]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	dd08      	ble.n	8006ae4 <_strtod_l+0x754>
 8006ad2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ad4:	9905      	ldr	r1, [sp, #20]
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f002 fde6 	bl	80096a8 <__pow5mult>
 8006adc:	9005      	str	r0, [sp, #20]
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	f43f ae9a 	beq.w	8006818 <_strtod_l+0x488>
 8006ae4:	2f00      	cmp	r7, #0
 8006ae6:	dd08      	ble.n	8006afa <_strtod_l+0x76a>
 8006ae8:	9905      	ldr	r1, [sp, #20]
 8006aea:	463a      	mov	r2, r7
 8006aec:	4620      	mov	r0, r4
 8006aee:	f002 fe35 	bl	800975c <__lshift>
 8006af2:	9005      	str	r0, [sp, #20]
 8006af4:	2800      	cmp	r0, #0
 8006af6:	f43f ae8f 	beq.w	8006818 <_strtod_l+0x488>
 8006afa:	f1ba 0f00 	cmp.w	sl, #0
 8006afe:	dd08      	ble.n	8006b12 <_strtod_l+0x782>
 8006b00:	4659      	mov	r1, fp
 8006b02:	4652      	mov	r2, sl
 8006b04:	4620      	mov	r0, r4
 8006b06:	f002 fe29 	bl	800975c <__lshift>
 8006b0a:	4683      	mov	fp, r0
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	f43f ae83 	beq.w	8006818 <_strtod_l+0x488>
 8006b12:	9a05      	ldr	r2, [sp, #20]
 8006b14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006b16:	4620      	mov	r0, r4
 8006b18:	f002 fea8 	bl	800986c <__mdiff>
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f43f ae7a 	beq.w	8006818 <_strtod_l+0x488>
 8006b24:	68c3      	ldr	r3, [r0, #12]
 8006b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60c3      	str	r3, [r0, #12]
 8006b2c:	4659      	mov	r1, fp
 8006b2e:	f002 fe81 	bl	8009834 <__mcmp>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	da60      	bge.n	8006bf8 <_strtod_l+0x868>
 8006b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b38:	ea53 0308 	orrs.w	r3, r3, r8
 8006b3c:	f040 8084 	bne.w	8006c48 <_strtod_l+0x8b8>
 8006b40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d17f      	bne.n	8006c48 <_strtod_l+0x8b8>
 8006b48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b4c:	0d1b      	lsrs	r3, r3, #20
 8006b4e:	051b      	lsls	r3, r3, #20
 8006b50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006b54:	d978      	bls.n	8006c48 <_strtod_l+0x8b8>
 8006b56:	696b      	ldr	r3, [r5, #20]
 8006b58:	b913      	cbnz	r3, 8006b60 <_strtod_l+0x7d0>
 8006b5a:	692b      	ldr	r3, [r5, #16]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	dd73      	ble.n	8006c48 <_strtod_l+0x8b8>
 8006b60:	4629      	mov	r1, r5
 8006b62:	2201      	movs	r2, #1
 8006b64:	4620      	mov	r0, r4
 8006b66:	f002 fdf9 	bl	800975c <__lshift>
 8006b6a:	4659      	mov	r1, fp
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	f002 fe61 	bl	8009834 <__mcmp>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	dd68      	ble.n	8006c48 <_strtod_l+0x8b8>
 8006b76:	9904      	ldr	r1, [sp, #16]
 8006b78:	4a54      	ldr	r2, [pc, #336]	; (8006ccc <_strtod_l+0x93c>)
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	2900      	cmp	r1, #0
 8006b7e:	f000 8084 	beq.w	8006c8a <_strtod_l+0x8fa>
 8006b82:	ea02 0109 	and.w	r1, r2, r9
 8006b86:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006b8a:	dc7e      	bgt.n	8006c8a <_strtod_l+0x8fa>
 8006b8c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006b90:	f77f aeb3 	ble.w	80068fa <_strtod_l+0x56a>
 8006b94:	4b4e      	ldr	r3, [pc, #312]	; (8006cd0 <_strtod_l+0x940>)
 8006b96:	4640      	mov	r0, r8
 8006b98:	4649      	mov	r1, r9
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f7f9 fd2c 	bl	80005f8 <__aeabi_dmul>
 8006ba0:	4b4a      	ldr	r3, [pc, #296]	; (8006ccc <_strtod_l+0x93c>)
 8006ba2:	400b      	ands	r3, r1
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	4689      	mov	r9, r1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f47f ae3f 	bne.w	800682c <_strtod_l+0x49c>
 8006bae:	2322      	movs	r3, #34	; 0x22
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	e63b      	b.n	800682c <_strtod_l+0x49c>
 8006bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbc:	ea03 0808 	and.w	r8, r3, r8
 8006bc0:	e6e8      	b.n	8006994 <_strtod_l+0x604>
 8006bc2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006bc6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006bca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006bce:	36e2      	adds	r6, #226	; 0xe2
 8006bd0:	fa01 f306 	lsl.w	r3, r1, r6
 8006bd4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006bd8:	e748      	b.n	8006a6c <_strtod_l+0x6dc>
 8006bda:	2100      	movs	r1, #0
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8006be2:	e743      	b.n	8006a6c <_strtod_l+0x6dc>
 8006be4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006be6:	4632      	mov	r2, r6
 8006be8:	4620      	mov	r0, r4
 8006bea:	f002 fdb7 	bl	800975c <__lshift>
 8006bee:	9016      	str	r0, [sp, #88]	; 0x58
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	f47f af6b 	bne.w	8006acc <_strtod_l+0x73c>
 8006bf6:	e60f      	b.n	8006818 <_strtod_l+0x488>
 8006bf8:	46ca      	mov	sl, r9
 8006bfa:	d171      	bne.n	8006ce0 <_strtod_l+0x950>
 8006bfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bfe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c02:	b352      	cbz	r2, 8006c5a <_strtod_l+0x8ca>
 8006c04:	4a33      	ldr	r2, [pc, #204]	; (8006cd4 <_strtod_l+0x944>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d12a      	bne.n	8006c60 <_strtod_l+0x8d0>
 8006c0a:	9b04      	ldr	r3, [sp, #16]
 8006c0c:	4641      	mov	r1, r8
 8006c0e:	b1fb      	cbz	r3, 8006c50 <_strtod_l+0x8c0>
 8006c10:	4b2e      	ldr	r3, [pc, #184]	; (8006ccc <_strtod_l+0x93c>)
 8006c12:	ea09 0303 	and.w	r3, r9, r3
 8006c16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c1e:	d81a      	bhi.n	8006c56 <_strtod_l+0x8c6>
 8006c20:	0d1b      	lsrs	r3, r3, #20
 8006c22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	4299      	cmp	r1, r3
 8006c2c:	d118      	bne.n	8006c60 <_strtod_l+0x8d0>
 8006c2e:	4b2a      	ldr	r3, [pc, #168]	; (8006cd8 <_strtod_l+0x948>)
 8006c30:	459a      	cmp	sl, r3
 8006c32:	d102      	bne.n	8006c3a <_strtod_l+0x8aa>
 8006c34:	3101      	adds	r1, #1
 8006c36:	f43f adef 	beq.w	8006818 <_strtod_l+0x488>
 8006c3a:	4b24      	ldr	r3, [pc, #144]	; (8006ccc <_strtod_l+0x93c>)
 8006c3c:	ea0a 0303 	and.w	r3, sl, r3
 8006c40:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006c44:	f04f 0800 	mov.w	r8, #0
 8006c48:	9b04      	ldr	r3, [sp, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1a2      	bne.n	8006b94 <_strtod_l+0x804>
 8006c4e:	e5ed      	b.n	800682c <_strtod_l+0x49c>
 8006c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c54:	e7e9      	b.n	8006c2a <_strtod_l+0x89a>
 8006c56:	4613      	mov	r3, r2
 8006c58:	e7e7      	b.n	8006c2a <_strtod_l+0x89a>
 8006c5a:	ea53 0308 	orrs.w	r3, r3, r8
 8006c5e:	d08a      	beq.n	8006b76 <_strtod_l+0x7e6>
 8006c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c62:	b1e3      	cbz	r3, 8006c9e <_strtod_l+0x90e>
 8006c64:	ea13 0f0a 	tst.w	r3, sl
 8006c68:	d0ee      	beq.n	8006c48 <_strtod_l+0x8b8>
 8006c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c6c:	9a04      	ldr	r2, [sp, #16]
 8006c6e:	4640      	mov	r0, r8
 8006c70:	4649      	mov	r1, r9
 8006c72:	b1c3      	cbz	r3, 8006ca6 <_strtod_l+0x916>
 8006c74:	f7ff fb70 	bl	8006358 <sulp>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	ec51 0b18 	vmov	r0, r1, d8
 8006c80:	f7f9 fb04 	bl	800028c <__adddf3>
 8006c84:	4680      	mov	r8, r0
 8006c86:	4689      	mov	r9, r1
 8006c88:	e7de      	b.n	8006c48 <_strtod_l+0x8b8>
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006c90:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006c94:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006c98:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006c9c:	e7d4      	b.n	8006c48 <_strtod_l+0x8b8>
 8006c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ca0:	ea13 0f08 	tst.w	r3, r8
 8006ca4:	e7e0      	b.n	8006c68 <_strtod_l+0x8d8>
 8006ca6:	f7ff fb57 	bl	8006358 <sulp>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	ec51 0b18 	vmov	r0, r1, d8
 8006cb2:	f7f9 fae9 	bl	8000288 <__aeabi_dsub>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4680      	mov	r8, r0
 8006cbc:	4689      	mov	r9, r1
 8006cbe:	f7f9 ff03 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d0c0      	beq.n	8006c48 <_strtod_l+0x8b8>
 8006cc6:	e618      	b.n	80068fa <_strtod_l+0x56a>
 8006cc8:	fffffc02 	.word	0xfffffc02
 8006ccc:	7ff00000 	.word	0x7ff00000
 8006cd0:	39500000 	.word	0x39500000
 8006cd4:	000fffff 	.word	0x000fffff
 8006cd8:	7fefffff 	.word	0x7fefffff
 8006cdc:	0800a598 	.word	0x0800a598
 8006ce0:	4659      	mov	r1, fp
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f002 ff16 	bl	8009b14 <__ratio>
 8006ce8:	ec57 6b10 	vmov	r6, r7, d0
 8006cec:	ee10 0a10 	vmov	r0, s0
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	f7f9 fefa 	bl	8000af0 <__aeabi_dcmple>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d071      	beq.n	8006de4 <_strtod_l+0xa54>
 8006d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d17c      	bne.n	8006e00 <_strtod_l+0xa70>
 8006d06:	f1b8 0f00 	cmp.w	r8, #0
 8006d0a:	d15a      	bne.n	8006dc2 <_strtod_l+0xa32>
 8006d0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d15d      	bne.n	8006dd0 <_strtod_l+0xa40>
 8006d14:	4b90      	ldr	r3, [pc, #576]	; (8006f58 <_strtod_l+0xbc8>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	4630      	mov	r0, r6
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	f7f9 fede 	bl	8000adc <__aeabi_dcmplt>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d15c      	bne.n	8006dde <_strtod_l+0xa4e>
 8006d24:	4630      	mov	r0, r6
 8006d26:	4639      	mov	r1, r7
 8006d28:	4b8c      	ldr	r3, [pc, #560]	; (8006f5c <_strtod_l+0xbcc>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f7f9 fc64 	bl	80005f8 <__aeabi_dmul>
 8006d30:	4606      	mov	r6, r0
 8006d32:	460f      	mov	r7, r1
 8006d34:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006d38:	9606      	str	r6, [sp, #24]
 8006d3a:	9307      	str	r3, [sp, #28]
 8006d3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006d44:	4b86      	ldr	r3, [pc, #536]	; (8006f60 <_strtod_l+0xbd0>)
 8006d46:	ea0a 0303 	and.w	r3, sl, r3
 8006d4a:	930d      	str	r3, [sp, #52]	; 0x34
 8006d4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d4e:	4b85      	ldr	r3, [pc, #532]	; (8006f64 <_strtod_l+0xbd4>)
 8006d50:	429a      	cmp	r2, r3
 8006d52:	f040 8090 	bne.w	8006e76 <_strtod_l+0xae6>
 8006d56:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006d5a:	ec49 8b10 	vmov	d0, r8, r9
 8006d5e:	f002 fe0f 	bl	8009980 <__ulp>
 8006d62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d66:	ec51 0b10 	vmov	r0, r1, d0
 8006d6a:	f7f9 fc45 	bl	80005f8 <__aeabi_dmul>
 8006d6e:	4642      	mov	r2, r8
 8006d70:	464b      	mov	r3, r9
 8006d72:	f7f9 fa8b 	bl	800028c <__adddf3>
 8006d76:	460b      	mov	r3, r1
 8006d78:	4979      	ldr	r1, [pc, #484]	; (8006f60 <_strtod_l+0xbd0>)
 8006d7a:	4a7b      	ldr	r2, [pc, #492]	; (8006f68 <_strtod_l+0xbd8>)
 8006d7c:	4019      	ands	r1, r3
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	4680      	mov	r8, r0
 8006d82:	d944      	bls.n	8006e0e <_strtod_l+0xa7e>
 8006d84:	ee18 2a90 	vmov	r2, s17
 8006d88:	4b78      	ldr	r3, [pc, #480]	; (8006f6c <_strtod_l+0xbdc>)
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d104      	bne.n	8006d98 <_strtod_l+0xa08>
 8006d8e:	ee18 3a10 	vmov	r3, s16
 8006d92:	3301      	adds	r3, #1
 8006d94:	f43f ad40 	beq.w	8006818 <_strtod_l+0x488>
 8006d98:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8006f6c <_strtod_l+0xbdc>
 8006d9c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006da0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006da2:	4620      	mov	r0, r4
 8006da4:	f002 fac0 	bl	8009328 <_Bfree>
 8006da8:	9905      	ldr	r1, [sp, #20]
 8006daa:	4620      	mov	r0, r4
 8006dac:	f002 fabc 	bl	8009328 <_Bfree>
 8006db0:	4659      	mov	r1, fp
 8006db2:	4620      	mov	r0, r4
 8006db4:	f002 fab8 	bl	8009328 <_Bfree>
 8006db8:	4629      	mov	r1, r5
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f002 fab4 	bl	8009328 <_Bfree>
 8006dc0:	e609      	b.n	80069d6 <_strtod_l+0x646>
 8006dc2:	f1b8 0f01 	cmp.w	r8, #1
 8006dc6:	d103      	bne.n	8006dd0 <_strtod_l+0xa40>
 8006dc8:	f1b9 0f00 	cmp.w	r9, #0
 8006dcc:	f43f ad95 	beq.w	80068fa <_strtod_l+0x56a>
 8006dd0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006f28 <_strtod_l+0xb98>
 8006dd4:	4f60      	ldr	r7, [pc, #384]	; (8006f58 <_strtod_l+0xbc8>)
 8006dd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006dda:	2600      	movs	r6, #0
 8006ddc:	e7ae      	b.n	8006d3c <_strtod_l+0x9ac>
 8006dde:	4f5f      	ldr	r7, [pc, #380]	; (8006f5c <_strtod_l+0xbcc>)
 8006de0:	2600      	movs	r6, #0
 8006de2:	e7a7      	b.n	8006d34 <_strtod_l+0x9a4>
 8006de4:	4b5d      	ldr	r3, [pc, #372]	; (8006f5c <_strtod_l+0xbcc>)
 8006de6:	4630      	mov	r0, r6
 8006de8:	4639      	mov	r1, r7
 8006dea:	2200      	movs	r2, #0
 8006dec:	f7f9 fc04 	bl	80005f8 <__aeabi_dmul>
 8006df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df2:	4606      	mov	r6, r0
 8006df4:	460f      	mov	r7, r1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d09c      	beq.n	8006d34 <_strtod_l+0x9a4>
 8006dfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006dfe:	e79d      	b.n	8006d3c <_strtod_l+0x9ac>
 8006e00:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006f30 <_strtod_l+0xba0>
 8006e04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e08:	ec57 6b17 	vmov	r6, r7, d7
 8006e0c:	e796      	b.n	8006d3c <_strtod_l+0x9ac>
 8006e0e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006e12:	9b04      	ldr	r3, [sp, #16]
 8006e14:	46ca      	mov	sl, r9
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1c2      	bne.n	8006da0 <_strtod_l+0xa10>
 8006e1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e20:	0d1b      	lsrs	r3, r3, #20
 8006e22:	051b      	lsls	r3, r3, #20
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d1bb      	bne.n	8006da0 <_strtod_l+0xa10>
 8006e28:	4630      	mov	r0, r6
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	f7f9 ff44 	bl	8000cb8 <__aeabi_d2lz>
 8006e30:	f7f9 fbb4 	bl	800059c <__aeabi_l2d>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4630      	mov	r0, r6
 8006e3a:	4639      	mov	r1, r7
 8006e3c:	f7f9 fa24 	bl	8000288 <__aeabi_dsub>
 8006e40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e46:	ea43 0308 	orr.w	r3, r3, r8
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	460f      	mov	r7, r1
 8006e50:	d054      	beq.n	8006efc <_strtod_l+0xb6c>
 8006e52:	a339      	add	r3, pc, #228	; (adr r3, 8006f38 <_strtod_l+0xba8>)
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f7f9 fe40 	bl	8000adc <__aeabi_dcmplt>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	f47f ace5 	bne.w	800682c <_strtod_l+0x49c>
 8006e62:	a337      	add	r3, pc, #220	; (adr r3, 8006f40 <_strtod_l+0xbb0>)
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 fe54 	bl	8000b18 <__aeabi_dcmpgt>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d095      	beq.n	8006da0 <_strtod_l+0xa10>
 8006e74:	e4da      	b.n	800682c <_strtod_l+0x49c>
 8006e76:	9b04      	ldr	r3, [sp, #16]
 8006e78:	b333      	cbz	r3, 8006ec8 <_strtod_l+0xb38>
 8006e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e80:	d822      	bhi.n	8006ec8 <_strtod_l+0xb38>
 8006e82:	a331      	add	r3, pc, #196	; (adr r3, 8006f48 <_strtod_l+0xbb8>)
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f7f9 fe30 	bl	8000af0 <__aeabi_dcmple>
 8006e90:	b1a0      	cbz	r0, 8006ebc <_strtod_l+0xb2c>
 8006e92:	4639      	mov	r1, r7
 8006e94:	4630      	mov	r0, r6
 8006e96:	f7f9 fe87 	bl	8000ba8 <__aeabi_d2uiz>
 8006e9a:	2801      	cmp	r0, #1
 8006e9c:	bf38      	it	cc
 8006e9e:	2001      	movcc	r0, #1
 8006ea0:	f7f9 fb30 	bl	8000504 <__aeabi_ui2d>
 8006ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	460f      	mov	r7, r1
 8006eaa:	bb23      	cbnz	r3, 8006ef6 <_strtod_l+0xb66>
 8006eac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006eb0:	9010      	str	r0, [sp, #64]	; 0x40
 8006eb2:	9311      	str	r3, [sp, #68]	; 0x44
 8006eb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006eb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006ebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ebe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ec0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ec8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006ecc:	eeb0 0a48 	vmov.f32	s0, s16
 8006ed0:	eef0 0a68 	vmov.f32	s1, s17
 8006ed4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006ed8:	f002 fd52 	bl	8009980 <__ulp>
 8006edc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006ee0:	ec53 2b10 	vmov	r2, r3, d0
 8006ee4:	f7f9 fb88 	bl	80005f8 <__aeabi_dmul>
 8006ee8:	ec53 2b18 	vmov	r2, r3, d8
 8006eec:	f7f9 f9ce 	bl	800028c <__adddf3>
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	4689      	mov	r9, r1
 8006ef4:	e78d      	b.n	8006e12 <_strtod_l+0xa82>
 8006ef6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006efa:	e7db      	b.n	8006eb4 <_strtod_l+0xb24>
 8006efc:	a314      	add	r3, pc, #80	; (adr r3, 8006f50 <_strtod_l+0xbc0>)
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	f7f9 fdeb 	bl	8000adc <__aeabi_dcmplt>
 8006f06:	e7b3      	b.n	8006e70 <_strtod_l+0xae0>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	f7ff ba7c 	b.w	800640e <_strtod_l+0x7e>
 8006f16:	2a65      	cmp	r2, #101	; 0x65
 8006f18:	f43f ab75 	beq.w	8006606 <_strtod_l+0x276>
 8006f1c:	2a45      	cmp	r2, #69	; 0x45
 8006f1e:	f43f ab72 	beq.w	8006606 <_strtod_l+0x276>
 8006f22:	2301      	movs	r3, #1
 8006f24:	f7ff bbaa 	b.w	800667c <_strtod_l+0x2ec>
 8006f28:	00000000 	.word	0x00000000
 8006f2c:	bff00000 	.word	0xbff00000
 8006f30:	00000000 	.word	0x00000000
 8006f34:	3ff00000 	.word	0x3ff00000
 8006f38:	94a03595 	.word	0x94a03595
 8006f3c:	3fdfffff 	.word	0x3fdfffff
 8006f40:	35afe535 	.word	0x35afe535
 8006f44:	3fe00000 	.word	0x3fe00000
 8006f48:	ffc00000 	.word	0xffc00000
 8006f4c:	41dfffff 	.word	0x41dfffff
 8006f50:	94a03595 	.word	0x94a03595
 8006f54:	3fcfffff 	.word	0x3fcfffff
 8006f58:	3ff00000 	.word	0x3ff00000
 8006f5c:	3fe00000 	.word	0x3fe00000
 8006f60:	7ff00000 	.word	0x7ff00000
 8006f64:	7fe00000 	.word	0x7fe00000
 8006f68:	7c9fffff 	.word	0x7c9fffff
 8006f6c:	7fefffff 	.word	0x7fefffff

08006f70 <_strtod_r>:
 8006f70:	4b01      	ldr	r3, [pc, #4]	; (8006f78 <_strtod_r+0x8>)
 8006f72:	f7ff ba0d 	b.w	8006390 <_strtod_l>
 8006f76:	bf00      	nop
 8006f78:	20000018 	.word	0x20000018

08006f7c <_strtol_l.constprop.0>:
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f82:	d001      	beq.n	8006f88 <_strtol_l.constprop.0+0xc>
 8006f84:	2b24      	cmp	r3, #36	; 0x24
 8006f86:	d906      	bls.n	8006f96 <_strtol_l.constprop.0+0x1a>
 8006f88:	f000 f8fe 	bl	8007188 <__errno>
 8006f8c:	2316      	movs	r3, #22
 8006f8e:	6003      	str	r3, [r0, #0]
 8006f90:	2000      	movs	r0, #0
 8006f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800707c <_strtol_l.constprop.0+0x100>
 8006f9a:	460d      	mov	r5, r1
 8006f9c:	462e      	mov	r6, r5
 8006f9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fa2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006fa6:	f017 0708 	ands.w	r7, r7, #8
 8006faa:	d1f7      	bne.n	8006f9c <_strtol_l.constprop.0+0x20>
 8006fac:	2c2d      	cmp	r4, #45	; 0x2d
 8006fae:	d132      	bne.n	8007016 <_strtol_l.constprop.0+0x9a>
 8006fb0:	782c      	ldrb	r4, [r5, #0]
 8006fb2:	2701      	movs	r7, #1
 8006fb4:	1cb5      	adds	r5, r6, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d05b      	beq.n	8007072 <_strtol_l.constprop.0+0xf6>
 8006fba:	2b10      	cmp	r3, #16
 8006fbc:	d109      	bne.n	8006fd2 <_strtol_l.constprop.0+0x56>
 8006fbe:	2c30      	cmp	r4, #48	; 0x30
 8006fc0:	d107      	bne.n	8006fd2 <_strtol_l.constprop.0+0x56>
 8006fc2:	782c      	ldrb	r4, [r5, #0]
 8006fc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006fc8:	2c58      	cmp	r4, #88	; 0x58
 8006fca:	d14d      	bne.n	8007068 <_strtol_l.constprop.0+0xec>
 8006fcc:	786c      	ldrb	r4, [r5, #1]
 8006fce:	2310      	movs	r3, #16
 8006fd0:	3502      	adds	r5, #2
 8006fd2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006fd6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006fda:	f04f 0e00 	mov.w	lr, #0
 8006fde:	fbb8 f9f3 	udiv	r9, r8, r3
 8006fe2:	4676      	mov	r6, lr
 8006fe4:	fb03 8a19 	mls	sl, r3, r9, r8
 8006fe8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006fec:	f1bc 0f09 	cmp.w	ip, #9
 8006ff0:	d816      	bhi.n	8007020 <_strtol_l.constprop.0+0xa4>
 8006ff2:	4664      	mov	r4, ip
 8006ff4:	42a3      	cmp	r3, r4
 8006ff6:	dd24      	ble.n	8007042 <_strtol_l.constprop.0+0xc6>
 8006ff8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8006ffc:	d008      	beq.n	8007010 <_strtol_l.constprop.0+0x94>
 8006ffe:	45b1      	cmp	r9, r6
 8007000:	d31c      	bcc.n	800703c <_strtol_l.constprop.0+0xc0>
 8007002:	d101      	bne.n	8007008 <_strtol_l.constprop.0+0x8c>
 8007004:	45a2      	cmp	sl, r4
 8007006:	db19      	blt.n	800703c <_strtol_l.constprop.0+0xc0>
 8007008:	fb06 4603 	mla	r6, r6, r3, r4
 800700c:	f04f 0e01 	mov.w	lr, #1
 8007010:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007014:	e7e8      	b.n	8006fe8 <_strtol_l.constprop.0+0x6c>
 8007016:	2c2b      	cmp	r4, #43	; 0x2b
 8007018:	bf04      	itt	eq
 800701a:	782c      	ldrbeq	r4, [r5, #0]
 800701c:	1cb5      	addeq	r5, r6, #2
 800701e:	e7ca      	b.n	8006fb6 <_strtol_l.constprop.0+0x3a>
 8007020:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007024:	f1bc 0f19 	cmp.w	ip, #25
 8007028:	d801      	bhi.n	800702e <_strtol_l.constprop.0+0xb2>
 800702a:	3c37      	subs	r4, #55	; 0x37
 800702c:	e7e2      	b.n	8006ff4 <_strtol_l.constprop.0+0x78>
 800702e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007032:	f1bc 0f19 	cmp.w	ip, #25
 8007036:	d804      	bhi.n	8007042 <_strtol_l.constprop.0+0xc6>
 8007038:	3c57      	subs	r4, #87	; 0x57
 800703a:	e7db      	b.n	8006ff4 <_strtol_l.constprop.0+0x78>
 800703c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8007040:	e7e6      	b.n	8007010 <_strtol_l.constprop.0+0x94>
 8007042:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8007046:	d105      	bne.n	8007054 <_strtol_l.constprop.0+0xd8>
 8007048:	2322      	movs	r3, #34	; 0x22
 800704a:	6003      	str	r3, [r0, #0]
 800704c:	4646      	mov	r6, r8
 800704e:	b942      	cbnz	r2, 8007062 <_strtol_l.constprop.0+0xe6>
 8007050:	4630      	mov	r0, r6
 8007052:	e79e      	b.n	8006f92 <_strtol_l.constprop.0+0x16>
 8007054:	b107      	cbz	r7, 8007058 <_strtol_l.constprop.0+0xdc>
 8007056:	4276      	negs	r6, r6
 8007058:	2a00      	cmp	r2, #0
 800705a:	d0f9      	beq.n	8007050 <_strtol_l.constprop.0+0xd4>
 800705c:	f1be 0f00 	cmp.w	lr, #0
 8007060:	d000      	beq.n	8007064 <_strtol_l.constprop.0+0xe8>
 8007062:	1e69      	subs	r1, r5, #1
 8007064:	6011      	str	r1, [r2, #0]
 8007066:	e7f3      	b.n	8007050 <_strtol_l.constprop.0+0xd4>
 8007068:	2430      	movs	r4, #48	; 0x30
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1b1      	bne.n	8006fd2 <_strtol_l.constprop.0+0x56>
 800706e:	2308      	movs	r3, #8
 8007070:	e7af      	b.n	8006fd2 <_strtol_l.constprop.0+0x56>
 8007072:	2c30      	cmp	r4, #48	; 0x30
 8007074:	d0a5      	beq.n	8006fc2 <_strtol_l.constprop.0+0x46>
 8007076:	230a      	movs	r3, #10
 8007078:	e7ab      	b.n	8006fd2 <_strtol_l.constprop.0+0x56>
 800707a:	bf00      	nop
 800707c:	0800a5c9 	.word	0x0800a5c9

08007080 <_strtol_r>:
 8007080:	f7ff bf7c 	b.w	8006f7c <_strtol_l.constprop.0>

08007084 <_fwalk_sglue>:
 8007084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007088:	4607      	mov	r7, r0
 800708a:	4688      	mov	r8, r1
 800708c:	4614      	mov	r4, r2
 800708e:	2600      	movs	r6, #0
 8007090:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007094:	f1b9 0901 	subs.w	r9, r9, #1
 8007098:	d505      	bpl.n	80070a6 <_fwalk_sglue+0x22>
 800709a:	6824      	ldr	r4, [r4, #0]
 800709c:	2c00      	cmp	r4, #0
 800709e:	d1f7      	bne.n	8007090 <_fwalk_sglue+0xc>
 80070a0:	4630      	mov	r0, r6
 80070a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a6:	89ab      	ldrh	r3, [r5, #12]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d907      	bls.n	80070bc <_fwalk_sglue+0x38>
 80070ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070b0:	3301      	adds	r3, #1
 80070b2:	d003      	beq.n	80070bc <_fwalk_sglue+0x38>
 80070b4:	4629      	mov	r1, r5
 80070b6:	4638      	mov	r0, r7
 80070b8:	47c0      	blx	r8
 80070ba:	4306      	orrs	r6, r0
 80070bc:	3568      	adds	r5, #104	; 0x68
 80070be:	e7e9      	b.n	8007094 <_fwalk_sglue+0x10>

080070c0 <strncmp>:
 80070c0:	b510      	push	{r4, lr}
 80070c2:	b16a      	cbz	r2, 80070e0 <strncmp+0x20>
 80070c4:	3901      	subs	r1, #1
 80070c6:	1884      	adds	r4, r0, r2
 80070c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d103      	bne.n	80070dc <strncmp+0x1c>
 80070d4:	42a0      	cmp	r0, r4
 80070d6:	d001      	beq.n	80070dc <strncmp+0x1c>
 80070d8:	2a00      	cmp	r2, #0
 80070da:	d1f5      	bne.n	80070c8 <strncmp+0x8>
 80070dc:	1ad0      	subs	r0, r2, r3
 80070de:	bd10      	pop	{r4, pc}
 80070e0:	4610      	mov	r0, r2
 80070e2:	e7fc      	b.n	80070de <strncmp+0x1e>

080070e4 <memset>:
 80070e4:	4402      	add	r2, r0
 80070e6:	4603      	mov	r3, r0
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d100      	bne.n	80070ee <memset+0xa>
 80070ec:	4770      	bx	lr
 80070ee:	f803 1b01 	strb.w	r1, [r3], #1
 80070f2:	e7f9      	b.n	80070e8 <memset+0x4>

080070f4 <_localeconv_r>:
 80070f4:	4800      	ldr	r0, [pc, #0]	; (80070f8 <_localeconv_r+0x4>)
 80070f6:	4770      	bx	lr
 80070f8:	20000108 	.word	0x20000108

080070fc <_close_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4d06      	ldr	r5, [pc, #24]	; (8007118 <_close_r+0x1c>)
 8007100:	2300      	movs	r3, #0
 8007102:	4604      	mov	r4, r0
 8007104:	4608      	mov	r0, r1
 8007106:	602b      	str	r3, [r5, #0]
 8007108:	f7fb f8c3 	bl	8002292 <_close>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_close_r+0x1a>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_close_r+0x1a>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20000658 	.word	0x20000658

0800711c <_lseek_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d07      	ldr	r5, [pc, #28]	; (800713c <_lseek_r+0x20>)
 8007120:	4604      	mov	r4, r0
 8007122:	4608      	mov	r0, r1
 8007124:	4611      	mov	r1, r2
 8007126:	2200      	movs	r2, #0
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f7fb f8d8 	bl	80022e0 <_lseek>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_lseek_r+0x1e>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_lseek_r+0x1e>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	20000658 	.word	0x20000658

08007140 <_read_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4d07      	ldr	r5, [pc, #28]	; (8007160 <_read_r+0x20>)
 8007144:	4604      	mov	r4, r0
 8007146:	4608      	mov	r0, r1
 8007148:	4611      	mov	r1, r2
 800714a:	2200      	movs	r2, #0
 800714c:	602a      	str	r2, [r5, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	f7fb f866 	bl	8002220 <_read>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d102      	bne.n	800715e <_read_r+0x1e>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	b103      	cbz	r3, 800715e <_read_r+0x1e>
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	bd38      	pop	{r3, r4, r5, pc}
 8007160:	20000658 	.word	0x20000658

08007164 <_write_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d07      	ldr	r5, [pc, #28]	; (8007184 <_write_r+0x20>)
 8007168:	4604      	mov	r4, r0
 800716a:	4608      	mov	r0, r1
 800716c:	4611      	mov	r1, r2
 800716e:	2200      	movs	r2, #0
 8007170:	602a      	str	r2, [r5, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	f7fb f871 	bl	800225a <_write>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d102      	bne.n	8007182 <_write_r+0x1e>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	b103      	cbz	r3, 8007182 <_write_r+0x1e>
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	20000658 	.word	0x20000658

08007188 <__errno>:
 8007188:	4b01      	ldr	r3, [pc, #4]	; (8007190 <__errno+0x8>)
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	200001d0 	.word	0x200001d0

08007194 <__libc_init_array>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	4d0d      	ldr	r5, [pc, #52]	; (80071cc <__libc_init_array+0x38>)
 8007198:	4c0d      	ldr	r4, [pc, #52]	; (80071d0 <__libc_init_array+0x3c>)
 800719a:	1b64      	subs	r4, r4, r5
 800719c:	10a4      	asrs	r4, r4, #2
 800719e:	2600      	movs	r6, #0
 80071a0:	42a6      	cmp	r6, r4
 80071a2:	d109      	bne.n	80071b8 <__libc_init_array+0x24>
 80071a4:	4d0b      	ldr	r5, [pc, #44]	; (80071d4 <__libc_init_array+0x40>)
 80071a6:	4c0c      	ldr	r4, [pc, #48]	; (80071d8 <__libc_init_array+0x44>)
 80071a8:	f003 f936 	bl	800a418 <_init>
 80071ac:	1b64      	subs	r4, r4, r5
 80071ae:	10a4      	asrs	r4, r4, #2
 80071b0:	2600      	movs	r6, #0
 80071b2:	42a6      	cmp	r6, r4
 80071b4:	d105      	bne.n	80071c2 <__libc_init_array+0x2e>
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071bc:	4798      	blx	r3
 80071be:	3601      	adds	r6, #1
 80071c0:	e7ee      	b.n	80071a0 <__libc_init_array+0xc>
 80071c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c6:	4798      	blx	r3
 80071c8:	3601      	adds	r6, #1
 80071ca:	e7f2      	b.n	80071b2 <__libc_init_array+0x1e>
 80071cc:	0800a980 	.word	0x0800a980
 80071d0:	0800a980 	.word	0x0800a980
 80071d4:	0800a980 	.word	0x0800a980
 80071d8:	0800a984 	.word	0x0800a984

080071dc <__retarget_lock_acquire_recursive>:
 80071dc:	4770      	bx	lr

080071de <__retarget_lock_release_recursive>:
 80071de:	4770      	bx	lr

080071e0 <memcpy>:
 80071e0:	440a      	add	r2, r1
 80071e2:	4291      	cmp	r1, r2
 80071e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80071e8:	d100      	bne.n	80071ec <memcpy+0xc>
 80071ea:	4770      	bx	lr
 80071ec:	b510      	push	{r4, lr}
 80071ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071f6:	4291      	cmp	r1, r2
 80071f8:	d1f9      	bne.n	80071ee <memcpy+0xe>
 80071fa:	bd10      	pop	{r4, pc}
 80071fc:	0000      	movs	r0, r0
	...

08007200 <nan>:
 8007200:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007208 <nan+0x8>
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	00000000 	.word	0x00000000
 800720c:	7ff80000 	.word	0x7ff80000

08007210 <nanf>:
 8007210:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007218 <nanf+0x8>
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	7fc00000 	.word	0x7fc00000

0800721c <quorem>:
 800721c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	6903      	ldr	r3, [r0, #16]
 8007222:	690c      	ldr	r4, [r1, #16]
 8007224:	42a3      	cmp	r3, r4
 8007226:	4607      	mov	r7, r0
 8007228:	db7e      	blt.n	8007328 <quorem+0x10c>
 800722a:	3c01      	subs	r4, #1
 800722c:	f101 0814 	add.w	r8, r1, #20
 8007230:	f100 0514 	add.w	r5, r0, #20
 8007234:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800723e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007242:	3301      	adds	r3, #1
 8007244:	429a      	cmp	r2, r3
 8007246:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800724a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800724e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007252:	d331      	bcc.n	80072b8 <quorem+0x9c>
 8007254:	f04f 0e00 	mov.w	lr, #0
 8007258:	4640      	mov	r0, r8
 800725a:	46ac      	mov	ip, r5
 800725c:	46f2      	mov	sl, lr
 800725e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007262:	b293      	uxth	r3, r2
 8007264:	fb06 e303 	mla	r3, r6, r3, lr
 8007268:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800726c:	0c1a      	lsrs	r2, r3, #16
 800726e:	b29b      	uxth	r3, r3
 8007270:	ebaa 0303 	sub.w	r3, sl, r3
 8007274:	f8dc a000 	ldr.w	sl, [ip]
 8007278:	fa13 f38a 	uxtah	r3, r3, sl
 800727c:	fb06 220e 	mla	r2, r6, lr, r2
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	9b00      	ldr	r3, [sp, #0]
 8007284:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007288:	b292      	uxth	r2, r2
 800728a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800728e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007292:	f8bd 3000 	ldrh.w	r3, [sp]
 8007296:	4581      	cmp	r9, r0
 8007298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800729c:	f84c 3b04 	str.w	r3, [ip], #4
 80072a0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072a4:	d2db      	bcs.n	800725e <quorem+0x42>
 80072a6:	f855 300b 	ldr.w	r3, [r5, fp]
 80072aa:	b92b      	cbnz	r3, 80072b8 <quorem+0x9c>
 80072ac:	9b01      	ldr	r3, [sp, #4]
 80072ae:	3b04      	subs	r3, #4
 80072b0:	429d      	cmp	r5, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	d32c      	bcc.n	8007310 <quorem+0xf4>
 80072b6:	613c      	str	r4, [r7, #16]
 80072b8:	4638      	mov	r0, r7
 80072ba:	f002 fabb 	bl	8009834 <__mcmp>
 80072be:	2800      	cmp	r0, #0
 80072c0:	db22      	blt.n	8007308 <quorem+0xec>
 80072c2:	3601      	adds	r6, #1
 80072c4:	4629      	mov	r1, r5
 80072c6:	2000      	movs	r0, #0
 80072c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80072cc:	f8d1 c000 	ldr.w	ip, [r1]
 80072d0:	b293      	uxth	r3, r2
 80072d2:	1ac3      	subs	r3, r0, r3
 80072d4:	0c12      	lsrs	r2, r2, #16
 80072d6:	fa13 f38c 	uxtah	r3, r3, ip
 80072da:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80072de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072e8:	45c1      	cmp	r9, r8
 80072ea:	f841 3b04 	str.w	r3, [r1], #4
 80072ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072f2:	d2e9      	bcs.n	80072c8 <quorem+0xac>
 80072f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072fc:	b922      	cbnz	r2, 8007308 <quorem+0xec>
 80072fe:	3b04      	subs	r3, #4
 8007300:	429d      	cmp	r5, r3
 8007302:	461a      	mov	r2, r3
 8007304:	d30a      	bcc.n	800731c <quorem+0x100>
 8007306:	613c      	str	r4, [r7, #16]
 8007308:	4630      	mov	r0, r6
 800730a:	b003      	add	sp, #12
 800730c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007310:	6812      	ldr	r2, [r2, #0]
 8007312:	3b04      	subs	r3, #4
 8007314:	2a00      	cmp	r2, #0
 8007316:	d1ce      	bne.n	80072b6 <quorem+0x9a>
 8007318:	3c01      	subs	r4, #1
 800731a:	e7c9      	b.n	80072b0 <quorem+0x94>
 800731c:	6812      	ldr	r2, [r2, #0]
 800731e:	3b04      	subs	r3, #4
 8007320:	2a00      	cmp	r2, #0
 8007322:	d1f0      	bne.n	8007306 <quorem+0xea>
 8007324:	3c01      	subs	r4, #1
 8007326:	e7eb      	b.n	8007300 <quorem+0xe4>
 8007328:	2000      	movs	r0, #0
 800732a:	e7ee      	b.n	800730a <quorem+0xee>
 800732c:	0000      	movs	r0, r0
	...

08007330 <_dtoa_r>:
 8007330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007334:	ed2d 8b04 	vpush	{d8-d9}
 8007338:	69c5      	ldr	r5, [r0, #28]
 800733a:	b093      	sub	sp, #76	; 0x4c
 800733c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007340:	ec57 6b10 	vmov	r6, r7, d0
 8007344:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007348:	9107      	str	r1, [sp, #28]
 800734a:	4604      	mov	r4, r0
 800734c:	920a      	str	r2, [sp, #40]	; 0x28
 800734e:	930d      	str	r3, [sp, #52]	; 0x34
 8007350:	b975      	cbnz	r5, 8007370 <_dtoa_r+0x40>
 8007352:	2010      	movs	r0, #16
 8007354:	f001 fcac 	bl	8008cb0 <malloc>
 8007358:	4602      	mov	r2, r0
 800735a:	61e0      	str	r0, [r4, #28]
 800735c:	b920      	cbnz	r0, 8007368 <_dtoa_r+0x38>
 800735e:	4bae      	ldr	r3, [pc, #696]	; (8007618 <_dtoa_r+0x2e8>)
 8007360:	21ef      	movs	r1, #239	; 0xef
 8007362:	48ae      	ldr	r0, [pc, #696]	; (800761c <_dtoa_r+0x2ec>)
 8007364:	f002 fd62 	bl	8009e2c <__assert_func>
 8007368:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800736c:	6005      	str	r5, [r0, #0]
 800736e:	60c5      	str	r5, [r0, #12]
 8007370:	69e3      	ldr	r3, [r4, #28]
 8007372:	6819      	ldr	r1, [r3, #0]
 8007374:	b151      	cbz	r1, 800738c <_dtoa_r+0x5c>
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	604a      	str	r2, [r1, #4]
 800737a:	2301      	movs	r3, #1
 800737c:	4093      	lsls	r3, r2
 800737e:	608b      	str	r3, [r1, #8]
 8007380:	4620      	mov	r0, r4
 8007382:	f001 ffd1 	bl	8009328 <_Bfree>
 8007386:	69e3      	ldr	r3, [r4, #28]
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	1e3b      	subs	r3, r7, #0
 800738e:	bfbb      	ittet	lt
 8007390:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007394:	9303      	strlt	r3, [sp, #12]
 8007396:	2300      	movge	r3, #0
 8007398:	2201      	movlt	r2, #1
 800739a:	bfac      	ite	ge
 800739c:	f8c8 3000 	strge.w	r3, [r8]
 80073a0:	f8c8 2000 	strlt.w	r2, [r8]
 80073a4:	4b9e      	ldr	r3, [pc, #632]	; (8007620 <_dtoa_r+0x2f0>)
 80073a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80073aa:	ea33 0308 	bics.w	r3, r3, r8
 80073ae:	d11b      	bne.n	80073e8 <_dtoa_r+0xb8>
 80073b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80073bc:	4333      	orrs	r3, r6
 80073be:	f000 8593 	beq.w	8007ee8 <_dtoa_r+0xbb8>
 80073c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073c4:	b963      	cbnz	r3, 80073e0 <_dtoa_r+0xb0>
 80073c6:	4b97      	ldr	r3, [pc, #604]	; (8007624 <_dtoa_r+0x2f4>)
 80073c8:	e027      	b.n	800741a <_dtoa_r+0xea>
 80073ca:	4b97      	ldr	r3, [pc, #604]	; (8007628 <_dtoa_r+0x2f8>)
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	3308      	adds	r3, #8
 80073d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	9800      	ldr	r0, [sp, #0]
 80073d6:	b013      	add	sp, #76	; 0x4c
 80073d8:	ecbd 8b04 	vpop	{d8-d9}
 80073dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e0:	4b90      	ldr	r3, [pc, #576]	; (8007624 <_dtoa_r+0x2f4>)
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	3303      	adds	r3, #3
 80073e6:	e7f3      	b.n	80073d0 <_dtoa_r+0xa0>
 80073e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073ec:	2200      	movs	r2, #0
 80073ee:	ec51 0b17 	vmov	r0, r1, d7
 80073f2:	eeb0 8a47 	vmov.f32	s16, s14
 80073f6:	eef0 8a67 	vmov.f32	s17, s15
 80073fa:	2300      	movs	r3, #0
 80073fc:	f7f9 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8007400:	4681      	mov	r9, r0
 8007402:	b160      	cbz	r0, 800741e <_dtoa_r+0xee>
 8007404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007406:	2301      	movs	r3, #1
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8568 	beq.w	8007ee2 <_dtoa_r+0xbb2>
 8007412:	4b86      	ldr	r3, [pc, #536]	; (800762c <_dtoa_r+0x2fc>)
 8007414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	3b01      	subs	r3, #1
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	e7da      	b.n	80073d4 <_dtoa_r+0xa4>
 800741e:	aa10      	add	r2, sp, #64	; 0x40
 8007420:	a911      	add	r1, sp, #68	; 0x44
 8007422:	4620      	mov	r0, r4
 8007424:	eeb0 0a48 	vmov.f32	s0, s16
 8007428:	eef0 0a68 	vmov.f32	s1, s17
 800742c:	f002 fb18 	bl	8009a60 <__d2b>
 8007430:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007434:	4682      	mov	sl, r0
 8007436:	2d00      	cmp	r5, #0
 8007438:	d07f      	beq.n	800753a <_dtoa_r+0x20a>
 800743a:	ee18 3a90 	vmov	r3, s17
 800743e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007442:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007446:	ec51 0b18 	vmov	r0, r1, d8
 800744a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800744e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007452:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007456:	4619      	mov	r1, r3
 8007458:	2200      	movs	r2, #0
 800745a:	4b75      	ldr	r3, [pc, #468]	; (8007630 <_dtoa_r+0x300>)
 800745c:	f7f8 ff14 	bl	8000288 <__aeabi_dsub>
 8007460:	a367      	add	r3, pc, #412	; (adr r3, 8007600 <_dtoa_r+0x2d0>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f7f9 f8c7 	bl	80005f8 <__aeabi_dmul>
 800746a:	a367      	add	r3, pc, #412	; (adr r3, 8007608 <_dtoa_r+0x2d8>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	f7f8 ff0c 	bl	800028c <__adddf3>
 8007474:	4606      	mov	r6, r0
 8007476:	4628      	mov	r0, r5
 8007478:	460f      	mov	r7, r1
 800747a:	f7f9 f853 	bl	8000524 <__aeabi_i2d>
 800747e:	a364      	add	r3, pc, #400	; (adr r3, 8007610 <_dtoa_r+0x2e0>)
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	f7f9 f8b8 	bl	80005f8 <__aeabi_dmul>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4630      	mov	r0, r6
 800748e:	4639      	mov	r1, r7
 8007490:	f7f8 fefc 	bl	800028c <__adddf3>
 8007494:	4606      	mov	r6, r0
 8007496:	460f      	mov	r7, r1
 8007498:	f7f9 fb5e 	bl	8000b58 <__aeabi_d2iz>
 800749c:	2200      	movs	r2, #0
 800749e:	4683      	mov	fp, r0
 80074a0:	2300      	movs	r3, #0
 80074a2:	4630      	mov	r0, r6
 80074a4:	4639      	mov	r1, r7
 80074a6:	f7f9 fb19 	bl	8000adc <__aeabi_dcmplt>
 80074aa:	b148      	cbz	r0, 80074c0 <_dtoa_r+0x190>
 80074ac:	4658      	mov	r0, fp
 80074ae:	f7f9 f839 	bl	8000524 <__aeabi_i2d>
 80074b2:	4632      	mov	r2, r6
 80074b4:	463b      	mov	r3, r7
 80074b6:	f7f9 fb07 	bl	8000ac8 <__aeabi_dcmpeq>
 80074ba:	b908      	cbnz	r0, 80074c0 <_dtoa_r+0x190>
 80074bc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80074c0:	f1bb 0f16 	cmp.w	fp, #22
 80074c4:	d857      	bhi.n	8007576 <_dtoa_r+0x246>
 80074c6:	4b5b      	ldr	r3, [pc, #364]	; (8007634 <_dtoa_r+0x304>)
 80074c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	ec51 0b18 	vmov	r0, r1, d8
 80074d4:	f7f9 fb02 	bl	8000adc <__aeabi_dcmplt>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d04e      	beq.n	800757a <_dtoa_r+0x24a>
 80074dc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80074e0:	2300      	movs	r3, #0
 80074e2:	930c      	str	r3, [sp, #48]	; 0x30
 80074e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074e6:	1b5b      	subs	r3, r3, r5
 80074e8:	1e5a      	subs	r2, r3, #1
 80074ea:	bf45      	ittet	mi
 80074ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80074f0:	9305      	strmi	r3, [sp, #20]
 80074f2:	2300      	movpl	r3, #0
 80074f4:	2300      	movmi	r3, #0
 80074f6:	9206      	str	r2, [sp, #24]
 80074f8:	bf54      	ite	pl
 80074fa:	9305      	strpl	r3, [sp, #20]
 80074fc:	9306      	strmi	r3, [sp, #24]
 80074fe:	f1bb 0f00 	cmp.w	fp, #0
 8007502:	db3c      	blt.n	800757e <_dtoa_r+0x24e>
 8007504:	9b06      	ldr	r3, [sp, #24]
 8007506:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800750a:	445b      	add	r3, fp
 800750c:	9306      	str	r3, [sp, #24]
 800750e:	2300      	movs	r3, #0
 8007510:	9308      	str	r3, [sp, #32]
 8007512:	9b07      	ldr	r3, [sp, #28]
 8007514:	2b09      	cmp	r3, #9
 8007516:	d868      	bhi.n	80075ea <_dtoa_r+0x2ba>
 8007518:	2b05      	cmp	r3, #5
 800751a:	bfc4      	itt	gt
 800751c:	3b04      	subgt	r3, #4
 800751e:	9307      	strgt	r3, [sp, #28]
 8007520:	9b07      	ldr	r3, [sp, #28]
 8007522:	f1a3 0302 	sub.w	r3, r3, #2
 8007526:	bfcc      	ite	gt
 8007528:	2500      	movgt	r5, #0
 800752a:	2501      	movle	r5, #1
 800752c:	2b03      	cmp	r3, #3
 800752e:	f200 8085 	bhi.w	800763c <_dtoa_r+0x30c>
 8007532:	e8df f003 	tbb	[pc, r3]
 8007536:	3b2e      	.short	0x3b2e
 8007538:	5839      	.short	0x5839
 800753a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800753e:	441d      	add	r5, r3
 8007540:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007544:	2b20      	cmp	r3, #32
 8007546:	bfc1      	itttt	gt
 8007548:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800754c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007550:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007554:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007558:	bfd6      	itet	le
 800755a:	f1c3 0320 	rsble	r3, r3, #32
 800755e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007562:	fa06 f003 	lslle.w	r0, r6, r3
 8007566:	f7f8 ffcd 	bl	8000504 <__aeabi_ui2d>
 800756a:	2201      	movs	r2, #1
 800756c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007570:	3d01      	subs	r5, #1
 8007572:	920e      	str	r2, [sp, #56]	; 0x38
 8007574:	e76f      	b.n	8007456 <_dtoa_r+0x126>
 8007576:	2301      	movs	r3, #1
 8007578:	e7b3      	b.n	80074e2 <_dtoa_r+0x1b2>
 800757a:	900c      	str	r0, [sp, #48]	; 0x30
 800757c:	e7b2      	b.n	80074e4 <_dtoa_r+0x1b4>
 800757e:	9b05      	ldr	r3, [sp, #20]
 8007580:	eba3 030b 	sub.w	r3, r3, fp
 8007584:	9305      	str	r3, [sp, #20]
 8007586:	f1cb 0300 	rsb	r3, fp, #0
 800758a:	9308      	str	r3, [sp, #32]
 800758c:	2300      	movs	r3, #0
 800758e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007590:	e7bf      	b.n	8007512 <_dtoa_r+0x1e2>
 8007592:	2300      	movs	r3, #0
 8007594:	9309      	str	r3, [sp, #36]	; 0x24
 8007596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007598:	2b00      	cmp	r3, #0
 800759a:	dc52      	bgt.n	8007642 <_dtoa_r+0x312>
 800759c:	2301      	movs	r3, #1
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	9304      	str	r3, [sp, #16]
 80075a2:	461a      	mov	r2, r3
 80075a4:	920a      	str	r2, [sp, #40]	; 0x28
 80075a6:	e00b      	b.n	80075c0 <_dtoa_r+0x290>
 80075a8:	2301      	movs	r3, #1
 80075aa:	e7f3      	b.n	8007594 <_dtoa_r+0x264>
 80075ac:	2300      	movs	r3, #0
 80075ae:	9309      	str	r3, [sp, #36]	; 0x24
 80075b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b2:	445b      	add	r3, fp
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	3301      	adds	r3, #1
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	9304      	str	r3, [sp, #16]
 80075bc:	bfb8      	it	lt
 80075be:	2301      	movlt	r3, #1
 80075c0:	69e0      	ldr	r0, [r4, #28]
 80075c2:	2100      	movs	r1, #0
 80075c4:	2204      	movs	r2, #4
 80075c6:	f102 0614 	add.w	r6, r2, #20
 80075ca:	429e      	cmp	r6, r3
 80075cc:	d93d      	bls.n	800764a <_dtoa_r+0x31a>
 80075ce:	6041      	str	r1, [r0, #4]
 80075d0:	4620      	mov	r0, r4
 80075d2:	f001 fe69 	bl	80092a8 <_Balloc>
 80075d6:	9000      	str	r0, [sp, #0]
 80075d8:	2800      	cmp	r0, #0
 80075da:	d139      	bne.n	8007650 <_dtoa_r+0x320>
 80075dc:	4b16      	ldr	r3, [pc, #88]	; (8007638 <_dtoa_r+0x308>)
 80075de:	4602      	mov	r2, r0
 80075e0:	f240 11af 	movw	r1, #431	; 0x1af
 80075e4:	e6bd      	b.n	8007362 <_dtoa_r+0x32>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e7e1      	b.n	80075ae <_dtoa_r+0x27e>
 80075ea:	2501      	movs	r5, #1
 80075ec:	2300      	movs	r3, #0
 80075ee:	9307      	str	r3, [sp, #28]
 80075f0:	9509      	str	r5, [sp, #36]	; 0x24
 80075f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	2200      	movs	r2, #0
 80075fc:	2312      	movs	r3, #18
 80075fe:	e7d1      	b.n	80075a4 <_dtoa_r+0x274>
 8007600:	636f4361 	.word	0x636f4361
 8007604:	3fd287a7 	.word	0x3fd287a7
 8007608:	8b60c8b3 	.word	0x8b60c8b3
 800760c:	3fc68a28 	.word	0x3fc68a28
 8007610:	509f79fb 	.word	0x509f79fb
 8007614:	3fd34413 	.word	0x3fd34413
 8007618:	0800a6d6 	.word	0x0800a6d6
 800761c:	0800a6ed 	.word	0x0800a6ed
 8007620:	7ff00000 	.word	0x7ff00000
 8007624:	0800a6d2 	.word	0x0800a6d2
 8007628:	0800a6c9 	.word	0x0800a6c9
 800762c:	0800a7de 	.word	0x0800a7de
 8007630:	3ff80000 	.word	0x3ff80000
 8007634:	0800a868 	.word	0x0800a868
 8007638:	0800a745 	.word	0x0800a745
 800763c:	2301      	movs	r3, #1
 800763e:	9309      	str	r3, [sp, #36]	; 0x24
 8007640:	e7d7      	b.n	80075f2 <_dtoa_r+0x2c2>
 8007642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	9304      	str	r3, [sp, #16]
 8007648:	e7ba      	b.n	80075c0 <_dtoa_r+0x290>
 800764a:	3101      	adds	r1, #1
 800764c:	0052      	lsls	r2, r2, #1
 800764e:	e7ba      	b.n	80075c6 <_dtoa_r+0x296>
 8007650:	69e3      	ldr	r3, [r4, #28]
 8007652:	9a00      	ldr	r2, [sp, #0]
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	9b04      	ldr	r3, [sp, #16]
 8007658:	2b0e      	cmp	r3, #14
 800765a:	f200 80a8 	bhi.w	80077ae <_dtoa_r+0x47e>
 800765e:	2d00      	cmp	r5, #0
 8007660:	f000 80a5 	beq.w	80077ae <_dtoa_r+0x47e>
 8007664:	f1bb 0f00 	cmp.w	fp, #0
 8007668:	dd38      	ble.n	80076dc <_dtoa_r+0x3ac>
 800766a:	4bc0      	ldr	r3, [pc, #768]	; (800796c <_dtoa_r+0x63c>)
 800766c:	f00b 020f 	and.w	r2, fp, #15
 8007670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007674:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007678:	e9d3 6700 	ldrd	r6, r7, [r3]
 800767c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007680:	d019      	beq.n	80076b6 <_dtoa_r+0x386>
 8007682:	4bbb      	ldr	r3, [pc, #748]	; (8007970 <_dtoa_r+0x640>)
 8007684:	ec51 0b18 	vmov	r0, r1, d8
 8007688:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800768c:	f7f9 f8de 	bl	800084c <__aeabi_ddiv>
 8007690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007694:	f008 080f 	and.w	r8, r8, #15
 8007698:	2503      	movs	r5, #3
 800769a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007970 <_dtoa_r+0x640>
 800769e:	f1b8 0f00 	cmp.w	r8, #0
 80076a2:	d10a      	bne.n	80076ba <_dtoa_r+0x38a>
 80076a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a8:	4632      	mov	r2, r6
 80076aa:	463b      	mov	r3, r7
 80076ac:	f7f9 f8ce 	bl	800084c <__aeabi_ddiv>
 80076b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076b4:	e02b      	b.n	800770e <_dtoa_r+0x3de>
 80076b6:	2502      	movs	r5, #2
 80076b8:	e7ef      	b.n	800769a <_dtoa_r+0x36a>
 80076ba:	f018 0f01 	tst.w	r8, #1
 80076be:	d008      	beq.n	80076d2 <_dtoa_r+0x3a2>
 80076c0:	4630      	mov	r0, r6
 80076c2:	4639      	mov	r1, r7
 80076c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076c8:	f7f8 ff96 	bl	80005f8 <__aeabi_dmul>
 80076cc:	3501      	adds	r5, #1
 80076ce:	4606      	mov	r6, r0
 80076d0:	460f      	mov	r7, r1
 80076d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80076d6:	f109 0908 	add.w	r9, r9, #8
 80076da:	e7e0      	b.n	800769e <_dtoa_r+0x36e>
 80076dc:	f000 809f 	beq.w	800781e <_dtoa_r+0x4ee>
 80076e0:	f1cb 0600 	rsb	r6, fp, #0
 80076e4:	4ba1      	ldr	r3, [pc, #644]	; (800796c <_dtoa_r+0x63c>)
 80076e6:	4fa2      	ldr	r7, [pc, #648]	; (8007970 <_dtoa_r+0x640>)
 80076e8:	f006 020f 	and.w	r2, r6, #15
 80076ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f4:	ec51 0b18 	vmov	r0, r1, d8
 80076f8:	f7f8 ff7e 	bl	80005f8 <__aeabi_dmul>
 80076fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007700:	1136      	asrs	r6, r6, #4
 8007702:	2300      	movs	r3, #0
 8007704:	2502      	movs	r5, #2
 8007706:	2e00      	cmp	r6, #0
 8007708:	d17e      	bne.n	8007808 <_dtoa_r+0x4d8>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1d0      	bne.n	80076b0 <_dtoa_r+0x380>
 800770e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007710:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 8084 	beq.w	8007822 <_dtoa_r+0x4f2>
 800771a:	4b96      	ldr	r3, [pc, #600]	; (8007974 <_dtoa_r+0x644>)
 800771c:	2200      	movs	r2, #0
 800771e:	4640      	mov	r0, r8
 8007720:	4649      	mov	r1, r9
 8007722:	f7f9 f9db 	bl	8000adc <__aeabi_dcmplt>
 8007726:	2800      	cmp	r0, #0
 8007728:	d07b      	beq.n	8007822 <_dtoa_r+0x4f2>
 800772a:	9b04      	ldr	r3, [sp, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d078      	beq.n	8007822 <_dtoa_r+0x4f2>
 8007730:	9b01      	ldr	r3, [sp, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	dd39      	ble.n	80077aa <_dtoa_r+0x47a>
 8007736:	4b90      	ldr	r3, [pc, #576]	; (8007978 <_dtoa_r+0x648>)
 8007738:	2200      	movs	r2, #0
 800773a:	4640      	mov	r0, r8
 800773c:	4649      	mov	r1, r9
 800773e:	f7f8 ff5b 	bl	80005f8 <__aeabi_dmul>
 8007742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007746:	9e01      	ldr	r6, [sp, #4]
 8007748:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800774c:	3501      	adds	r5, #1
 800774e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007752:	4628      	mov	r0, r5
 8007754:	f7f8 fee6 	bl	8000524 <__aeabi_i2d>
 8007758:	4642      	mov	r2, r8
 800775a:	464b      	mov	r3, r9
 800775c:	f7f8 ff4c 	bl	80005f8 <__aeabi_dmul>
 8007760:	4b86      	ldr	r3, [pc, #536]	; (800797c <_dtoa_r+0x64c>)
 8007762:	2200      	movs	r2, #0
 8007764:	f7f8 fd92 	bl	800028c <__adddf3>
 8007768:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800776c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007770:	9303      	str	r3, [sp, #12]
 8007772:	2e00      	cmp	r6, #0
 8007774:	d158      	bne.n	8007828 <_dtoa_r+0x4f8>
 8007776:	4b82      	ldr	r3, [pc, #520]	; (8007980 <_dtoa_r+0x650>)
 8007778:	2200      	movs	r2, #0
 800777a:	4640      	mov	r0, r8
 800777c:	4649      	mov	r1, r9
 800777e:	f7f8 fd83 	bl	8000288 <__aeabi_dsub>
 8007782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007786:	4680      	mov	r8, r0
 8007788:	4689      	mov	r9, r1
 800778a:	f7f9 f9c5 	bl	8000b18 <__aeabi_dcmpgt>
 800778e:	2800      	cmp	r0, #0
 8007790:	f040 8296 	bne.w	8007cc0 <_dtoa_r+0x990>
 8007794:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007798:	4640      	mov	r0, r8
 800779a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800779e:	4649      	mov	r1, r9
 80077a0:	f7f9 f99c 	bl	8000adc <__aeabi_dcmplt>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	f040 8289 	bne.w	8007cbc <_dtoa_r+0x98c>
 80077aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80077ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f2c0 814e 	blt.w	8007a52 <_dtoa_r+0x722>
 80077b6:	f1bb 0f0e 	cmp.w	fp, #14
 80077ba:	f300 814a 	bgt.w	8007a52 <_dtoa_r+0x722>
 80077be:	4b6b      	ldr	r3, [pc, #428]	; (800796c <_dtoa_r+0x63c>)
 80077c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f280 80dc 	bge.w	8007988 <_dtoa_r+0x658>
 80077d0:	9b04      	ldr	r3, [sp, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f300 80d8 	bgt.w	8007988 <_dtoa_r+0x658>
 80077d8:	f040 826f 	bne.w	8007cba <_dtoa_r+0x98a>
 80077dc:	4b68      	ldr	r3, [pc, #416]	; (8007980 <_dtoa_r+0x650>)
 80077de:	2200      	movs	r2, #0
 80077e0:	4640      	mov	r0, r8
 80077e2:	4649      	mov	r1, r9
 80077e4:	f7f8 ff08 	bl	80005f8 <__aeabi_dmul>
 80077e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077ec:	f7f9 f98a 	bl	8000b04 <__aeabi_dcmpge>
 80077f0:	9e04      	ldr	r6, [sp, #16]
 80077f2:	4637      	mov	r7, r6
 80077f4:	2800      	cmp	r0, #0
 80077f6:	f040 8245 	bne.w	8007c84 <_dtoa_r+0x954>
 80077fa:	9d00      	ldr	r5, [sp, #0]
 80077fc:	2331      	movs	r3, #49	; 0x31
 80077fe:	f805 3b01 	strb.w	r3, [r5], #1
 8007802:	f10b 0b01 	add.w	fp, fp, #1
 8007806:	e241      	b.n	8007c8c <_dtoa_r+0x95c>
 8007808:	07f2      	lsls	r2, r6, #31
 800780a:	d505      	bpl.n	8007818 <_dtoa_r+0x4e8>
 800780c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007810:	f7f8 fef2 	bl	80005f8 <__aeabi_dmul>
 8007814:	3501      	adds	r5, #1
 8007816:	2301      	movs	r3, #1
 8007818:	1076      	asrs	r6, r6, #1
 800781a:	3708      	adds	r7, #8
 800781c:	e773      	b.n	8007706 <_dtoa_r+0x3d6>
 800781e:	2502      	movs	r5, #2
 8007820:	e775      	b.n	800770e <_dtoa_r+0x3de>
 8007822:	9e04      	ldr	r6, [sp, #16]
 8007824:	465f      	mov	r7, fp
 8007826:	e792      	b.n	800774e <_dtoa_r+0x41e>
 8007828:	9900      	ldr	r1, [sp, #0]
 800782a:	4b50      	ldr	r3, [pc, #320]	; (800796c <_dtoa_r+0x63c>)
 800782c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007830:	4431      	add	r1, r6
 8007832:	9102      	str	r1, [sp, #8]
 8007834:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007836:	eeb0 9a47 	vmov.f32	s18, s14
 800783a:	eef0 9a67 	vmov.f32	s19, s15
 800783e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007846:	2900      	cmp	r1, #0
 8007848:	d044      	beq.n	80078d4 <_dtoa_r+0x5a4>
 800784a:	494e      	ldr	r1, [pc, #312]	; (8007984 <_dtoa_r+0x654>)
 800784c:	2000      	movs	r0, #0
 800784e:	f7f8 fffd 	bl	800084c <__aeabi_ddiv>
 8007852:	ec53 2b19 	vmov	r2, r3, d9
 8007856:	f7f8 fd17 	bl	8000288 <__aeabi_dsub>
 800785a:	9d00      	ldr	r5, [sp, #0]
 800785c:	ec41 0b19 	vmov	d9, r0, r1
 8007860:	4649      	mov	r1, r9
 8007862:	4640      	mov	r0, r8
 8007864:	f7f9 f978 	bl	8000b58 <__aeabi_d2iz>
 8007868:	4606      	mov	r6, r0
 800786a:	f7f8 fe5b 	bl	8000524 <__aeabi_i2d>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4640      	mov	r0, r8
 8007874:	4649      	mov	r1, r9
 8007876:	f7f8 fd07 	bl	8000288 <__aeabi_dsub>
 800787a:	3630      	adds	r6, #48	; 0x30
 800787c:	f805 6b01 	strb.w	r6, [r5], #1
 8007880:	ec53 2b19 	vmov	r2, r3, d9
 8007884:	4680      	mov	r8, r0
 8007886:	4689      	mov	r9, r1
 8007888:	f7f9 f928 	bl	8000adc <__aeabi_dcmplt>
 800788c:	2800      	cmp	r0, #0
 800788e:	d164      	bne.n	800795a <_dtoa_r+0x62a>
 8007890:	4642      	mov	r2, r8
 8007892:	464b      	mov	r3, r9
 8007894:	4937      	ldr	r1, [pc, #220]	; (8007974 <_dtoa_r+0x644>)
 8007896:	2000      	movs	r0, #0
 8007898:	f7f8 fcf6 	bl	8000288 <__aeabi_dsub>
 800789c:	ec53 2b19 	vmov	r2, r3, d9
 80078a0:	f7f9 f91c 	bl	8000adc <__aeabi_dcmplt>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	f040 80b6 	bne.w	8007a16 <_dtoa_r+0x6e6>
 80078aa:	9b02      	ldr	r3, [sp, #8]
 80078ac:	429d      	cmp	r5, r3
 80078ae:	f43f af7c 	beq.w	80077aa <_dtoa_r+0x47a>
 80078b2:	4b31      	ldr	r3, [pc, #196]	; (8007978 <_dtoa_r+0x648>)
 80078b4:	ec51 0b19 	vmov	r0, r1, d9
 80078b8:	2200      	movs	r2, #0
 80078ba:	f7f8 fe9d 	bl	80005f8 <__aeabi_dmul>
 80078be:	4b2e      	ldr	r3, [pc, #184]	; (8007978 <_dtoa_r+0x648>)
 80078c0:	ec41 0b19 	vmov	d9, r0, r1
 80078c4:	2200      	movs	r2, #0
 80078c6:	4640      	mov	r0, r8
 80078c8:	4649      	mov	r1, r9
 80078ca:	f7f8 fe95 	bl	80005f8 <__aeabi_dmul>
 80078ce:	4680      	mov	r8, r0
 80078d0:	4689      	mov	r9, r1
 80078d2:	e7c5      	b.n	8007860 <_dtoa_r+0x530>
 80078d4:	ec51 0b17 	vmov	r0, r1, d7
 80078d8:	f7f8 fe8e 	bl	80005f8 <__aeabi_dmul>
 80078dc:	9b02      	ldr	r3, [sp, #8]
 80078de:	9d00      	ldr	r5, [sp, #0]
 80078e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80078e2:	ec41 0b19 	vmov	d9, r0, r1
 80078e6:	4649      	mov	r1, r9
 80078e8:	4640      	mov	r0, r8
 80078ea:	f7f9 f935 	bl	8000b58 <__aeabi_d2iz>
 80078ee:	4606      	mov	r6, r0
 80078f0:	f7f8 fe18 	bl	8000524 <__aeabi_i2d>
 80078f4:	3630      	adds	r6, #48	; 0x30
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4640      	mov	r0, r8
 80078fc:	4649      	mov	r1, r9
 80078fe:	f7f8 fcc3 	bl	8000288 <__aeabi_dsub>
 8007902:	f805 6b01 	strb.w	r6, [r5], #1
 8007906:	9b02      	ldr	r3, [sp, #8]
 8007908:	429d      	cmp	r5, r3
 800790a:	4680      	mov	r8, r0
 800790c:	4689      	mov	r9, r1
 800790e:	f04f 0200 	mov.w	r2, #0
 8007912:	d124      	bne.n	800795e <_dtoa_r+0x62e>
 8007914:	4b1b      	ldr	r3, [pc, #108]	; (8007984 <_dtoa_r+0x654>)
 8007916:	ec51 0b19 	vmov	r0, r1, d9
 800791a:	f7f8 fcb7 	bl	800028c <__adddf3>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4640      	mov	r0, r8
 8007924:	4649      	mov	r1, r9
 8007926:	f7f9 f8f7 	bl	8000b18 <__aeabi_dcmpgt>
 800792a:	2800      	cmp	r0, #0
 800792c:	d173      	bne.n	8007a16 <_dtoa_r+0x6e6>
 800792e:	ec53 2b19 	vmov	r2, r3, d9
 8007932:	4914      	ldr	r1, [pc, #80]	; (8007984 <_dtoa_r+0x654>)
 8007934:	2000      	movs	r0, #0
 8007936:	f7f8 fca7 	bl	8000288 <__aeabi_dsub>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4640      	mov	r0, r8
 8007940:	4649      	mov	r1, r9
 8007942:	f7f9 f8cb 	bl	8000adc <__aeabi_dcmplt>
 8007946:	2800      	cmp	r0, #0
 8007948:	f43f af2f 	beq.w	80077aa <_dtoa_r+0x47a>
 800794c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800794e:	1e6b      	subs	r3, r5, #1
 8007950:	930f      	str	r3, [sp, #60]	; 0x3c
 8007952:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007956:	2b30      	cmp	r3, #48	; 0x30
 8007958:	d0f8      	beq.n	800794c <_dtoa_r+0x61c>
 800795a:	46bb      	mov	fp, r7
 800795c:	e04a      	b.n	80079f4 <_dtoa_r+0x6c4>
 800795e:	4b06      	ldr	r3, [pc, #24]	; (8007978 <_dtoa_r+0x648>)
 8007960:	f7f8 fe4a 	bl	80005f8 <__aeabi_dmul>
 8007964:	4680      	mov	r8, r0
 8007966:	4689      	mov	r9, r1
 8007968:	e7bd      	b.n	80078e6 <_dtoa_r+0x5b6>
 800796a:	bf00      	nop
 800796c:	0800a868 	.word	0x0800a868
 8007970:	0800a840 	.word	0x0800a840
 8007974:	3ff00000 	.word	0x3ff00000
 8007978:	40240000 	.word	0x40240000
 800797c:	401c0000 	.word	0x401c0000
 8007980:	40140000 	.word	0x40140000
 8007984:	3fe00000 	.word	0x3fe00000
 8007988:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800798c:	9d00      	ldr	r5, [sp, #0]
 800798e:	4642      	mov	r2, r8
 8007990:	464b      	mov	r3, r9
 8007992:	4630      	mov	r0, r6
 8007994:	4639      	mov	r1, r7
 8007996:	f7f8 ff59 	bl	800084c <__aeabi_ddiv>
 800799a:	f7f9 f8dd 	bl	8000b58 <__aeabi_d2iz>
 800799e:	9001      	str	r0, [sp, #4]
 80079a0:	f7f8 fdc0 	bl	8000524 <__aeabi_i2d>
 80079a4:	4642      	mov	r2, r8
 80079a6:	464b      	mov	r3, r9
 80079a8:	f7f8 fe26 	bl	80005f8 <__aeabi_dmul>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4630      	mov	r0, r6
 80079b2:	4639      	mov	r1, r7
 80079b4:	f7f8 fc68 	bl	8000288 <__aeabi_dsub>
 80079b8:	9e01      	ldr	r6, [sp, #4]
 80079ba:	9f04      	ldr	r7, [sp, #16]
 80079bc:	3630      	adds	r6, #48	; 0x30
 80079be:	f805 6b01 	strb.w	r6, [r5], #1
 80079c2:	9e00      	ldr	r6, [sp, #0]
 80079c4:	1bae      	subs	r6, r5, r6
 80079c6:	42b7      	cmp	r7, r6
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	d134      	bne.n	8007a38 <_dtoa_r+0x708>
 80079ce:	f7f8 fc5d 	bl	800028c <__adddf3>
 80079d2:	4642      	mov	r2, r8
 80079d4:	464b      	mov	r3, r9
 80079d6:	4606      	mov	r6, r0
 80079d8:	460f      	mov	r7, r1
 80079da:	f7f9 f89d 	bl	8000b18 <__aeabi_dcmpgt>
 80079de:	b9c8      	cbnz	r0, 8007a14 <_dtoa_r+0x6e4>
 80079e0:	4642      	mov	r2, r8
 80079e2:	464b      	mov	r3, r9
 80079e4:	4630      	mov	r0, r6
 80079e6:	4639      	mov	r1, r7
 80079e8:	f7f9 f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 80079ec:	b110      	cbz	r0, 80079f4 <_dtoa_r+0x6c4>
 80079ee:	9b01      	ldr	r3, [sp, #4]
 80079f0:	07db      	lsls	r3, r3, #31
 80079f2:	d40f      	bmi.n	8007a14 <_dtoa_r+0x6e4>
 80079f4:	4651      	mov	r1, sl
 80079f6:	4620      	mov	r0, r4
 80079f8:	f001 fc96 	bl	8009328 <_Bfree>
 80079fc:	2300      	movs	r3, #0
 80079fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a00:	702b      	strb	r3, [r5, #0]
 8007a02:	f10b 0301 	add.w	r3, fp, #1
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f43f ace2 	beq.w	80073d4 <_dtoa_r+0xa4>
 8007a10:	601d      	str	r5, [r3, #0]
 8007a12:	e4df      	b.n	80073d4 <_dtoa_r+0xa4>
 8007a14:	465f      	mov	r7, fp
 8007a16:	462b      	mov	r3, r5
 8007a18:	461d      	mov	r5, r3
 8007a1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a1e:	2a39      	cmp	r2, #57	; 0x39
 8007a20:	d106      	bne.n	8007a30 <_dtoa_r+0x700>
 8007a22:	9a00      	ldr	r2, [sp, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d1f7      	bne.n	8007a18 <_dtoa_r+0x6e8>
 8007a28:	9900      	ldr	r1, [sp, #0]
 8007a2a:	2230      	movs	r2, #48	; 0x30
 8007a2c:	3701      	adds	r7, #1
 8007a2e:	700a      	strb	r2, [r1, #0]
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	3201      	adds	r2, #1
 8007a34:	701a      	strb	r2, [r3, #0]
 8007a36:	e790      	b.n	800795a <_dtoa_r+0x62a>
 8007a38:	4ba3      	ldr	r3, [pc, #652]	; (8007cc8 <_dtoa_r+0x998>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f7f8 fddc 	bl	80005f8 <__aeabi_dmul>
 8007a40:	2200      	movs	r2, #0
 8007a42:	2300      	movs	r3, #0
 8007a44:	4606      	mov	r6, r0
 8007a46:	460f      	mov	r7, r1
 8007a48:	f7f9 f83e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d09e      	beq.n	800798e <_dtoa_r+0x65e>
 8007a50:	e7d0      	b.n	80079f4 <_dtoa_r+0x6c4>
 8007a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a54:	2a00      	cmp	r2, #0
 8007a56:	f000 80ca 	beq.w	8007bee <_dtoa_r+0x8be>
 8007a5a:	9a07      	ldr	r2, [sp, #28]
 8007a5c:	2a01      	cmp	r2, #1
 8007a5e:	f300 80ad 	bgt.w	8007bbc <_dtoa_r+0x88c>
 8007a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a64:	2a00      	cmp	r2, #0
 8007a66:	f000 80a5 	beq.w	8007bb4 <_dtoa_r+0x884>
 8007a6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a6e:	9e08      	ldr	r6, [sp, #32]
 8007a70:	9d05      	ldr	r5, [sp, #20]
 8007a72:	9a05      	ldr	r2, [sp, #20]
 8007a74:	441a      	add	r2, r3
 8007a76:	9205      	str	r2, [sp, #20]
 8007a78:	9a06      	ldr	r2, [sp, #24]
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	441a      	add	r2, r3
 8007a7e:	4620      	mov	r0, r4
 8007a80:	9206      	str	r2, [sp, #24]
 8007a82:	f001 fd51 	bl	8009528 <__i2b>
 8007a86:	4607      	mov	r7, r0
 8007a88:	b165      	cbz	r5, 8007aa4 <_dtoa_r+0x774>
 8007a8a:	9b06      	ldr	r3, [sp, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dd09      	ble.n	8007aa4 <_dtoa_r+0x774>
 8007a90:	42ab      	cmp	r3, r5
 8007a92:	9a05      	ldr	r2, [sp, #20]
 8007a94:	bfa8      	it	ge
 8007a96:	462b      	movge	r3, r5
 8007a98:	1ad2      	subs	r2, r2, r3
 8007a9a:	9205      	str	r2, [sp, #20]
 8007a9c:	9a06      	ldr	r2, [sp, #24]
 8007a9e:	1aed      	subs	r5, r5, r3
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	9306      	str	r3, [sp, #24]
 8007aa4:	9b08      	ldr	r3, [sp, #32]
 8007aa6:	b1f3      	cbz	r3, 8007ae6 <_dtoa_r+0x7b6>
 8007aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80a3 	beq.w	8007bf6 <_dtoa_r+0x8c6>
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	dd10      	ble.n	8007ad6 <_dtoa_r+0x7a6>
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	4632      	mov	r2, r6
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f001 fdf5 	bl	80096a8 <__pow5mult>
 8007abe:	4652      	mov	r2, sl
 8007ac0:	4601      	mov	r1, r0
 8007ac2:	4607      	mov	r7, r0
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f001 fd45 	bl	8009554 <__multiply>
 8007aca:	4651      	mov	r1, sl
 8007acc:	4680      	mov	r8, r0
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f001 fc2a 	bl	8009328 <_Bfree>
 8007ad4:	46c2      	mov	sl, r8
 8007ad6:	9b08      	ldr	r3, [sp, #32]
 8007ad8:	1b9a      	subs	r2, r3, r6
 8007ada:	d004      	beq.n	8007ae6 <_dtoa_r+0x7b6>
 8007adc:	4651      	mov	r1, sl
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f001 fde2 	bl	80096a8 <__pow5mult>
 8007ae4:	4682      	mov	sl, r0
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f001 fd1d 	bl	8009528 <__i2b>
 8007aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	4606      	mov	r6, r0
 8007af4:	f340 8081 	ble.w	8007bfa <_dtoa_r+0x8ca>
 8007af8:	461a      	mov	r2, r3
 8007afa:	4601      	mov	r1, r0
 8007afc:	4620      	mov	r0, r4
 8007afe:	f001 fdd3 	bl	80096a8 <__pow5mult>
 8007b02:	9b07      	ldr	r3, [sp, #28]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	4606      	mov	r6, r0
 8007b08:	dd7a      	ble.n	8007c00 <_dtoa_r+0x8d0>
 8007b0a:	f04f 0800 	mov.w	r8, #0
 8007b0e:	6933      	ldr	r3, [r6, #16]
 8007b10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b14:	6918      	ldr	r0, [r3, #16]
 8007b16:	f001 fcb9 	bl	800948c <__hi0bits>
 8007b1a:	f1c0 0020 	rsb	r0, r0, #32
 8007b1e:	9b06      	ldr	r3, [sp, #24]
 8007b20:	4418      	add	r0, r3
 8007b22:	f010 001f 	ands.w	r0, r0, #31
 8007b26:	f000 8094 	beq.w	8007c52 <_dtoa_r+0x922>
 8007b2a:	f1c0 0320 	rsb	r3, r0, #32
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	f340 8085 	ble.w	8007c3e <_dtoa_r+0x90e>
 8007b34:	9b05      	ldr	r3, [sp, #20]
 8007b36:	f1c0 001c 	rsb	r0, r0, #28
 8007b3a:	4403      	add	r3, r0
 8007b3c:	9305      	str	r3, [sp, #20]
 8007b3e:	9b06      	ldr	r3, [sp, #24]
 8007b40:	4403      	add	r3, r0
 8007b42:	4405      	add	r5, r0
 8007b44:	9306      	str	r3, [sp, #24]
 8007b46:	9b05      	ldr	r3, [sp, #20]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dd05      	ble.n	8007b58 <_dtoa_r+0x828>
 8007b4c:	4651      	mov	r1, sl
 8007b4e:	461a      	mov	r2, r3
 8007b50:	4620      	mov	r0, r4
 8007b52:	f001 fe03 	bl	800975c <__lshift>
 8007b56:	4682      	mov	sl, r0
 8007b58:	9b06      	ldr	r3, [sp, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dd05      	ble.n	8007b6a <_dtoa_r+0x83a>
 8007b5e:	4631      	mov	r1, r6
 8007b60:	461a      	mov	r2, r3
 8007b62:	4620      	mov	r0, r4
 8007b64:	f001 fdfa 	bl	800975c <__lshift>
 8007b68:	4606      	mov	r6, r0
 8007b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d072      	beq.n	8007c56 <_dtoa_r+0x926>
 8007b70:	4631      	mov	r1, r6
 8007b72:	4650      	mov	r0, sl
 8007b74:	f001 fe5e 	bl	8009834 <__mcmp>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	da6c      	bge.n	8007c56 <_dtoa_r+0x926>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4651      	mov	r1, sl
 8007b80:	220a      	movs	r2, #10
 8007b82:	4620      	mov	r0, r4
 8007b84:	f001 fbf2 	bl	800936c <__multadd>
 8007b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b8a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007b8e:	4682      	mov	sl, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 81b0 	beq.w	8007ef6 <_dtoa_r+0xbc6>
 8007b96:	2300      	movs	r3, #0
 8007b98:	4639      	mov	r1, r7
 8007b9a:	220a      	movs	r2, #10
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f001 fbe5 	bl	800936c <__multadd>
 8007ba2:	9b01      	ldr	r3, [sp, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	f300 8096 	bgt.w	8007cd8 <_dtoa_r+0x9a8>
 8007bac:	9b07      	ldr	r3, [sp, #28]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	dc59      	bgt.n	8007c66 <_dtoa_r+0x936>
 8007bb2:	e091      	b.n	8007cd8 <_dtoa_r+0x9a8>
 8007bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bba:	e758      	b.n	8007a6e <_dtoa_r+0x73e>
 8007bbc:	9b04      	ldr	r3, [sp, #16]
 8007bbe:	1e5e      	subs	r6, r3, #1
 8007bc0:	9b08      	ldr	r3, [sp, #32]
 8007bc2:	42b3      	cmp	r3, r6
 8007bc4:	bfbf      	itttt	lt
 8007bc6:	9b08      	ldrlt	r3, [sp, #32]
 8007bc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007bca:	9608      	strlt	r6, [sp, #32]
 8007bcc:	1af3      	sublt	r3, r6, r3
 8007bce:	bfb4      	ite	lt
 8007bd0:	18d2      	addlt	r2, r2, r3
 8007bd2:	1b9e      	subge	r6, r3, r6
 8007bd4:	9b04      	ldr	r3, [sp, #16]
 8007bd6:	bfbc      	itt	lt
 8007bd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007bda:	2600      	movlt	r6, #0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bfb7      	itett	lt
 8007be0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007be4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007be8:	1a9d      	sublt	r5, r3, r2
 8007bea:	2300      	movlt	r3, #0
 8007bec:	e741      	b.n	8007a72 <_dtoa_r+0x742>
 8007bee:	9e08      	ldr	r6, [sp, #32]
 8007bf0:	9d05      	ldr	r5, [sp, #20]
 8007bf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007bf4:	e748      	b.n	8007a88 <_dtoa_r+0x758>
 8007bf6:	9a08      	ldr	r2, [sp, #32]
 8007bf8:	e770      	b.n	8007adc <_dtoa_r+0x7ac>
 8007bfa:	9b07      	ldr	r3, [sp, #28]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	dc19      	bgt.n	8007c34 <_dtoa_r+0x904>
 8007c00:	9b02      	ldr	r3, [sp, #8]
 8007c02:	b9bb      	cbnz	r3, 8007c34 <_dtoa_r+0x904>
 8007c04:	9b03      	ldr	r3, [sp, #12]
 8007c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c0a:	b99b      	cbnz	r3, 8007c34 <_dtoa_r+0x904>
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c12:	0d1b      	lsrs	r3, r3, #20
 8007c14:	051b      	lsls	r3, r3, #20
 8007c16:	b183      	cbz	r3, 8007c3a <_dtoa_r+0x90a>
 8007c18:	9b05      	ldr	r3, [sp, #20]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	9305      	str	r3, [sp, #20]
 8007c1e:	9b06      	ldr	r3, [sp, #24]
 8007c20:	3301      	adds	r3, #1
 8007c22:	9306      	str	r3, [sp, #24]
 8007c24:	f04f 0801 	mov.w	r8, #1
 8007c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f47f af6f 	bne.w	8007b0e <_dtoa_r+0x7de>
 8007c30:	2001      	movs	r0, #1
 8007c32:	e774      	b.n	8007b1e <_dtoa_r+0x7ee>
 8007c34:	f04f 0800 	mov.w	r8, #0
 8007c38:	e7f6      	b.n	8007c28 <_dtoa_r+0x8f8>
 8007c3a:	4698      	mov	r8, r3
 8007c3c:	e7f4      	b.n	8007c28 <_dtoa_r+0x8f8>
 8007c3e:	d082      	beq.n	8007b46 <_dtoa_r+0x816>
 8007c40:	9a05      	ldr	r2, [sp, #20]
 8007c42:	331c      	adds	r3, #28
 8007c44:	441a      	add	r2, r3
 8007c46:	9205      	str	r2, [sp, #20]
 8007c48:	9a06      	ldr	r2, [sp, #24]
 8007c4a:	441a      	add	r2, r3
 8007c4c:	441d      	add	r5, r3
 8007c4e:	9206      	str	r2, [sp, #24]
 8007c50:	e779      	b.n	8007b46 <_dtoa_r+0x816>
 8007c52:	4603      	mov	r3, r0
 8007c54:	e7f4      	b.n	8007c40 <_dtoa_r+0x910>
 8007c56:	9b04      	ldr	r3, [sp, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	dc37      	bgt.n	8007ccc <_dtoa_r+0x99c>
 8007c5c:	9b07      	ldr	r3, [sp, #28]
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	dd34      	ble.n	8007ccc <_dtoa_r+0x99c>
 8007c62:	9b04      	ldr	r3, [sp, #16]
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	9b01      	ldr	r3, [sp, #4]
 8007c68:	b963      	cbnz	r3, 8007c84 <_dtoa_r+0x954>
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	2205      	movs	r2, #5
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f001 fb7c 	bl	800936c <__multadd>
 8007c74:	4601      	mov	r1, r0
 8007c76:	4606      	mov	r6, r0
 8007c78:	4650      	mov	r0, sl
 8007c7a:	f001 fddb 	bl	8009834 <__mcmp>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	f73f adbb 	bgt.w	80077fa <_dtoa_r+0x4ca>
 8007c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c86:	9d00      	ldr	r5, [sp, #0]
 8007c88:	ea6f 0b03 	mvn.w	fp, r3
 8007c8c:	f04f 0800 	mov.w	r8, #0
 8007c90:	4631      	mov	r1, r6
 8007c92:	4620      	mov	r0, r4
 8007c94:	f001 fb48 	bl	8009328 <_Bfree>
 8007c98:	2f00      	cmp	r7, #0
 8007c9a:	f43f aeab 	beq.w	80079f4 <_dtoa_r+0x6c4>
 8007c9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ca2:	d005      	beq.n	8007cb0 <_dtoa_r+0x980>
 8007ca4:	45b8      	cmp	r8, r7
 8007ca6:	d003      	beq.n	8007cb0 <_dtoa_r+0x980>
 8007ca8:	4641      	mov	r1, r8
 8007caa:	4620      	mov	r0, r4
 8007cac:	f001 fb3c 	bl	8009328 <_Bfree>
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f001 fb38 	bl	8009328 <_Bfree>
 8007cb8:	e69c      	b.n	80079f4 <_dtoa_r+0x6c4>
 8007cba:	2600      	movs	r6, #0
 8007cbc:	4637      	mov	r7, r6
 8007cbe:	e7e1      	b.n	8007c84 <_dtoa_r+0x954>
 8007cc0:	46bb      	mov	fp, r7
 8007cc2:	4637      	mov	r7, r6
 8007cc4:	e599      	b.n	80077fa <_dtoa_r+0x4ca>
 8007cc6:	bf00      	nop
 8007cc8:	40240000 	.word	0x40240000
 8007ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 80c8 	beq.w	8007e64 <_dtoa_r+0xb34>
 8007cd4:	9b04      	ldr	r3, [sp, #16]
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	2d00      	cmp	r5, #0
 8007cda:	dd05      	ble.n	8007ce8 <_dtoa_r+0x9b8>
 8007cdc:	4639      	mov	r1, r7
 8007cde:	462a      	mov	r2, r5
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f001 fd3b 	bl	800975c <__lshift>
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	f1b8 0f00 	cmp.w	r8, #0
 8007cec:	d05b      	beq.n	8007da6 <_dtoa_r+0xa76>
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f001 fad9 	bl	80092a8 <_Balloc>
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	b928      	cbnz	r0, 8007d06 <_dtoa_r+0x9d6>
 8007cfa:	4b83      	ldr	r3, [pc, #524]	; (8007f08 <_dtoa_r+0xbd8>)
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007d02:	f7ff bb2e 	b.w	8007362 <_dtoa_r+0x32>
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	3202      	adds	r2, #2
 8007d0a:	0092      	lsls	r2, r2, #2
 8007d0c:	f107 010c 	add.w	r1, r7, #12
 8007d10:	300c      	adds	r0, #12
 8007d12:	f7ff fa65 	bl	80071e0 <memcpy>
 8007d16:	2201      	movs	r2, #1
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f001 fd1e 	bl	800975c <__lshift>
 8007d20:	9b00      	ldr	r3, [sp, #0]
 8007d22:	3301      	adds	r3, #1
 8007d24:	9304      	str	r3, [sp, #16]
 8007d26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	9308      	str	r3, [sp, #32]
 8007d2e:	9b02      	ldr	r3, [sp, #8]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	46b8      	mov	r8, r7
 8007d36:	9306      	str	r3, [sp, #24]
 8007d38:	4607      	mov	r7, r0
 8007d3a:	9b04      	ldr	r3, [sp, #16]
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	4650      	mov	r0, sl
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	f7ff fa6a 	bl	800721c <quorem>
 8007d48:	4641      	mov	r1, r8
 8007d4a:	9002      	str	r0, [sp, #8]
 8007d4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d50:	4650      	mov	r0, sl
 8007d52:	f001 fd6f 	bl	8009834 <__mcmp>
 8007d56:	463a      	mov	r2, r7
 8007d58:	9005      	str	r0, [sp, #20]
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f001 fd85 	bl	800986c <__mdiff>
 8007d62:	68c2      	ldr	r2, [r0, #12]
 8007d64:	4605      	mov	r5, r0
 8007d66:	bb02      	cbnz	r2, 8007daa <_dtoa_r+0xa7a>
 8007d68:	4601      	mov	r1, r0
 8007d6a:	4650      	mov	r0, sl
 8007d6c:	f001 fd62 	bl	8009834 <__mcmp>
 8007d70:	4602      	mov	r2, r0
 8007d72:	4629      	mov	r1, r5
 8007d74:	4620      	mov	r0, r4
 8007d76:	9209      	str	r2, [sp, #36]	; 0x24
 8007d78:	f001 fad6 	bl	8009328 <_Bfree>
 8007d7c:	9b07      	ldr	r3, [sp, #28]
 8007d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d80:	9d04      	ldr	r5, [sp, #16]
 8007d82:	ea43 0102 	orr.w	r1, r3, r2
 8007d86:	9b06      	ldr	r3, [sp, #24]
 8007d88:	4319      	orrs	r1, r3
 8007d8a:	d110      	bne.n	8007dae <_dtoa_r+0xa7e>
 8007d8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d90:	d029      	beq.n	8007de6 <_dtoa_r+0xab6>
 8007d92:	9b05      	ldr	r3, [sp, #20]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	dd02      	ble.n	8007d9e <_dtoa_r+0xa6e>
 8007d98:	9b02      	ldr	r3, [sp, #8]
 8007d9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007d9e:	9b01      	ldr	r3, [sp, #4]
 8007da0:	f883 9000 	strb.w	r9, [r3]
 8007da4:	e774      	b.n	8007c90 <_dtoa_r+0x960>
 8007da6:	4638      	mov	r0, r7
 8007da8:	e7ba      	b.n	8007d20 <_dtoa_r+0x9f0>
 8007daa:	2201      	movs	r2, #1
 8007dac:	e7e1      	b.n	8007d72 <_dtoa_r+0xa42>
 8007dae:	9b05      	ldr	r3, [sp, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	db04      	blt.n	8007dbe <_dtoa_r+0xa8e>
 8007db4:	9907      	ldr	r1, [sp, #28]
 8007db6:	430b      	orrs	r3, r1
 8007db8:	9906      	ldr	r1, [sp, #24]
 8007dba:	430b      	orrs	r3, r1
 8007dbc:	d120      	bne.n	8007e00 <_dtoa_r+0xad0>
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	dded      	ble.n	8007d9e <_dtoa_r+0xa6e>
 8007dc2:	4651      	mov	r1, sl
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f001 fcc8 	bl	800975c <__lshift>
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4682      	mov	sl, r0
 8007dd0:	f001 fd30 	bl	8009834 <__mcmp>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	dc03      	bgt.n	8007de0 <_dtoa_r+0xab0>
 8007dd8:	d1e1      	bne.n	8007d9e <_dtoa_r+0xa6e>
 8007dda:	f019 0f01 	tst.w	r9, #1
 8007dde:	d0de      	beq.n	8007d9e <_dtoa_r+0xa6e>
 8007de0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007de4:	d1d8      	bne.n	8007d98 <_dtoa_r+0xa68>
 8007de6:	9a01      	ldr	r2, [sp, #4]
 8007de8:	2339      	movs	r3, #57	; 0x39
 8007dea:	7013      	strb	r3, [r2, #0]
 8007dec:	462b      	mov	r3, r5
 8007dee:	461d      	mov	r5, r3
 8007df0:	3b01      	subs	r3, #1
 8007df2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007df6:	2a39      	cmp	r2, #57	; 0x39
 8007df8:	d06c      	beq.n	8007ed4 <_dtoa_r+0xba4>
 8007dfa:	3201      	adds	r2, #1
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	e747      	b.n	8007c90 <_dtoa_r+0x960>
 8007e00:	2a00      	cmp	r2, #0
 8007e02:	dd07      	ble.n	8007e14 <_dtoa_r+0xae4>
 8007e04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e08:	d0ed      	beq.n	8007de6 <_dtoa_r+0xab6>
 8007e0a:	9a01      	ldr	r2, [sp, #4]
 8007e0c:	f109 0301 	add.w	r3, r9, #1
 8007e10:	7013      	strb	r3, [r2, #0]
 8007e12:	e73d      	b.n	8007c90 <_dtoa_r+0x960>
 8007e14:	9b04      	ldr	r3, [sp, #16]
 8007e16:	9a08      	ldr	r2, [sp, #32]
 8007e18:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d043      	beq.n	8007ea8 <_dtoa_r+0xb78>
 8007e20:	4651      	mov	r1, sl
 8007e22:	2300      	movs	r3, #0
 8007e24:	220a      	movs	r2, #10
 8007e26:	4620      	mov	r0, r4
 8007e28:	f001 faa0 	bl	800936c <__multadd>
 8007e2c:	45b8      	cmp	r8, r7
 8007e2e:	4682      	mov	sl, r0
 8007e30:	f04f 0300 	mov.w	r3, #0
 8007e34:	f04f 020a 	mov.w	r2, #10
 8007e38:	4641      	mov	r1, r8
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	d107      	bne.n	8007e4e <_dtoa_r+0xb1e>
 8007e3e:	f001 fa95 	bl	800936c <__multadd>
 8007e42:	4680      	mov	r8, r0
 8007e44:	4607      	mov	r7, r0
 8007e46:	9b04      	ldr	r3, [sp, #16]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	9304      	str	r3, [sp, #16]
 8007e4c:	e775      	b.n	8007d3a <_dtoa_r+0xa0a>
 8007e4e:	f001 fa8d 	bl	800936c <__multadd>
 8007e52:	4639      	mov	r1, r7
 8007e54:	4680      	mov	r8, r0
 8007e56:	2300      	movs	r3, #0
 8007e58:	220a      	movs	r2, #10
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f001 fa86 	bl	800936c <__multadd>
 8007e60:	4607      	mov	r7, r0
 8007e62:	e7f0      	b.n	8007e46 <_dtoa_r+0xb16>
 8007e64:	9b04      	ldr	r3, [sp, #16]
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	9d00      	ldr	r5, [sp, #0]
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	4650      	mov	r0, sl
 8007e6e:	f7ff f9d5 	bl	800721c <quorem>
 8007e72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e76:	9b00      	ldr	r3, [sp, #0]
 8007e78:	f805 9b01 	strb.w	r9, [r5], #1
 8007e7c:	1aea      	subs	r2, r5, r3
 8007e7e:	9b01      	ldr	r3, [sp, #4]
 8007e80:	4293      	cmp	r3, r2
 8007e82:	dd07      	ble.n	8007e94 <_dtoa_r+0xb64>
 8007e84:	4651      	mov	r1, sl
 8007e86:	2300      	movs	r3, #0
 8007e88:	220a      	movs	r2, #10
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f001 fa6e 	bl	800936c <__multadd>
 8007e90:	4682      	mov	sl, r0
 8007e92:	e7ea      	b.n	8007e6a <_dtoa_r+0xb3a>
 8007e94:	9b01      	ldr	r3, [sp, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	bfc8      	it	gt
 8007e9a:	461d      	movgt	r5, r3
 8007e9c:	9b00      	ldr	r3, [sp, #0]
 8007e9e:	bfd8      	it	le
 8007ea0:	2501      	movle	r5, #1
 8007ea2:	441d      	add	r5, r3
 8007ea4:	f04f 0800 	mov.w	r8, #0
 8007ea8:	4651      	mov	r1, sl
 8007eaa:	2201      	movs	r2, #1
 8007eac:	4620      	mov	r0, r4
 8007eae:	f001 fc55 	bl	800975c <__lshift>
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4682      	mov	sl, r0
 8007eb6:	f001 fcbd 	bl	8009834 <__mcmp>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	dc96      	bgt.n	8007dec <_dtoa_r+0xabc>
 8007ebe:	d102      	bne.n	8007ec6 <_dtoa_r+0xb96>
 8007ec0:	f019 0f01 	tst.w	r9, #1
 8007ec4:	d192      	bne.n	8007dec <_dtoa_r+0xabc>
 8007ec6:	462b      	mov	r3, r5
 8007ec8:	461d      	mov	r5, r3
 8007eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ece:	2a30      	cmp	r2, #48	; 0x30
 8007ed0:	d0fa      	beq.n	8007ec8 <_dtoa_r+0xb98>
 8007ed2:	e6dd      	b.n	8007c90 <_dtoa_r+0x960>
 8007ed4:	9a00      	ldr	r2, [sp, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d189      	bne.n	8007dee <_dtoa_r+0xabe>
 8007eda:	f10b 0b01 	add.w	fp, fp, #1
 8007ede:	2331      	movs	r3, #49	; 0x31
 8007ee0:	e796      	b.n	8007e10 <_dtoa_r+0xae0>
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <_dtoa_r+0xbdc>)
 8007ee4:	f7ff ba99 	b.w	800741a <_dtoa_r+0xea>
 8007ee8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f47f aa6d 	bne.w	80073ca <_dtoa_r+0x9a>
 8007ef0:	4b07      	ldr	r3, [pc, #28]	; (8007f10 <_dtoa_r+0xbe0>)
 8007ef2:	f7ff ba92 	b.w	800741a <_dtoa_r+0xea>
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	dcb5      	bgt.n	8007e68 <_dtoa_r+0xb38>
 8007efc:	9b07      	ldr	r3, [sp, #28]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	f73f aeb1 	bgt.w	8007c66 <_dtoa_r+0x936>
 8007f04:	e7b0      	b.n	8007e68 <_dtoa_r+0xb38>
 8007f06:	bf00      	nop
 8007f08:	0800a745 	.word	0x0800a745
 8007f0c:	0800a7dd 	.word	0x0800a7dd
 8007f10:	0800a6c9 	.word	0x0800a6c9

08007f14 <_free_r>:
 8007f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f16:	2900      	cmp	r1, #0
 8007f18:	d044      	beq.n	8007fa4 <_free_r+0x90>
 8007f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f1e:	9001      	str	r0, [sp, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f1a1 0404 	sub.w	r4, r1, #4
 8007f26:	bfb8      	it	lt
 8007f28:	18e4      	addlt	r4, r4, r3
 8007f2a:	f001 f9b1 	bl	8009290 <__malloc_lock>
 8007f2e:	4a1e      	ldr	r2, [pc, #120]	; (8007fa8 <_free_r+0x94>)
 8007f30:	9801      	ldr	r0, [sp, #4]
 8007f32:	6813      	ldr	r3, [r2, #0]
 8007f34:	b933      	cbnz	r3, 8007f44 <_free_r+0x30>
 8007f36:	6063      	str	r3, [r4, #4]
 8007f38:	6014      	str	r4, [r2, #0]
 8007f3a:	b003      	add	sp, #12
 8007f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f40:	f001 b9ac 	b.w	800929c <__malloc_unlock>
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	d908      	bls.n	8007f5a <_free_r+0x46>
 8007f48:	6825      	ldr	r5, [r4, #0]
 8007f4a:	1961      	adds	r1, r4, r5
 8007f4c:	428b      	cmp	r3, r1
 8007f4e:	bf01      	itttt	eq
 8007f50:	6819      	ldreq	r1, [r3, #0]
 8007f52:	685b      	ldreq	r3, [r3, #4]
 8007f54:	1949      	addeq	r1, r1, r5
 8007f56:	6021      	streq	r1, [r4, #0]
 8007f58:	e7ed      	b.n	8007f36 <_free_r+0x22>
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	b10b      	cbz	r3, 8007f64 <_free_r+0x50>
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	d9fa      	bls.n	8007f5a <_free_r+0x46>
 8007f64:	6811      	ldr	r1, [r2, #0]
 8007f66:	1855      	adds	r5, r2, r1
 8007f68:	42a5      	cmp	r5, r4
 8007f6a:	d10b      	bne.n	8007f84 <_free_r+0x70>
 8007f6c:	6824      	ldr	r4, [r4, #0]
 8007f6e:	4421      	add	r1, r4
 8007f70:	1854      	adds	r4, r2, r1
 8007f72:	42a3      	cmp	r3, r4
 8007f74:	6011      	str	r1, [r2, #0]
 8007f76:	d1e0      	bne.n	8007f3a <_free_r+0x26>
 8007f78:	681c      	ldr	r4, [r3, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	6053      	str	r3, [r2, #4]
 8007f7e:	440c      	add	r4, r1
 8007f80:	6014      	str	r4, [r2, #0]
 8007f82:	e7da      	b.n	8007f3a <_free_r+0x26>
 8007f84:	d902      	bls.n	8007f8c <_free_r+0x78>
 8007f86:	230c      	movs	r3, #12
 8007f88:	6003      	str	r3, [r0, #0]
 8007f8a:	e7d6      	b.n	8007f3a <_free_r+0x26>
 8007f8c:	6825      	ldr	r5, [r4, #0]
 8007f8e:	1961      	adds	r1, r4, r5
 8007f90:	428b      	cmp	r3, r1
 8007f92:	bf04      	itt	eq
 8007f94:	6819      	ldreq	r1, [r3, #0]
 8007f96:	685b      	ldreq	r3, [r3, #4]
 8007f98:	6063      	str	r3, [r4, #4]
 8007f9a:	bf04      	itt	eq
 8007f9c:	1949      	addeq	r1, r1, r5
 8007f9e:	6021      	streq	r1, [r4, #0]
 8007fa0:	6054      	str	r4, [r2, #4]
 8007fa2:	e7ca      	b.n	8007f3a <_free_r+0x26>
 8007fa4:	b003      	add	sp, #12
 8007fa6:	bd30      	pop	{r4, r5, pc}
 8007fa8:	20000660 	.word	0x20000660

08007fac <rshift>:
 8007fac:	6903      	ldr	r3, [r0, #16]
 8007fae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007fb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007fba:	f100 0414 	add.w	r4, r0, #20
 8007fbe:	dd45      	ble.n	800804c <rshift+0xa0>
 8007fc0:	f011 011f 	ands.w	r1, r1, #31
 8007fc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007fc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007fcc:	d10c      	bne.n	8007fe8 <rshift+0x3c>
 8007fce:	f100 0710 	add.w	r7, r0, #16
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	42b1      	cmp	r1, r6
 8007fd6:	d334      	bcc.n	8008042 <rshift+0x96>
 8007fd8:	1a9b      	subs	r3, r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	1eea      	subs	r2, r5, #3
 8007fde:	4296      	cmp	r6, r2
 8007fe0:	bf38      	it	cc
 8007fe2:	2300      	movcc	r3, #0
 8007fe4:	4423      	add	r3, r4
 8007fe6:	e015      	b.n	8008014 <rshift+0x68>
 8007fe8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007fec:	f1c1 0820 	rsb	r8, r1, #32
 8007ff0:	40cf      	lsrs	r7, r1
 8007ff2:	f105 0e04 	add.w	lr, r5, #4
 8007ff6:	46a1      	mov	r9, r4
 8007ff8:	4576      	cmp	r6, lr
 8007ffa:	46f4      	mov	ip, lr
 8007ffc:	d815      	bhi.n	800802a <rshift+0x7e>
 8007ffe:	1a9a      	subs	r2, r3, r2
 8008000:	0092      	lsls	r2, r2, #2
 8008002:	3a04      	subs	r2, #4
 8008004:	3501      	adds	r5, #1
 8008006:	42ae      	cmp	r6, r5
 8008008:	bf38      	it	cc
 800800a:	2200      	movcc	r2, #0
 800800c:	18a3      	adds	r3, r4, r2
 800800e:	50a7      	str	r7, [r4, r2]
 8008010:	b107      	cbz	r7, 8008014 <rshift+0x68>
 8008012:	3304      	adds	r3, #4
 8008014:	1b1a      	subs	r2, r3, r4
 8008016:	42a3      	cmp	r3, r4
 8008018:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800801c:	bf08      	it	eq
 800801e:	2300      	moveq	r3, #0
 8008020:	6102      	str	r2, [r0, #16]
 8008022:	bf08      	it	eq
 8008024:	6143      	streq	r3, [r0, #20]
 8008026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800802a:	f8dc c000 	ldr.w	ip, [ip]
 800802e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008032:	ea4c 0707 	orr.w	r7, ip, r7
 8008036:	f849 7b04 	str.w	r7, [r9], #4
 800803a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800803e:	40cf      	lsrs	r7, r1
 8008040:	e7da      	b.n	8007ff8 <rshift+0x4c>
 8008042:	f851 cb04 	ldr.w	ip, [r1], #4
 8008046:	f847 cf04 	str.w	ip, [r7, #4]!
 800804a:	e7c3      	b.n	8007fd4 <rshift+0x28>
 800804c:	4623      	mov	r3, r4
 800804e:	e7e1      	b.n	8008014 <rshift+0x68>

08008050 <__hexdig_fun>:
 8008050:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008054:	2b09      	cmp	r3, #9
 8008056:	d802      	bhi.n	800805e <__hexdig_fun+0xe>
 8008058:	3820      	subs	r0, #32
 800805a:	b2c0      	uxtb	r0, r0
 800805c:	4770      	bx	lr
 800805e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008062:	2b05      	cmp	r3, #5
 8008064:	d801      	bhi.n	800806a <__hexdig_fun+0x1a>
 8008066:	3847      	subs	r0, #71	; 0x47
 8008068:	e7f7      	b.n	800805a <__hexdig_fun+0xa>
 800806a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800806e:	2b05      	cmp	r3, #5
 8008070:	d801      	bhi.n	8008076 <__hexdig_fun+0x26>
 8008072:	3827      	subs	r0, #39	; 0x27
 8008074:	e7f1      	b.n	800805a <__hexdig_fun+0xa>
 8008076:	2000      	movs	r0, #0
 8008078:	4770      	bx	lr
	...

0800807c <__gethex>:
 800807c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008080:	4617      	mov	r7, r2
 8008082:	680a      	ldr	r2, [r1, #0]
 8008084:	b085      	sub	sp, #20
 8008086:	f102 0b02 	add.w	fp, r2, #2
 800808a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800808e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008092:	4681      	mov	r9, r0
 8008094:	468a      	mov	sl, r1
 8008096:	9302      	str	r3, [sp, #8]
 8008098:	32fe      	adds	r2, #254	; 0xfe
 800809a:	eb02 030b 	add.w	r3, r2, fp
 800809e:	46d8      	mov	r8, fp
 80080a0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	2830      	cmp	r0, #48	; 0x30
 80080a8:	d0f7      	beq.n	800809a <__gethex+0x1e>
 80080aa:	f7ff ffd1 	bl	8008050 <__hexdig_fun>
 80080ae:	4604      	mov	r4, r0
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d138      	bne.n	8008126 <__gethex+0xaa>
 80080b4:	49a7      	ldr	r1, [pc, #668]	; (8008354 <__gethex+0x2d8>)
 80080b6:	2201      	movs	r2, #1
 80080b8:	4640      	mov	r0, r8
 80080ba:	f7ff f801 	bl	80070c0 <strncmp>
 80080be:	4606      	mov	r6, r0
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d169      	bne.n	8008198 <__gethex+0x11c>
 80080c4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80080c8:	465d      	mov	r5, fp
 80080ca:	f7ff ffc1 	bl	8008050 <__hexdig_fun>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d064      	beq.n	800819c <__gethex+0x120>
 80080d2:	465a      	mov	r2, fp
 80080d4:	7810      	ldrb	r0, [r2, #0]
 80080d6:	2830      	cmp	r0, #48	; 0x30
 80080d8:	4690      	mov	r8, r2
 80080da:	f102 0201 	add.w	r2, r2, #1
 80080de:	d0f9      	beq.n	80080d4 <__gethex+0x58>
 80080e0:	f7ff ffb6 	bl	8008050 <__hexdig_fun>
 80080e4:	2301      	movs	r3, #1
 80080e6:	fab0 f480 	clz	r4, r0
 80080ea:	0964      	lsrs	r4, r4, #5
 80080ec:	465e      	mov	r6, fp
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	4642      	mov	r2, r8
 80080f2:	4615      	mov	r5, r2
 80080f4:	3201      	adds	r2, #1
 80080f6:	7828      	ldrb	r0, [r5, #0]
 80080f8:	f7ff ffaa 	bl	8008050 <__hexdig_fun>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d1f8      	bne.n	80080f2 <__gethex+0x76>
 8008100:	4994      	ldr	r1, [pc, #592]	; (8008354 <__gethex+0x2d8>)
 8008102:	2201      	movs	r2, #1
 8008104:	4628      	mov	r0, r5
 8008106:	f7fe ffdb 	bl	80070c0 <strncmp>
 800810a:	b978      	cbnz	r0, 800812c <__gethex+0xb0>
 800810c:	b946      	cbnz	r6, 8008120 <__gethex+0xa4>
 800810e:	1c6e      	adds	r6, r5, #1
 8008110:	4632      	mov	r2, r6
 8008112:	4615      	mov	r5, r2
 8008114:	3201      	adds	r2, #1
 8008116:	7828      	ldrb	r0, [r5, #0]
 8008118:	f7ff ff9a 	bl	8008050 <__hexdig_fun>
 800811c:	2800      	cmp	r0, #0
 800811e:	d1f8      	bne.n	8008112 <__gethex+0x96>
 8008120:	1b73      	subs	r3, r6, r5
 8008122:	009e      	lsls	r6, r3, #2
 8008124:	e004      	b.n	8008130 <__gethex+0xb4>
 8008126:	2400      	movs	r4, #0
 8008128:	4626      	mov	r6, r4
 800812a:	e7e1      	b.n	80080f0 <__gethex+0x74>
 800812c:	2e00      	cmp	r6, #0
 800812e:	d1f7      	bne.n	8008120 <__gethex+0xa4>
 8008130:	782b      	ldrb	r3, [r5, #0]
 8008132:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008136:	2b50      	cmp	r3, #80	; 0x50
 8008138:	d13d      	bne.n	80081b6 <__gethex+0x13a>
 800813a:	786b      	ldrb	r3, [r5, #1]
 800813c:	2b2b      	cmp	r3, #43	; 0x2b
 800813e:	d02f      	beq.n	80081a0 <__gethex+0x124>
 8008140:	2b2d      	cmp	r3, #45	; 0x2d
 8008142:	d031      	beq.n	80081a8 <__gethex+0x12c>
 8008144:	1c69      	adds	r1, r5, #1
 8008146:	f04f 0b00 	mov.w	fp, #0
 800814a:	7808      	ldrb	r0, [r1, #0]
 800814c:	f7ff ff80 	bl	8008050 <__hexdig_fun>
 8008150:	1e42      	subs	r2, r0, #1
 8008152:	b2d2      	uxtb	r2, r2
 8008154:	2a18      	cmp	r2, #24
 8008156:	d82e      	bhi.n	80081b6 <__gethex+0x13a>
 8008158:	f1a0 0210 	sub.w	r2, r0, #16
 800815c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008160:	f7ff ff76 	bl	8008050 <__hexdig_fun>
 8008164:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8008168:	fa5f fc8c 	uxtb.w	ip, ip
 800816c:	f1bc 0f18 	cmp.w	ip, #24
 8008170:	d91d      	bls.n	80081ae <__gethex+0x132>
 8008172:	f1bb 0f00 	cmp.w	fp, #0
 8008176:	d000      	beq.n	800817a <__gethex+0xfe>
 8008178:	4252      	negs	r2, r2
 800817a:	4416      	add	r6, r2
 800817c:	f8ca 1000 	str.w	r1, [sl]
 8008180:	b1dc      	cbz	r4, 80081ba <__gethex+0x13e>
 8008182:	9b01      	ldr	r3, [sp, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	bf14      	ite	ne
 8008188:	f04f 0800 	movne.w	r8, #0
 800818c:	f04f 0806 	moveq.w	r8, #6
 8008190:	4640      	mov	r0, r8
 8008192:	b005      	add	sp, #20
 8008194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008198:	4645      	mov	r5, r8
 800819a:	4626      	mov	r6, r4
 800819c:	2401      	movs	r4, #1
 800819e:	e7c7      	b.n	8008130 <__gethex+0xb4>
 80081a0:	f04f 0b00 	mov.w	fp, #0
 80081a4:	1ca9      	adds	r1, r5, #2
 80081a6:	e7d0      	b.n	800814a <__gethex+0xce>
 80081a8:	f04f 0b01 	mov.w	fp, #1
 80081ac:	e7fa      	b.n	80081a4 <__gethex+0x128>
 80081ae:	230a      	movs	r3, #10
 80081b0:	fb03 0002 	mla	r0, r3, r2, r0
 80081b4:	e7d0      	b.n	8008158 <__gethex+0xdc>
 80081b6:	4629      	mov	r1, r5
 80081b8:	e7e0      	b.n	800817c <__gethex+0x100>
 80081ba:	eba5 0308 	sub.w	r3, r5, r8
 80081be:	3b01      	subs	r3, #1
 80081c0:	4621      	mov	r1, r4
 80081c2:	2b07      	cmp	r3, #7
 80081c4:	dc0a      	bgt.n	80081dc <__gethex+0x160>
 80081c6:	4648      	mov	r0, r9
 80081c8:	f001 f86e 	bl	80092a8 <_Balloc>
 80081cc:	4604      	mov	r4, r0
 80081ce:	b940      	cbnz	r0, 80081e2 <__gethex+0x166>
 80081d0:	4b61      	ldr	r3, [pc, #388]	; (8008358 <__gethex+0x2dc>)
 80081d2:	4602      	mov	r2, r0
 80081d4:	21e4      	movs	r1, #228	; 0xe4
 80081d6:	4861      	ldr	r0, [pc, #388]	; (800835c <__gethex+0x2e0>)
 80081d8:	f001 fe28 	bl	8009e2c <__assert_func>
 80081dc:	3101      	adds	r1, #1
 80081de:	105b      	asrs	r3, r3, #1
 80081e0:	e7ef      	b.n	80081c2 <__gethex+0x146>
 80081e2:	f100 0a14 	add.w	sl, r0, #20
 80081e6:	2300      	movs	r3, #0
 80081e8:	495a      	ldr	r1, [pc, #360]	; (8008354 <__gethex+0x2d8>)
 80081ea:	f8cd a004 	str.w	sl, [sp, #4]
 80081ee:	469b      	mov	fp, r3
 80081f0:	45a8      	cmp	r8, r5
 80081f2:	d342      	bcc.n	800827a <__gethex+0x1fe>
 80081f4:	9801      	ldr	r0, [sp, #4]
 80081f6:	f840 bb04 	str.w	fp, [r0], #4
 80081fa:	eba0 000a 	sub.w	r0, r0, sl
 80081fe:	1080      	asrs	r0, r0, #2
 8008200:	6120      	str	r0, [r4, #16]
 8008202:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008206:	4658      	mov	r0, fp
 8008208:	f001 f940 	bl	800948c <__hi0bits>
 800820c:	683d      	ldr	r5, [r7, #0]
 800820e:	eba8 0000 	sub.w	r0, r8, r0
 8008212:	42a8      	cmp	r0, r5
 8008214:	dd59      	ble.n	80082ca <__gethex+0x24e>
 8008216:	eba0 0805 	sub.w	r8, r0, r5
 800821a:	4641      	mov	r1, r8
 800821c:	4620      	mov	r0, r4
 800821e:	f001 fccf 	bl	8009bc0 <__any_on>
 8008222:	4683      	mov	fp, r0
 8008224:	b1b8      	cbz	r0, 8008256 <__gethex+0x1da>
 8008226:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800822a:	1159      	asrs	r1, r3, #5
 800822c:	f003 021f 	and.w	r2, r3, #31
 8008230:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008234:	f04f 0b01 	mov.w	fp, #1
 8008238:	fa0b f202 	lsl.w	r2, fp, r2
 800823c:	420a      	tst	r2, r1
 800823e:	d00a      	beq.n	8008256 <__gethex+0x1da>
 8008240:	455b      	cmp	r3, fp
 8008242:	dd06      	ble.n	8008252 <__gethex+0x1d6>
 8008244:	f1a8 0102 	sub.w	r1, r8, #2
 8008248:	4620      	mov	r0, r4
 800824a:	f001 fcb9 	bl	8009bc0 <__any_on>
 800824e:	2800      	cmp	r0, #0
 8008250:	d138      	bne.n	80082c4 <__gethex+0x248>
 8008252:	f04f 0b02 	mov.w	fp, #2
 8008256:	4641      	mov	r1, r8
 8008258:	4620      	mov	r0, r4
 800825a:	f7ff fea7 	bl	8007fac <rshift>
 800825e:	4446      	add	r6, r8
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	42b3      	cmp	r3, r6
 8008264:	da41      	bge.n	80082ea <__gethex+0x26e>
 8008266:	4621      	mov	r1, r4
 8008268:	4648      	mov	r0, r9
 800826a:	f001 f85d 	bl	8009328 <_Bfree>
 800826e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008270:	2300      	movs	r3, #0
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008278:	e78a      	b.n	8008190 <__gethex+0x114>
 800827a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800827e:	2a2e      	cmp	r2, #46	; 0x2e
 8008280:	d014      	beq.n	80082ac <__gethex+0x230>
 8008282:	2b20      	cmp	r3, #32
 8008284:	d106      	bne.n	8008294 <__gethex+0x218>
 8008286:	9b01      	ldr	r3, [sp, #4]
 8008288:	f843 bb04 	str.w	fp, [r3], #4
 800828c:	f04f 0b00 	mov.w	fp, #0
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	465b      	mov	r3, fp
 8008294:	7828      	ldrb	r0, [r5, #0]
 8008296:	9303      	str	r3, [sp, #12]
 8008298:	f7ff feda 	bl	8008050 <__hexdig_fun>
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	f000 000f 	and.w	r0, r0, #15
 80082a2:	4098      	lsls	r0, r3
 80082a4:	ea4b 0b00 	orr.w	fp, fp, r0
 80082a8:	3304      	adds	r3, #4
 80082aa:	e7a1      	b.n	80081f0 <__gethex+0x174>
 80082ac:	45a8      	cmp	r8, r5
 80082ae:	d8e8      	bhi.n	8008282 <__gethex+0x206>
 80082b0:	2201      	movs	r2, #1
 80082b2:	4628      	mov	r0, r5
 80082b4:	9303      	str	r3, [sp, #12]
 80082b6:	f7fe ff03 	bl	80070c0 <strncmp>
 80082ba:	4926      	ldr	r1, [pc, #152]	; (8008354 <__gethex+0x2d8>)
 80082bc:	9b03      	ldr	r3, [sp, #12]
 80082be:	2800      	cmp	r0, #0
 80082c0:	d1df      	bne.n	8008282 <__gethex+0x206>
 80082c2:	e795      	b.n	80081f0 <__gethex+0x174>
 80082c4:	f04f 0b03 	mov.w	fp, #3
 80082c8:	e7c5      	b.n	8008256 <__gethex+0x1da>
 80082ca:	da0b      	bge.n	80082e4 <__gethex+0x268>
 80082cc:	eba5 0800 	sub.w	r8, r5, r0
 80082d0:	4621      	mov	r1, r4
 80082d2:	4642      	mov	r2, r8
 80082d4:	4648      	mov	r0, r9
 80082d6:	f001 fa41 	bl	800975c <__lshift>
 80082da:	eba6 0608 	sub.w	r6, r6, r8
 80082de:	4604      	mov	r4, r0
 80082e0:	f100 0a14 	add.w	sl, r0, #20
 80082e4:	f04f 0b00 	mov.w	fp, #0
 80082e8:	e7ba      	b.n	8008260 <__gethex+0x1e4>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	42b3      	cmp	r3, r6
 80082ee:	dd73      	ble.n	80083d8 <__gethex+0x35c>
 80082f0:	1b9e      	subs	r6, r3, r6
 80082f2:	42b5      	cmp	r5, r6
 80082f4:	dc34      	bgt.n	8008360 <__gethex+0x2e4>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d023      	beq.n	8008344 <__gethex+0x2c8>
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d025      	beq.n	800834c <__gethex+0x2d0>
 8008300:	2b01      	cmp	r3, #1
 8008302:	d115      	bne.n	8008330 <__gethex+0x2b4>
 8008304:	42b5      	cmp	r5, r6
 8008306:	d113      	bne.n	8008330 <__gethex+0x2b4>
 8008308:	2d01      	cmp	r5, #1
 800830a:	d10b      	bne.n	8008324 <__gethex+0x2a8>
 800830c:	9a02      	ldr	r2, [sp, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	2301      	movs	r3, #1
 8008314:	6123      	str	r3, [r4, #16]
 8008316:	f8ca 3000 	str.w	r3, [sl]
 800831a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800831c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008320:	601c      	str	r4, [r3, #0]
 8008322:	e735      	b.n	8008190 <__gethex+0x114>
 8008324:	1e69      	subs	r1, r5, #1
 8008326:	4620      	mov	r0, r4
 8008328:	f001 fc4a 	bl	8009bc0 <__any_on>
 800832c:	2800      	cmp	r0, #0
 800832e:	d1ed      	bne.n	800830c <__gethex+0x290>
 8008330:	4621      	mov	r1, r4
 8008332:	4648      	mov	r0, r9
 8008334:	f000 fff8 	bl	8009328 <_Bfree>
 8008338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800833a:	2300      	movs	r3, #0
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008342:	e725      	b.n	8008190 <__gethex+0x114>
 8008344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1f2      	bne.n	8008330 <__gethex+0x2b4>
 800834a:	e7df      	b.n	800830c <__gethex+0x290>
 800834c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1dc      	bne.n	800830c <__gethex+0x290>
 8008352:	e7ed      	b.n	8008330 <__gethex+0x2b4>
 8008354:	0800a567 	.word	0x0800a567
 8008358:	0800a745 	.word	0x0800a745
 800835c:	0800a756 	.word	0x0800a756
 8008360:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8008364:	f1bb 0f00 	cmp.w	fp, #0
 8008368:	d133      	bne.n	80083d2 <__gethex+0x356>
 800836a:	f1b8 0f00 	cmp.w	r8, #0
 800836e:	d004      	beq.n	800837a <__gethex+0x2fe>
 8008370:	4641      	mov	r1, r8
 8008372:	4620      	mov	r0, r4
 8008374:	f001 fc24 	bl	8009bc0 <__any_on>
 8008378:	4683      	mov	fp, r0
 800837a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800837e:	2301      	movs	r3, #1
 8008380:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008384:	f008 081f 	and.w	r8, r8, #31
 8008388:	fa03 f308 	lsl.w	r3, r3, r8
 800838c:	4213      	tst	r3, r2
 800838e:	4631      	mov	r1, r6
 8008390:	4620      	mov	r0, r4
 8008392:	bf18      	it	ne
 8008394:	f04b 0b02 	orrne.w	fp, fp, #2
 8008398:	1bad      	subs	r5, r5, r6
 800839a:	f7ff fe07 	bl	8007fac <rshift>
 800839e:	687e      	ldr	r6, [r7, #4]
 80083a0:	f04f 0802 	mov.w	r8, #2
 80083a4:	f1bb 0f00 	cmp.w	fp, #0
 80083a8:	d04a      	beq.n	8008440 <__gethex+0x3c4>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d016      	beq.n	80083de <__gethex+0x362>
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d018      	beq.n	80083e6 <__gethex+0x36a>
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d109      	bne.n	80083cc <__gethex+0x350>
 80083b8:	f01b 0f02 	tst.w	fp, #2
 80083bc:	d006      	beq.n	80083cc <__gethex+0x350>
 80083be:	f8da 3000 	ldr.w	r3, [sl]
 80083c2:	ea4b 0b03 	orr.w	fp, fp, r3
 80083c6:	f01b 0f01 	tst.w	fp, #1
 80083ca:	d10f      	bne.n	80083ec <__gethex+0x370>
 80083cc:	f048 0810 	orr.w	r8, r8, #16
 80083d0:	e036      	b.n	8008440 <__gethex+0x3c4>
 80083d2:	f04f 0b01 	mov.w	fp, #1
 80083d6:	e7d0      	b.n	800837a <__gethex+0x2fe>
 80083d8:	f04f 0801 	mov.w	r8, #1
 80083dc:	e7e2      	b.n	80083a4 <__gethex+0x328>
 80083de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083e0:	f1c3 0301 	rsb	r3, r3, #1
 80083e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80083e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0ef      	beq.n	80083cc <__gethex+0x350>
 80083ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80083f0:	f104 0214 	add.w	r2, r4, #20
 80083f4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80083fe:	2300      	movs	r3, #0
 8008400:	4694      	mov	ip, r2
 8008402:	f852 1b04 	ldr.w	r1, [r2], #4
 8008406:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800840a:	d01e      	beq.n	800844a <__gethex+0x3ce>
 800840c:	3101      	adds	r1, #1
 800840e:	f8cc 1000 	str.w	r1, [ip]
 8008412:	f1b8 0f02 	cmp.w	r8, #2
 8008416:	f104 0214 	add.w	r2, r4, #20
 800841a:	d13d      	bne.n	8008498 <__gethex+0x41c>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	3b01      	subs	r3, #1
 8008420:	42ab      	cmp	r3, r5
 8008422:	d10b      	bne.n	800843c <__gethex+0x3c0>
 8008424:	1169      	asrs	r1, r5, #5
 8008426:	2301      	movs	r3, #1
 8008428:	f005 051f 	and.w	r5, r5, #31
 800842c:	fa03 f505 	lsl.w	r5, r3, r5
 8008430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008434:	421d      	tst	r5, r3
 8008436:	bf18      	it	ne
 8008438:	f04f 0801 	movne.w	r8, #1
 800843c:	f048 0820 	orr.w	r8, r8, #32
 8008440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008442:	601c      	str	r4, [r3, #0]
 8008444:	9b02      	ldr	r3, [sp, #8]
 8008446:	601e      	str	r6, [r3, #0]
 8008448:	e6a2      	b.n	8008190 <__gethex+0x114>
 800844a:	4290      	cmp	r0, r2
 800844c:	f842 3c04 	str.w	r3, [r2, #-4]
 8008450:	d8d6      	bhi.n	8008400 <__gethex+0x384>
 8008452:	68a2      	ldr	r2, [r4, #8]
 8008454:	4593      	cmp	fp, r2
 8008456:	db17      	blt.n	8008488 <__gethex+0x40c>
 8008458:	6861      	ldr	r1, [r4, #4]
 800845a:	4648      	mov	r0, r9
 800845c:	3101      	adds	r1, #1
 800845e:	f000 ff23 	bl	80092a8 <_Balloc>
 8008462:	4682      	mov	sl, r0
 8008464:	b918      	cbnz	r0, 800846e <__gethex+0x3f2>
 8008466:	4b1b      	ldr	r3, [pc, #108]	; (80084d4 <__gethex+0x458>)
 8008468:	4602      	mov	r2, r0
 800846a:	2184      	movs	r1, #132	; 0x84
 800846c:	e6b3      	b.n	80081d6 <__gethex+0x15a>
 800846e:	6922      	ldr	r2, [r4, #16]
 8008470:	3202      	adds	r2, #2
 8008472:	f104 010c 	add.w	r1, r4, #12
 8008476:	0092      	lsls	r2, r2, #2
 8008478:	300c      	adds	r0, #12
 800847a:	f7fe feb1 	bl	80071e0 <memcpy>
 800847e:	4621      	mov	r1, r4
 8008480:	4648      	mov	r0, r9
 8008482:	f000 ff51 	bl	8009328 <_Bfree>
 8008486:	4654      	mov	r4, sl
 8008488:	6922      	ldr	r2, [r4, #16]
 800848a:	1c51      	adds	r1, r2, #1
 800848c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008490:	6121      	str	r1, [r4, #16]
 8008492:	2101      	movs	r1, #1
 8008494:	6151      	str	r1, [r2, #20]
 8008496:	e7bc      	b.n	8008412 <__gethex+0x396>
 8008498:	6921      	ldr	r1, [r4, #16]
 800849a:	4559      	cmp	r1, fp
 800849c:	dd0b      	ble.n	80084b6 <__gethex+0x43a>
 800849e:	2101      	movs	r1, #1
 80084a0:	4620      	mov	r0, r4
 80084a2:	f7ff fd83 	bl	8007fac <rshift>
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	3601      	adds	r6, #1
 80084aa:	42b3      	cmp	r3, r6
 80084ac:	f6ff aedb 	blt.w	8008266 <__gethex+0x1ea>
 80084b0:	f04f 0801 	mov.w	r8, #1
 80084b4:	e7c2      	b.n	800843c <__gethex+0x3c0>
 80084b6:	f015 051f 	ands.w	r5, r5, #31
 80084ba:	d0f9      	beq.n	80084b0 <__gethex+0x434>
 80084bc:	9b01      	ldr	r3, [sp, #4]
 80084be:	441a      	add	r2, r3
 80084c0:	f1c5 0520 	rsb	r5, r5, #32
 80084c4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80084c8:	f000 ffe0 	bl	800948c <__hi0bits>
 80084cc:	42a8      	cmp	r0, r5
 80084ce:	dbe6      	blt.n	800849e <__gethex+0x422>
 80084d0:	e7ee      	b.n	80084b0 <__gethex+0x434>
 80084d2:	bf00      	nop
 80084d4:	0800a745 	.word	0x0800a745

080084d8 <L_shift>:
 80084d8:	f1c2 0208 	rsb	r2, r2, #8
 80084dc:	0092      	lsls	r2, r2, #2
 80084de:	b570      	push	{r4, r5, r6, lr}
 80084e0:	f1c2 0620 	rsb	r6, r2, #32
 80084e4:	6843      	ldr	r3, [r0, #4]
 80084e6:	6804      	ldr	r4, [r0, #0]
 80084e8:	fa03 f506 	lsl.w	r5, r3, r6
 80084ec:	432c      	orrs	r4, r5
 80084ee:	40d3      	lsrs	r3, r2
 80084f0:	6004      	str	r4, [r0, #0]
 80084f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80084f6:	4288      	cmp	r0, r1
 80084f8:	d3f4      	bcc.n	80084e4 <L_shift+0xc>
 80084fa:	bd70      	pop	{r4, r5, r6, pc}

080084fc <__match>:
 80084fc:	b530      	push	{r4, r5, lr}
 80084fe:	6803      	ldr	r3, [r0, #0]
 8008500:	3301      	adds	r3, #1
 8008502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008506:	b914      	cbnz	r4, 800850e <__match+0x12>
 8008508:	6003      	str	r3, [r0, #0]
 800850a:	2001      	movs	r0, #1
 800850c:	bd30      	pop	{r4, r5, pc}
 800850e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008512:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008516:	2d19      	cmp	r5, #25
 8008518:	bf98      	it	ls
 800851a:	3220      	addls	r2, #32
 800851c:	42a2      	cmp	r2, r4
 800851e:	d0f0      	beq.n	8008502 <__match+0x6>
 8008520:	2000      	movs	r0, #0
 8008522:	e7f3      	b.n	800850c <__match+0x10>

08008524 <__hexnan>:
 8008524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	680b      	ldr	r3, [r1, #0]
 800852a:	6801      	ldr	r1, [r0, #0]
 800852c:	115e      	asrs	r6, r3, #5
 800852e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008532:	f013 031f 	ands.w	r3, r3, #31
 8008536:	b087      	sub	sp, #28
 8008538:	bf18      	it	ne
 800853a:	3604      	addne	r6, #4
 800853c:	2500      	movs	r5, #0
 800853e:	1f37      	subs	r7, r6, #4
 8008540:	4682      	mov	sl, r0
 8008542:	4690      	mov	r8, r2
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	f846 5c04 	str.w	r5, [r6, #-4]
 800854a:	46b9      	mov	r9, r7
 800854c:	463c      	mov	r4, r7
 800854e:	9502      	str	r5, [sp, #8]
 8008550:	46ab      	mov	fp, r5
 8008552:	784a      	ldrb	r2, [r1, #1]
 8008554:	1c4b      	adds	r3, r1, #1
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	b342      	cbz	r2, 80085ac <__hexnan+0x88>
 800855a:	4610      	mov	r0, r2
 800855c:	9105      	str	r1, [sp, #20]
 800855e:	9204      	str	r2, [sp, #16]
 8008560:	f7ff fd76 	bl	8008050 <__hexdig_fun>
 8008564:	2800      	cmp	r0, #0
 8008566:	d14f      	bne.n	8008608 <__hexnan+0xe4>
 8008568:	9a04      	ldr	r2, [sp, #16]
 800856a:	9905      	ldr	r1, [sp, #20]
 800856c:	2a20      	cmp	r2, #32
 800856e:	d818      	bhi.n	80085a2 <__hexnan+0x7e>
 8008570:	9b02      	ldr	r3, [sp, #8]
 8008572:	459b      	cmp	fp, r3
 8008574:	dd13      	ble.n	800859e <__hexnan+0x7a>
 8008576:	454c      	cmp	r4, r9
 8008578:	d206      	bcs.n	8008588 <__hexnan+0x64>
 800857a:	2d07      	cmp	r5, #7
 800857c:	dc04      	bgt.n	8008588 <__hexnan+0x64>
 800857e:	462a      	mov	r2, r5
 8008580:	4649      	mov	r1, r9
 8008582:	4620      	mov	r0, r4
 8008584:	f7ff ffa8 	bl	80084d8 <L_shift>
 8008588:	4544      	cmp	r4, r8
 800858a:	d950      	bls.n	800862e <__hexnan+0x10a>
 800858c:	2300      	movs	r3, #0
 800858e:	f1a4 0904 	sub.w	r9, r4, #4
 8008592:	f844 3c04 	str.w	r3, [r4, #-4]
 8008596:	f8cd b008 	str.w	fp, [sp, #8]
 800859a:	464c      	mov	r4, r9
 800859c:	461d      	mov	r5, r3
 800859e:	9903      	ldr	r1, [sp, #12]
 80085a0:	e7d7      	b.n	8008552 <__hexnan+0x2e>
 80085a2:	2a29      	cmp	r2, #41	; 0x29
 80085a4:	d155      	bne.n	8008652 <__hexnan+0x12e>
 80085a6:	3102      	adds	r1, #2
 80085a8:	f8ca 1000 	str.w	r1, [sl]
 80085ac:	f1bb 0f00 	cmp.w	fp, #0
 80085b0:	d04f      	beq.n	8008652 <__hexnan+0x12e>
 80085b2:	454c      	cmp	r4, r9
 80085b4:	d206      	bcs.n	80085c4 <__hexnan+0xa0>
 80085b6:	2d07      	cmp	r5, #7
 80085b8:	dc04      	bgt.n	80085c4 <__hexnan+0xa0>
 80085ba:	462a      	mov	r2, r5
 80085bc:	4649      	mov	r1, r9
 80085be:	4620      	mov	r0, r4
 80085c0:	f7ff ff8a 	bl	80084d8 <L_shift>
 80085c4:	4544      	cmp	r4, r8
 80085c6:	d934      	bls.n	8008632 <__hexnan+0x10e>
 80085c8:	f1a8 0204 	sub.w	r2, r8, #4
 80085cc:	4623      	mov	r3, r4
 80085ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80085d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80085d6:	429f      	cmp	r7, r3
 80085d8:	d2f9      	bcs.n	80085ce <__hexnan+0xaa>
 80085da:	1b3b      	subs	r3, r7, r4
 80085dc:	f023 0303 	bic.w	r3, r3, #3
 80085e0:	3304      	adds	r3, #4
 80085e2:	3e03      	subs	r6, #3
 80085e4:	3401      	adds	r4, #1
 80085e6:	42a6      	cmp	r6, r4
 80085e8:	bf38      	it	cc
 80085ea:	2304      	movcc	r3, #4
 80085ec:	4443      	add	r3, r8
 80085ee:	2200      	movs	r2, #0
 80085f0:	f843 2b04 	str.w	r2, [r3], #4
 80085f4:	429f      	cmp	r7, r3
 80085f6:	d2fb      	bcs.n	80085f0 <__hexnan+0xcc>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	b91b      	cbnz	r3, 8008604 <__hexnan+0xe0>
 80085fc:	4547      	cmp	r7, r8
 80085fe:	d126      	bne.n	800864e <__hexnan+0x12a>
 8008600:	2301      	movs	r3, #1
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	2005      	movs	r0, #5
 8008606:	e025      	b.n	8008654 <__hexnan+0x130>
 8008608:	3501      	adds	r5, #1
 800860a:	2d08      	cmp	r5, #8
 800860c:	f10b 0b01 	add.w	fp, fp, #1
 8008610:	dd06      	ble.n	8008620 <__hexnan+0xfc>
 8008612:	4544      	cmp	r4, r8
 8008614:	d9c3      	bls.n	800859e <__hexnan+0x7a>
 8008616:	2300      	movs	r3, #0
 8008618:	f844 3c04 	str.w	r3, [r4, #-4]
 800861c:	2501      	movs	r5, #1
 800861e:	3c04      	subs	r4, #4
 8008620:	6822      	ldr	r2, [r4, #0]
 8008622:	f000 000f 	and.w	r0, r0, #15
 8008626:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800862a:	6020      	str	r0, [r4, #0]
 800862c:	e7b7      	b.n	800859e <__hexnan+0x7a>
 800862e:	2508      	movs	r5, #8
 8008630:	e7b5      	b.n	800859e <__hexnan+0x7a>
 8008632:	9b01      	ldr	r3, [sp, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d0df      	beq.n	80085f8 <__hexnan+0xd4>
 8008638:	f1c3 0320 	rsb	r3, r3, #32
 800863c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008640:	40da      	lsrs	r2, r3
 8008642:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008646:	4013      	ands	r3, r2
 8008648:	f846 3c04 	str.w	r3, [r6, #-4]
 800864c:	e7d4      	b.n	80085f8 <__hexnan+0xd4>
 800864e:	3f04      	subs	r7, #4
 8008650:	e7d2      	b.n	80085f8 <__hexnan+0xd4>
 8008652:	2004      	movs	r0, #4
 8008654:	b007      	add	sp, #28
 8008656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800865a <__ssputs_r>:
 800865a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800865e:	688e      	ldr	r6, [r1, #8]
 8008660:	461f      	mov	r7, r3
 8008662:	42be      	cmp	r6, r7
 8008664:	680b      	ldr	r3, [r1, #0]
 8008666:	4682      	mov	sl, r0
 8008668:	460c      	mov	r4, r1
 800866a:	4690      	mov	r8, r2
 800866c:	d82c      	bhi.n	80086c8 <__ssputs_r+0x6e>
 800866e:	898a      	ldrh	r2, [r1, #12]
 8008670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008674:	d026      	beq.n	80086c4 <__ssputs_r+0x6a>
 8008676:	6965      	ldr	r5, [r4, #20]
 8008678:	6909      	ldr	r1, [r1, #16]
 800867a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800867e:	eba3 0901 	sub.w	r9, r3, r1
 8008682:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008686:	1c7b      	adds	r3, r7, #1
 8008688:	444b      	add	r3, r9
 800868a:	106d      	asrs	r5, r5, #1
 800868c:	429d      	cmp	r5, r3
 800868e:	bf38      	it	cc
 8008690:	461d      	movcc	r5, r3
 8008692:	0553      	lsls	r3, r2, #21
 8008694:	d527      	bpl.n	80086e6 <__ssputs_r+0x8c>
 8008696:	4629      	mov	r1, r5
 8008698:	f000 fb32 	bl	8008d00 <_malloc_r>
 800869c:	4606      	mov	r6, r0
 800869e:	b360      	cbz	r0, 80086fa <__ssputs_r+0xa0>
 80086a0:	6921      	ldr	r1, [r4, #16]
 80086a2:	464a      	mov	r2, r9
 80086a4:	f7fe fd9c 	bl	80071e0 <memcpy>
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b2:	81a3      	strh	r3, [r4, #12]
 80086b4:	6126      	str	r6, [r4, #16]
 80086b6:	6165      	str	r5, [r4, #20]
 80086b8:	444e      	add	r6, r9
 80086ba:	eba5 0509 	sub.w	r5, r5, r9
 80086be:	6026      	str	r6, [r4, #0]
 80086c0:	60a5      	str	r5, [r4, #8]
 80086c2:	463e      	mov	r6, r7
 80086c4:	42be      	cmp	r6, r7
 80086c6:	d900      	bls.n	80086ca <__ssputs_r+0x70>
 80086c8:	463e      	mov	r6, r7
 80086ca:	6820      	ldr	r0, [r4, #0]
 80086cc:	4632      	mov	r2, r6
 80086ce:	4641      	mov	r1, r8
 80086d0:	f001 fb81 	bl	8009dd6 <memmove>
 80086d4:	68a3      	ldr	r3, [r4, #8]
 80086d6:	1b9b      	subs	r3, r3, r6
 80086d8:	60a3      	str	r3, [r4, #8]
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	4433      	add	r3, r6
 80086de:	6023      	str	r3, [r4, #0]
 80086e0:	2000      	movs	r0, #0
 80086e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e6:	462a      	mov	r2, r5
 80086e8:	f001 fac5 	bl	8009c76 <_realloc_r>
 80086ec:	4606      	mov	r6, r0
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d1e0      	bne.n	80086b4 <__ssputs_r+0x5a>
 80086f2:	6921      	ldr	r1, [r4, #16]
 80086f4:	4650      	mov	r0, sl
 80086f6:	f7ff fc0d 	bl	8007f14 <_free_r>
 80086fa:	230c      	movs	r3, #12
 80086fc:	f8ca 3000 	str.w	r3, [sl]
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008706:	81a3      	strh	r3, [r4, #12]
 8008708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800870c:	e7e9      	b.n	80086e2 <__ssputs_r+0x88>
	...

08008710 <_svfiprintf_r>:
 8008710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	4698      	mov	r8, r3
 8008716:	898b      	ldrh	r3, [r1, #12]
 8008718:	061b      	lsls	r3, r3, #24
 800871a:	b09d      	sub	sp, #116	; 0x74
 800871c:	4607      	mov	r7, r0
 800871e:	460d      	mov	r5, r1
 8008720:	4614      	mov	r4, r2
 8008722:	d50e      	bpl.n	8008742 <_svfiprintf_r+0x32>
 8008724:	690b      	ldr	r3, [r1, #16]
 8008726:	b963      	cbnz	r3, 8008742 <_svfiprintf_r+0x32>
 8008728:	2140      	movs	r1, #64	; 0x40
 800872a:	f000 fae9 	bl	8008d00 <_malloc_r>
 800872e:	6028      	str	r0, [r5, #0]
 8008730:	6128      	str	r0, [r5, #16]
 8008732:	b920      	cbnz	r0, 800873e <_svfiprintf_r+0x2e>
 8008734:	230c      	movs	r3, #12
 8008736:	603b      	str	r3, [r7, #0]
 8008738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800873c:	e0d0      	b.n	80088e0 <_svfiprintf_r+0x1d0>
 800873e:	2340      	movs	r3, #64	; 0x40
 8008740:	616b      	str	r3, [r5, #20]
 8008742:	2300      	movs	r3, #0
 8008744:	9309      	str	r3, [sp, #36]	; 0x24
 8008746:	2320      	movs	r3, #32
 8008748:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800874c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008750:	2330      	movs	r3, #48	; 0x30
 8008752:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80088f8 <_svfiprintf_r+0x1e8>
 8008756:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800875a:	f04f 0901 	mov.w	r9, #1
 800875e:	4623      	mov	r3, r4
 8008760:	469a      	mov	sl, r3
 8008762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008766:	b10a      	cbz	r2, 800876c <_svfiprintf_r+0x5c>
 8008768:	2a25      	cmp	r2, #37	; 0x25
 800876a:	d1f9      	bne.n	8008760 <_svfiprintf_r+0x50>
 800876c:	ebba 0b04 	subs.w	fp, sl, r4
 8008770:	d00b      	beq.n	800878a <_svfiprintf_r+0x7a>
 8008772:	465b      	mov	r3, fp
 8008774:	4622      	mov	r2, r4
 8008776:	4629      	mov	r1, r5
 8008778:	4638      	mov	r0, r7
 800877a:	f7ff ff6e 	bl	800865a <__ssputs_r>
 800877e:	3001      	adds	r0, #1
 8008780:	f000 80a9 	beq.w	80088d6 <_svfiprintf_r+0x1c6>
 8008784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008786:	445a      	add	r2, fp
 8008788:	9209      	str	r2, [sp, #36]	; 0x24
 800878a:	f89a 3000 	ldrb.w	r3, [sl]
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 80a1 	beq.w	80088d6 <_svfiprintf_r+0x1c6>
 8008794:	2300      	movs	r3, #0
 8008796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800879a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800879e:	f10a 0a01 	add.w	sl, sl, #1
 80087a2:	9304      	str	r3, [sp, #16]
 80087a4:	9307      	str	r3, [sp, #28]
 80087a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087aa:	931a      	str	r3, [sp, #104]	; 0x68
 80087ac:	4654      	mov	r4, sl
 80087ae:	2205      	movs	r2, #5
 80087b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b4:	4850      	ldr	r0, [pc, #320]	; (80088f8 <_svfiprintf_r+0x1e8>)
 80087b6:	f7f7 fd0b 	bl	80001d0 <memchr>
 80087ba:	9a04      	ldr	r2, [sp, #16]
 80087bc:	b9d8      	cbnz	r0, 80087f6 <_svfiprintf_r+0xe6>
 80087be:	06d0      	lsls	r0, r2, #27
 80087c0:	bf44      	itt	mi
 80087c2:	2320      	movmi	r3, #32
 80087c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087c8:	0711      	lsls	r1, r2, #28
 80087ca:	bf44      	itt	mi
 80087cc:	232b      	movmi	r3, #43	; 0x2b
 80087ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087d2:	f89a 3000 	ldrb.w	r3, [sl]
 80087d6:	2b2a      	cmp	r3, #42	; 0x2a
 80087d8:	d015      	beq.n	8008806 <_svfiprintf_r+0xf6>
 80087da:	9a07      	ldr	r2, [sp, #28]
 80087dc:	4654      	mov	r4, sl
 80087de:	2000      	movs	r0, #0
 80087e0:	f04f 0c0a 	mov.w	ip, #10
 80087e4:	4621      	mov	r1, r4
 80087e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087ea:	3b30      	subs	r3, #48	; 0x30
 80087ec:	2b09      	cmp	r3, #9
 80087ee:	d94d      	bls.n	800888c <_svfiprintf_r+0x17c>
 80087f0:	b1b0      	cbz	r0, 8008820 <_svfiprintf_r+0x110>
 80087f2:	9207      	str	r2, [sp, #28]
 80087f4:	e014      	b.n	8008820 <_svfiprintf_r+0x110>
 80087f6:	eba0 0308 	sub.w	r3, r0, r8
 80087fa:	fa09 f303 	lsl.w	r3, r9, r3
 80087fe:	4313      	orrs	r3, r2
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	46a2      	mov	sl, r4
 8008804:	e7d2      	b.n	80087ac <_svfiprintf_r+0x9c>
 8008806:	9b03      	ldr	r3, [sp, #12]
 8008808:	1d19      	adds	r1, r3, #4
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	9103      	str	r1, [sp, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	bfbb      	ittet	lt
 8008812:	425b      	neglt	r3, r3
 8008814:	f042 0202 	orrlt.w	r2, r2, #2
 8008818:	9307      	strge	r3, [sp, #28]
 800881a:	9307      	strlt	r3, [sp, #28]
 800881c:	bfb8      	it	lt
 800881e:	9204      	strlt	r2, [sp, #16]
 8008820:	7823      	ldrb	r3, [r4, #0]
 8008822:	2b2e      	cmp	r3, #46	; 0x2e
 8008824:	d10c      	bne.n	8008840 <_svfiprintf_r+0x130>
 8008826:	7863      	ldrb	r3, [r4, #1]
 8008828:	2b2a      	cmp	r3, #42	; 0x2a
 800882a:	d134      	bne.n	8008896 <_svfiprintf_r+0x186>
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	1d1a      	adds	r2, r3, #4
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	9203      	str	r2, [sp, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	bfb8      	it	lt
 8008838:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800883c:	3402      	adds	r4, #2
 800883e:	9305      	str	r3, [sp, #20]
 8008840:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008908 <_svfiprintf_r+0x1f8>
 8008844:	7821      	ldrb	r1, [r4, #0]
 8008846:	2203      	movs	r2, #3
 8008848:	4650      	mov	r0, sl
 800884a:	f7f7 fcc1 	bl	80001d0 <memchr>
 800884e:	b138      	cbz	r0, 8008860 <_svfiprintf_r+0x150>
 8008850:	9b04      	ldr	r3, [sp, #16]
 8008852:	eba0 000a 	sub.w	r0, r0, sl
 8008856:	2240      	movs	r2, #64	; 0x40
 8008858:	4082      	lsls	r2, r0
 800885a:	4313      	orrs	r3, r2
 800885c:	3401      	adds	r4, #1
 800885e:	9304      	str	r3, [sp, #16]
 8008860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008864:	4825      	ldr	r0, [pc, #148]	; (80088fc <_svfiprintf_r+0x1ec>)
 8008866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800886a:	2206      	movs	r2, #6
 800886c:	f7f7 fcb0 	bl	80001d0 <memchr>
 8008870:	2800      	cmp	r0, #0
 8008872:	d038      	beq.n	80088e6 <_svfiprintf_r+0x1d6>
 8008874:	4b22      	ldr	r3, [pc, #136]	; (8008900 <_svfiprintf_r+0x1f0>)
 8008876:	bb1b      	cbnz	r3, 80088c0 <_svfiprintf_r+0x1b0>
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	3307      	adds	r3, #7
 800887c:	f023 0307 	bic.w	r3, r3, #7
 8008880:	3308      	adds	r3, #8
 8008882:	9303      	str	r3, [sp, #12]
 8008884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008886:	4433      	add	r3, r6
 8008888:	9309      	str	r3, [sp, #36]	; 0x24
 800888a:	e768      	b.n	800875e <_svfiprintf_r+0x4e>
 800888c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008890:	460c      	mov	r4, r1
 8008892:	2001      	movs	r0, #1
 8008894:	e7a6      	b.n	80087e4 <_svfiprintf_r+0xd4>
 8008896:	2300      	movs	r3, #0
 8008898:	3401      	adds	r4, #1
 800889a:	9305      	str	r3, [sp, #20]
 800889c:	4619      	mov	r1, r3
 800889e:	f04f 0c0a 	mov.w	ip, #10
 80088a2:	4620      	mov	r0, r4
 80088a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088a8:	3a30      	subs	r2, #48	; 0x30
 80088aa:	2a09      	cmp	r2, #9
 80088ac:	d903      	bls.n	80088b6 <_svfiprintf_r+0x1a6>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0c6      	beq.n	8008840 <_svfiprintf_r+0x130>
 80088b2:	9105      	str	r1, [sp, #20]
 80088b4:	e7c4      	b.n	8008840 <_svfiprintf_r+0x130>
 80088b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80088ba:	4604      	mov	r4, r0
 80088bc:	2301      	movs	r3, #1
 80088be:	e7f0      	b.n	80088a2 <_svfiprintf_r+0x192>
 80088c0:	ab03      	add	r3, sp, #12
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	462a      	mov	r2, r5
 80088c6:	4b0f      	ldr	r3, [pc, #60]	; (8008904 <_svfiprintf_r+0x1f4>)
 80088c8:	a904      	add	r1, sp, #16
 80088ca:	4638      	mov	r0, r7
 80088cc:	f7fc fe4a 	bl	8005564 <_printf_float>
 80088d0:	1c42      	adds	r2, r0, #1
 80088d2:	4606      	mov	r6, r0
 80088d4:	d1d6      	bne.n	8008884 <_svfiprintf_r+0x174>
 80088d6:	89ab      	ldrh	r3, [r5, #12]
 80088d8:	065b      	lsls	r3, r3, #25
 80088da:	f53f af2d 	bmi.w	8008738 <_svfiprintf_r+0x28>
 80088de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088e0:	b01d      	add	sp, #116	; 0x74
 80088e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e6:	ab03      	add	r3, sp, #12
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	462a      	mov	r2, r5
 80088ec:	4b05      	ldr	r3, [pc, #20]	; (8008904 <_svfiprintf_r+0x1f4>)
 80088ee:	a904      	add	r1, sp, #16
 80088f0:	4638      	mov	r0, r7
 80088f2:	f7fd f8db 	bl	8005aac <_printf_i>
 80088f6:	e7eb      	b.n	80088d0 <_svfiprintf_r+0x1c0>
 80088f8:	0800a7b6 	.word	0x0800a7b6
 80088fc:	0800a7c0 	.word	0x0800a7c0
 8008900:	08005565 	.word	0x08005565
 8008904:	0800865b 	.word	0x0800865b
 8008908:	0800a7bc 	.word	0x0800a7bc

0800890c <_sungetc_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	1c4b      	adds	r3, r1, #1
 8008910:	4614      	mov	r4, r2
 8008912:	d103      	bne.n	800891c <_sungetc_r+0x10>
 8008914:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008918:	4628      	mov	r0, r5
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	8993      	ldrh	r3, [r2, #12]
 800891e:	f023 0320 	bic.w	r3, r3, #32
 8008922:	8193      	strh	r3, [r2, #12]
 8008924:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008926:	6852      	ldr	r2, [r2, #4]
 8008928:	b2cd      	uxtb	r5, r1
 800892a:	b18b      	cbz	r3, 8008950 <_sungetc_r+0x44>
 800892c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800892e:	4293      	cmp	r3, r2
 8008930:	dd08      	ble.n	8008944 <_sungetc_r+0x38>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	1e5a      	subs	r2, r3, #1
 8008936:	6022      	str	r2, [r4, #0]
 8008938:	f803 5c01 	strb.w	r5, [r3, #-1]
 800893c:	6863      	ldr	r3, [r4, #4]
 800893e:	3301      	adds	r3, #1
 8008940:	6063      	str	r3, [r4, #4]
 8008942:	e7e9      	b.n	8008918 <_sungetc_r+0xc>
 8008944:	4621      	mov	r1, r4
 8008946:	f001 f95c 	bl	8009c02 <__submore>
 800894a:	2800      	cmp	r0, #0
 800894c:	d0f1      	beq.n	8008932 <_sungetc_r+0x26>
 800894e:	e7e1      	b.n	8008914 <_sungetc_r+0x8>
 8008950:	6921      	ldr	r1, [r4, #16]
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	b151      	cbz	r1, 800896c <_sungetc_r+0x60>
 8008956:	4299      	cmp	r1, r3
 8008958:	d208      	bcs.n	800896c <_sungetc_r+0x60>
 800895a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800895e:	42a9      	cmp	r1, r5
 8008960:	d104      	bne.n	800896c <_sungetc_r+0x60>
 8008962:	3b01      	subs	r3, #1
 8008964:	3201      	adds	r2, #1
 8008966:	6023      	str	r3, [r4, #0]
 8008968:	6062      	str	r2, [r4, #4]
 800896a:	e7d5      	b.n	8008918 <_sungetc_r+0xc>
 800896c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008974:	6363      	str	r3, [r4, #52]	; 0x34
 8008976:	2303      	movs	r3, #3
 8008978:	63a3      	str	r3, [r4, #56]	; 0x38
 800897a:	4623      	mov	r3, r4
 800897c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	2301      	movs	r3, #1
 8008984:	e7dc      	b.n	8008940 <_sungetc_r+0x34>

08008986 <__ssrefill_r>:
 8008986:	b510      	push	{r4, lr}
 8008988:	460c      	mov	r4, r1
 800898a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800898c:	b169      	cbz	r1, 80089aa <__ssrefill_r+0x24>
 800898e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008992:	4299      	cmp	r1, r3
 8008994:	d001      	beq.n	800899a <__ssrefill_r+0x14>
 8008996:	f7ff fabd 	bl	8007f14 <_free_r>
 800899a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800899c:	6063      	str	r3, [r4, #4]
 800899e:	2000      	movs	r0, #0
 80089a0:	6360      	str	r0, [r4, #52]	; 0x34
 80089a2:	b113      	cbz	r3, 80089aa <__ssrefill_r+0x24>
 80089a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80089a6:	6023      	str	r3, [r4, #0]
 80089a8:	bd10      	pop	{r4, pc}
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	2300      	movs	r3, #0
 80089b0:	6063      	str	r3, [r4, #4]
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f043 0320 	orr.w	r3, r3, #32
 80089b8:	81a3      	strh	r3, [r4, #12]
 80089ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089be:	e7f3      	b.n	80089a8 <__ssrefill_r+0x22>

080089c0 <__ssvfiscanf_r>:
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	460c      	mov	r4, r1
 80089c6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80089ca:	2100      	movs	r1, #0
 80089cc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80089d0:	49a6      	ldr	r1, [pc, #664]	; (8008c6c <__ssvfiscanf_r+0x2ac>)
 80089d2:	91a0      	str	r1, [sp, #640]	; 0x280
 80089d4:	f10d 0804 	add.w	r8, sp, #4
 80089d8:	49a5      	ldr	r1, [pc, #660]	; (8008c70 <__ssvfiscanf_r+0x2b0>)
 80089da:	4fa6      	ldr	r7, [pc, #664]	; (8008c74 <__ssvfiscanf_r+0x2b4>)
 80089dc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008c78 <__ssvfiscanf_r+0x2b8>
 80089e0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80089e4:	4606      	mov	r6, r0
 80089e6:	91a1      	str	r1, [sp, #644]	; 0x284
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	7813      	ldrb	r3, [r2, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 815a 	beq.w	8008ca6 <__ssvfiscanf_r+0x2e6>
 80089f2:	5cf9      	ldrb	r1, [r7, r3]
 80089f4:	f011 0108 	ands.w	r1, r1, #8
 80089f8:	f102 0501 	add.w	r5, r2, #1
 80089fc:	d019      	beq.n	8008a32 <__ssvfiscanf_r+0x72>
 80089fe:	6863      	ldr	r3, [r4, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	dd0f      	ble.n	8008a24 <__ssvfiscanf_r+0x64>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	781a      	ldrb	r2, [r3, #0]
 8008a08:	5cba      	ldrb	r2, [r7, r2]
 8008a0a:	0712      	lsls	r2, r2, #28
 8008a0c:	d401      	bmi.n	8008a12 <__ssvfiscanf_r+0x52>
 8008a0e:	462a      	mov	r2, r5
 8008a10:	e7eb      	b.n	80089ea <__ssvfiscanf_r+0x2a>
 8008a12:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a14:	3201      	adds	r2, #1
 8008a16:	9245      	str	r2, [sp, #276]	; 0x114
 8008a18:	6862      	ldr	r2, [r4, #4]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	3a01      	subs	r2, #1
 8008a1e:	6062      	str	r2, [r4, #4]
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	e7ec      	b.n	80089fe <__ssvfiscanf_r+0x3e>
 8008a24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a26:	4621      	mov	r1, r4
 8008a28:	4630      	mov	r0, r6
 8008a2a:	4798      	blx	r3
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d0e9      	beq.n	8008a04 <__ssvfiscanf_r+0x44>
 8008a30:	e7ed      	b.n	8008a0e <__ssvfiscanf_r+0x4e>
 8008a32:	2b25      	cmp	r3, #37	; 0x25
 8008a34:	d012      	beq.n	8008a5c <__ssvfiscanf_r+0x9c>
 8008a36:	469a      	mov	sl, r3
 8008a38:	6863      	ldr	r3, [r4, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f340 8091 	ble.w	8008b62 <__ssvfiscanf_r+0x1a2>
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	7813      	ldrb	r3, [r2, #0]
 8008a44:	4553      	cmp	r3, sl
 8008a46:	f040 812e 	bne.w	8008ca6 <__ssvfiscanf_r+0x2e6>
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	6063      	str	r3, [r4, #4]
 8008a50:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008a52:	3201      	adds	r2, #1
 8008a54:	3301      	adds	r3, #1
 8008a56:	6022      	str	r2, [r4, #0]
 8008a58:	9345      	str	r3, [sp, #276]	; 0x114
 8008a5a:	e7d8      	b.n	8008a0e <__ssvfiscanf_r+0x4e>
 8008a5c:	9141      	str	r1, [sp, #260]	; 0x104
 8008a5e:	9143      	str	r1, [sp, #268]	; 0x10c
 8008a60:	7853      	ldrb	r3, [r2, #1]
 8008a62:	2b2a      	cmp	r3, #42	; 0x2a
 8008a64:	bf02      	ittt	eq
 8008a66:	2310      	moveq	r3, #16
 8008a68:	1c95      	addeq	r5, r2, #2
 8008a6a:	9341      	streq	r3, [sp, #260]	; 0x104
 8008a6c:	220a      	movs	r2, #10
 8008a6e:	46aa      	mov	sl, r5
 8008a70:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008a74:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008a78:	2b09      	cmp	r3, #9
 8008a7a:	d91c      	bls.n	8008ab6 <__ssvfiscanf_r+0xf6>
 8008a7c:	487e      	ldr	r0, [pc, #504]	; (8008c78 <__ssvfiscanf_r+0x2b8>)
 8008a7e:	2203      	movs	r2, #3
 8008a80:	f7f7 fba6 	bl	80001d0 <memchr>
 8008a84:	b138      	cbz	r0, 8008a96 <__ssvfiscanf_r+0xd6>
 8008a86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008a88:	eba0 0009 	sub.w	r0, r0, r9
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	4083      	lsls	r3, r0
 8008a90:	4313      	orrs	r3, r2
 8008a92:	9341      	str	r3, [sp, #260]	; 0x104
 8008a94:	4655      	mov	r5, sl
 8008a96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a9a:	2b78      	cmp	r3, #120	; 0x78
 8008a9c:	d806      	bhi.n	8008aac <__ssvfiscanf_r+0xec>
 8008a9e:	2b57      	cmp	r3, #87	; 0x57
 8008aa0:	d810      	bhi.n	8008ac4 <__ssvfiscanf_r+0x104>
 8008aa2:	2b25      	cmp	r3, #37	; 0x25
 8008aa4:	d0c7      	beq.n	8008a36 <__ssvfiscanf_r+0x76>
 8008aa6:	d857      	bhi.n	8008b58 <__ssvfiscanf_r+0x198>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d065      	beq.n	8008b78 <__ssvfiscanf_r+0x1b8>
 8008aac:	2303      	movs	r3, #3
 8008aae:	9347      	str	r3, [sp, #284]	; 0x11c
 8008ab0:	230a      	movs	r3, #10
 8008ab2:	9342      	str	r3, [sp, #264]	; 0x108
 8008ab4:	e076      	b.n	8008ba4 <__ssvfiscanf_r+0x1e4>
 8008ab6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008ab8:	fb02 1103 	mla	r1, r2, r3, r1
 8008abc:	3930      	subs	r1, #48	; 0x30
 8008abe:	9143      	str	r1, [sp, #268]	; 0x10c
 8008ac0:	4655      	mov	r5, sl
 8008ac2:	e7d4      	b.n	8008a6e <__ssvfiscanf_r+0xae>
 8008ac4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008ac8:	2a20      	cmp	r2, #32
 8008aca:	d8ef      	bhi.n	8008aac <__ssvfiscanf_r+0xec>
 8008acc:	a101      	add	r1, pc, #4	; (adr r1, 8008ad4 <__ssvfiscanf_r+0x114>)
 8008ace:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ad2:	bf00      	nop
 8008ad4:	08008b87 	.word	0x08008b87
 8008ad8:	08008aad 	.word	0x08008aad
 8008adc:	08008aad 	.word	0x08008aad
 8008ae0:	08008be5 	.word	0x08008be5
 8008ae4:	08008aad 	.word	0x08008aad
 8008ae8:	08008aad 	.word	0x08008aad
 8008aec:	08008aad 	.word	0x08008aad
 8008af0:	08008aad 	.word	0x08008aad
 8008af4:	08008aad 	.word	0x08008aad
 8008af8:	08008aad 	.word	0x08008aad
 8008afc:	08008aad 	.word	0x08008aad
 8008b00:	08008bfb 	.word	0x08008bfb
 8008b04:	08008be1 	.word	0x08008be1
 8008b08:	08008b5f 	.word	0x08008b5f
 8008b0c:	08008b5f 	.word	0x08008b5f
 8008b10:	08008b5f 	.word	0x08008b5f
 8008b14:	08008aad 	.word	0x08008aad
 8008b18:	08008b9d 	.word	0x08008b9d
 8008b1c:	08008aad 	.word	0x08008aad
 8008b20:	08008aad 	.word	0x08008aad
 8008b24:	08008aad 	.word	0x08008aad
 8008b28:	08008aad 	.word	0x08008aad
 8008b2c:	08008c0b 	.word	0x08008c0b
 8008b30:	08008bd9 	.word	0x08008bd9
 8008b34:	08008b7f 	.word	0x08008b7f
 8008b38:	08008aad 	.word	0x08008aad
 8008b3c:	08008aad 	.word	0x08008aad
 8008b40:	08008c07 	.word	0x08008c07
 8008b44:	08008aad 	.word	0x08008aad
 8008b48:	08008be1 	.word	0x08008be1
 8008b4c:	08008aad 	.word	0x08008aad
 8008b50:	08008aad 	.word	0x08008aad
 8008b54:	08008b87 	.word	0x08008b87
 8008b58:	3b45      	subs	r3, #69	; 0x45
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d8a6      	bhi.n	8008aac <__ssvfiscanf_r+0xec>
 8008b5e:	2305      	movs	r3, #5
 8008b60:	e01f      	b.n	8008ba2 <__ssvfiscanf_r+0x1e2>
 8008b62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b64:	4621      	mov	r1, r4
 8008b66:	4630      	mov	r0, r6
 8008b68:	4798      	blx	r3
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	f43f af68 	beq.w	8008a40 <__ssvfiscanf_r+0x80>
 8008b70:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008b72:	2800      	cmp	r0, #0
 8008b74:	f040 808d 	bne.w	8008c92 <__ssvfiscanf_r+0x2d2>
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b7c:	e08f      	b.n	8008c9e <__ssvfiscanf_r+0x2de>
 8008b7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b80:	f042 0220 	orr.w	r2, r2, #32
 8008b84:	9241      	str	r2, [sp, #260]	; 0x104
 8008b86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b8c:	9241      	str	r2, [sp, #260]	; 0x104
 8008b8e:	2210      	movs	r2, #16
 8008b90:	2b6f      	cmp	r3, #111	; 0x6f
 8008b92:	9242      	str	r2, [sp, #264]	; 0x108
 8008b94:	bf34      	ite	cc
 8008b96:	2303      	movcc	r3, #3
 8008b98:	2304      	movcs	r3, #4
 8008b9a:	e002      	b.n	8008ba2 <__ssvfiscanf_r+0x1e2>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9342      	str	r3, [sp, #264]	; 0x108
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	9347      	str	r3, [sp, #284]	; 0x11c
 8008ba4:	6863      	ldr	r3, [r4, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	dd3d      	ble.n	8008c26 <__ssvfiscanf_r+0x266>
 8008baa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008bac:	0659      	lsls	r1, r3, #25
 8008bae:	d404      	bmi.n	8008bba <__ssvfiscanf_r+0x1fa>
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	781a      	ldrb	r2, [r3, #0]
 8008bb4:	5cba      	ldrb	r2, [r7, r2]
 8008bb6:	0712      	lsls	r2, r2, #28
 8008bb8:	d43c      	bmi.n	8008c34 <__ssvfiscanf_r+0x274>
 8008bba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	dc4b      	bgt.n	8008c58 <__ssvfiscanf_r+0x298>
 8008bc0:	466b      	mov	r3, sp
 8008bc2:	4622      	mov	r2, r4
 8008bc4:	a941      	add	r1, sp, #260	; 0x104
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f000 f92c 	bl	8008e24 <_scanf_chars>
 8008bcc:	2801      	cmp	r0, #1
 8008bce:	d06a      	beq.n	8008ca6 <__ssvfiscanf_r+0x2e6>
 8008bd0:	2802      	cmp	r0, #2
 8008bd2:	f47f af1c 	bne.w	8008a0e <__ssvfiscanf_r+0x4e>
 8008bd6:	e7cb      	b.n	8008b70 <__ssvfiscanf_r+0x1b0>
 8008bd8:	2308      	movs	r3, #8
 8008bda:	9342      	str	r3, [sp, #264]	; 0x108
 8008bdc:	2304      	movs	r3, #4
 8008bde:	e7e0      	b.n	8008ba2 <__ssvfiscanf_r+0x1e2>
 8008be0:	220a      	movs	r2, #10
 8008be2:	e7d5      	b.n	8008b90 <__ssvfiscanf_r+0x1d0>
 8008be4:	4629      	mov	r1, r5
 8008be6:	4640      	mov	r0, r8
 8008be8:	f000 fa6a 	bl	80090c0 <__sccl>
 8008bec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf2:	9341      	str	r3, [sp, #260]	; 0x104
 8008bf4:	4605      	mov	r5, r0
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e7d3      	b.n	8008ba2 <__ssvfiscanf_r+0x1e2>
 8008bfa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c00:	9341      	str	r3, [sp, #260]	; 0x104
 8008c02:	2300      	movs	r3, #0
 8008c04:	e7cd      	b.n	8008ba2 <__ssvfiscanf_r+0x1e2>
 8008c06:	2302      	movs	r3, #2
 8008c08:	e7cb      	b.n	8008ba2 <__ssvfiscanf_r+0x1e2>
 8008c0a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008c0c:	06c3      	lsls	r3, r0, #27
 8008c0e:	f53f aefe 	bmi.w	8008a0e <__ssvfiscanf_r+0x4e>
 8008c12:	9b00      	ldr	r3, [sp, #0]
 8008c14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c16:	1d19      	adds	r1, r3, #4
 8008c18:	9100      	str	r1, [sp, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	07c0      	lsls	r0, r0, #31
 8008c1e:	bf4c      	ite	mi
 8008c20:	801a      	strhmi	r2, [r3, #0]
 8008c22:	601a      	strpl	r2, [r3, #0]
 8008c24:	e6f3      	b.n	8008a0e <__ssvfiscanf_r+0x4e>
 8008c26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	4798      	blx	r3
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d0bb      	beq.n	8008baa <__ssvfiscanf_r+0x1ea>
 8008c32:	e79d      	b.n	8008b70 <__ssvfiscanf_r+0x1b0>
 8008c34:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c36:	3201      	adds	r2, #1
 8008c38:	9245      	str	r2, [sp, #276]	; 0x114
 8008c3a:	6862      	ldr	r2, [r4, #4]
 8008c3c:	3a01      	subs	r2, #1
 8008c3e:	2a00      	cmp	r2, #0
 8008c40:	6062      	str	r2, [r4, #4]
 8008c42:	dd02      	ble.n	8008c4a <__ssvfiscanf_r+0x28a>
 8008c44:	3301      	adds	r3, #1
 8008c46:	6023      	str	r3, [r4, #0]
 8008c48:	e7b2      	b.n	8008bb0 <__ssvfiscanf_r+0x1f0>
 8008c4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	4630      	mov	r0, r6
 8008c50:	4798      	blx	r3
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d0ac      	beq.n	8008bb0 <__ssvfiscanf_r+0x1f0>
 8008c56:	e78b      	b.n	8008b70 <__ssvfiscanf_r+0x1b0>
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	dc0f      	bgt.n	8008c7c <__ssvfiscanf_r+0x2bc>
 8008c5c:	466b      	mov	r3, sp
 8008c5e:	4622      	mov	r2, r4
 8008c60:	a941      	add	r1, sp, #260	; 0x104
 8008c62:	4630      	mov	r0, r6
 8008c64:	f000 f938 	bl	8008ed8 <_scanf_i>
 8008c68:	e7b0      	b.n	8008bcc <__ssvfiscanf_r+0x20c>
 8008c6a:	bf00      	nop
 8008c6c:	0800890d 	.word	0x0800890d
 8008c70:	08008987 	.word	0x08008987
 8008c74:	0800a5c9 	.word	0x0800a5c9
 8008c78:	0800a7bc 	.word	0x0800a7bc
 8008c7c:	4b0b      	ldr	r3, [pc, #44]	; (8008cac <__ssvfiscanf_r+0x2ec>)
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f43f aec5 	beq.w	8008a0e <__ssvfiscanf_r+0x4e>
 8008c84:	466b      	mov	r3, sp
 8008c86:	4622      	mov	r2, r4
 8008c88:	a941      	add	r1, sp, #260	; 0x104
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f7fd f830 	bl	8005cf0 <_scanf_float>
 8008c90:	e79c      	b.n	8008bcc <__ssvfiscanf_r+0x20c>
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008c98:	bf18      	it	ne
 8008c9a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008c9e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008ca8:	e7f9      	b.n	8008c9e <__ssvfiscanf_r+0x2de>
 8008caa:	bf00      	nop
 8008cac:	08005cf1 	.word	0x08005cf1

08008cb0 <malloc>:
 8008cb0:	4b02      	ldr	r3, [pc, #8]	; (8008cbc <malloc+0xc>)
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	6818      	ldr	r0, [r3, #0]
 8008cb6:	f000 b823 	b.w	8008d00 <_malloc_r>
 8008cba:	bf00      	nop
 8008cbc:	200001d0 	.word	0x200001d0

08008cc0 <sbrk_aligned>:
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	4e0e      	ldr	r6, [pc, #56]	; (8008cfc <sbrk_aligned+0x3c>)
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	6831      	ldr	r1, [r6, #0]
 8008cc8:	4605      	mov	r5, r0
 8008cca:	b911      	cbnz	r1, 8008cd2 <sbrk_aligned+0x12>
 8008ccc:	f001 f89e 	bl	8009e0c <_sbrk_r>
 8008cd0:	6030      	str	r0, [r6, #0]
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f001 f899 	bl	8009e0c <_sbrk_r>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d00a      	beq.n	8008cf4 <sbrk_aligned+0x34>
 8008cde:	1cc4      	adds	r4, r0, #3
 8008ce0:	f024 0403 	bic.w	r4, r4, #3
 8008ce4:	42a0      	cmp	r0, r4
 8008ce6:	d007      	beq.n	8008cf8 <sbrk_aligned+0x38>
 8008ce8:	1a21      	subs	r1, r4, r0
 8008cea:	4628      	mov	r0, r5
 8008cec:	f001 f88e 	bl	8009e0c <_sbrk_r>
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d101      	bne.n	8008cf8 <sbrk_aligned+0x38>
 8008cf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	bd70      	pop	{r4, r5, r6, pc}
 8008cfc:	20000664 	.word	0x20000664

08008d00 <_malloc_r>:
 8008d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d04:	1ccd      	adds	r5, r1, #3
 8008d06:	f025 0503 	bic.w	r5, r5, #3
 8008d0a:	3508      	adds	r5, #8
 8008d0c:	2d0c      	cmp	r5, #12
 8008d0e:	bf38      	it	cc
 8008d10:	250c      	movcc	r5, #12
 8008d12:	2d00      	cmp	r5, #0
 8008d14:	4607      	mov	r7, r0
 8008d16:	db01      	blt.n	8008d1c <_malloc_r+0x1c>
 8008d18:	42a9      	cmp	r1, r5
 8008d1a:	d905      	bls.n	8008d28 <_malloc_r+0x28>
 8008d1c:	230c      	movs	r3, #12
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	2600      	movs	r6, #0
 8008d22:	4630      	mov	r0, r6
 8008d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008dfc <_malloc_r+0xfc>
 8008d2c:	f000 fab0 	bl	8009290 <__malloc_lock>
 8008d30:	f8d8 3000 	ldr.w	r3, [r8]
 8008d34:	461c      	mov	r4, r3
 8008d36:	bb5c      	cbnz	r4, 8008d90 <_malloc_r+0x90>
 8008d38:	4629      	mov	r1, r5
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	f7ff ffc0 	bl	8008cc0 <sbrk_aligned>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	4604      	mov	r4, r0
 8008d44:	d155      	bne.n	8008df2 <_malloc_r+0xf2>
 8008d46:	f8d8 4000 	ldr.w	r4, [r8]
 8008d4a:	4626      	mov	r6, r4
 8008d4c:	2e00      	cmp	r6, #0
 8008d4e:	d145      	bne.n	8008ddc <_malloc_r+0xdc>
 8008d50:	2c00      	cmp	r4, #0
 8008d52:	d048      	beq.n	8008de6 <_malloc_r+0xe6>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	4631      	mov	r1, r6
 8008d58:	4638      	mov	r0, r7
 8008d5a:	eb04 0903 	add.w	r9, r4, r3
 8008d5e:	f001 f855 	bl	8009e0c <_sbrk_r>
 8008d62:	4581      	cmp	r9, r0
 8008d64:	d13f      	bne.n	8008de6 <_malloc_r+0xe6>
 8008d66:	6821      	ldr	r1, [r4, #0]
 8008d68:	1a6d      	subs	r5, r5, r1
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f7ff ffa7 	bl	8008cc0 <sbrk_aligned>
 8008d72:	3001      	adds	r0, #1
 8008d74:	d037      	beq.n	8008de6 <_malloc_r+0xe6>
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	442b      	add	r3, r5
 8008d7a:	6023      	str	r3, [r4, #0]
 8008d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d038      	beq.n	8008df6 <_malloc_r+0xf6>
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	42a2      	cmp	r2, r4
 8008d88:	d12b      	bne.n	8008de2 <_malloc_r+0xe2>
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	605a      	str	r2, [r3, #4]
 8008d8e:	e00f      	b.n	8008db0 <_malloc_r+0xb0>
 8008d90:	6822      	ldr	r2, [r4, #0]
 8008d92:	1b52      	subs	r2, r2, r5
 8008d94:	d41f      	bmi.n	8008dd6 <_malloc_r+0xd6>
 8008d96:	2a0b      	cmp	r2, #11
 8008d98:	d917      	bls.n	8008dca <_malloc_r+0xca>
 8008d9a:	1961      	adds	r1, r4, r5
 8008d9c:	42a3      	cmp	r3, r4
 8008d9e:	6025      	str	r5, [r4, #0]
 8008da0:	bf18      	it	ne
 8008da2:	6059      	strne	r1, [r3, #4]
 8008da4:	6863      	ldr	r3, [r4, #4]
 8008da6:	bf08      	it	eq
 8008da8:	f8c8 1000 	streq.w	r1, [r8]
 8008dac:	5162      	str	r2, [r4, r5]
 8008dae:	604b      	str	r3, [r1, #4]
 8008db0:	4638      	mov	r0, r7
 8008db2:	f104 060b 	add.w	r6, r4, #11
 8008db6:	f000 fa71 	bl	800929c <__malloc_unlock>
 8008dba:	f026 0607 	bic.w	r6, r6, #7
 8008dbe:	1d23      	adds	r3, r4, #4
 8008dc0:	1af2      	subs	r2, r6, r3
 8008dc2:	d0ae      	beq.n	8008d22 <_malloc_r+0x22>
 8008dc4:	1b9b      	subs	r3, r3, r6
 8008dc6:	50a3      	str	r3, [r4, r2]
 8008dc8:	e7ab      	b.n	8008d22 <_malloc_r+0x22>
 8008dca:	42a3      	cmp	r3, r4
 8008dcc:	6862      	ldr	r2, [r4, #4]
 8008dce:	d1dd      	bne.n	8008d8c <_malloc_r+0x8c>
 8008dd0:	f8c8 2000 	str.w	r2, [r8]
 8008dd4:	e7ec      	b.n	8008db0 <_malloc_r+0xb0>
 8008dd6:	4623      	mov	r3, r4
 8008dd8:	6864      	ldr	r4, [r4, #4]
 8008dda:	e7ac      	b.n	8008d36 <_malloc_r+0x36>
 8008ddc:	4634      	mov	r4, r6
 8008dde:	6876      	ldr	r6, [r6, #4]
 8008de0:	e7b4      	b.n	8008d4c <_malloc_r+0x4c>
 8008de2:	4613      	mov	r3, r2
 8008de4:	e7cc      	b.n	8008d80 <_malloc_r+0x80>
 8008de6:	230c      	movs	r3, #12
 8008de8:	603b      	str	r3, [r7, #0]
 8008dea:	4638      	mov	r0, r7
 8008dec:	f000 fa56 	bl	800929c <__malloc_unlock>
 8008df0:	e797      	b.n	8008d22 <_malloc_r+0x22>
 8008df2:	6025      	str	r5, [r4, #0]
 8008df4:	e7dc      	b.n	8008db0 <_malloc_r+0xb0>
 8008df6:	605b      	str	r3, [r3, #4]
 8008df8:	deff      	udf	#255	; 0xff
 8008dfa:	bf00      	nop
 8008dfc:	20000660 	.word	0x20000660

08008e00 <__ascii_mbtowc>:
 8008e00:	b082      	sub	sp, #8
 8008e02:	b901      	cbnz	r1, 8008e06 <__ascii_mbtowc+0x6>
 8008e04:	a901      	add	r1, sp, #4
 8008e06:	b142      	cbz	r2, 8008e1a <__ascii_mbtowc+0x1a>
 8008e08:	b14b      	cbz	r3, 8008e1e <__ascii_mbtowc+0x1e>
 8008e0a:	7813      	ldrb	r3, [r2, #0]
 8008e0c:	600b      	str	r3, [r1, #0]
 8008e0e:	7812      	ldrb	r2, [r2, #0]
 8008e10:	1e10      	subs	r0, r2, #0
 8008e12:	bf18      	it	ne
 8008e14:	2001      	movne	r0, #1
 8008e16:	b002      	add	sp, #8
 8008e18:	4770      	bx	lr
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	e7fb      	b.n	8008e16 <__ascii_mbtowc+0x16>
 8008e1e:	f06f 0001 	mvn.w	r0, #1
 8008e22:	e7f8      	b.n	8008e16 <__ascii_mbtowc+0x16>

08008e24 <_scanf_chars>:
 8008e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e28:	4615      	mov	r5, r2
 8008e2a:	688a      	ldr	r2, [r1, #8]
 8008e2c:	4680      	mov	r8, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	b932      	cbnz	r2, 8008e40 <_scanf_chars+0x1c>
 8008e32:	698a      	ldr	r2, [r1, #24]
 8008e34:	2a00      	cmp	r2, #0
 8008e36:	bf0c      	ite	eq
 8008e38:	2201      	moveq	r2, #1
 8008e3a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8008e3e:	608a      	str	r2, [r1, #8]
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008ed4 <_scanf_chars+0xb0>
 8008e46:	06d1      	lsls	r1, r2, #27
 8008e48:	bf5f      	itttt	pl
 8008e4a:	681a      	ldrpl	r2, [r3, #0]
 8008e4c:	1d11      	addpl	r1, r2, #4
 8008e4e:	6019      	strpl	r1, [r3, #0]
 8008e50:	6816      	ldrpl	r6, [r2, #0]
 8008e52:	2700      	movs	r7, #0
 8008e54:	69a0      	ldr	r0, [r4, #24]
 8008e56:	b188      	cbz	r0, 8008e7c <_scanf_chars+0x58>
 8008e58:	2801      	cmp	r0, #1
 8008e5a:	d107      	bne.n	8008e6c <_scanf_chars+0x48>
 8008e5c:	682a      	ldr	r2, [r5, #0]
 8008e5e:	7811      	ldrb	r1, [r2, #0]
 8008e60:	6962      	ldr	r2, [r4, #20]
 8008e62:	5c52      	ldrb	r2, [r2, r1]
 8008e64:	b952      	cbnz	r2, 8008e7c <_scanf_chars+0x58>
 8008e66:	2f00      	cmp	r7, #0
 8008e68:	d031      	beq.n	8008ece <_scanf_chars+0xaa>
 8008e6a:	e022      	b.n	8008eb2 <_scanf_chars+0x8e>
 8008e6c:	2802      	cmp	r0, #2
 8008e6e:	d120      	bne.n	8008eb2 <_scanf_chars+0x8e>
 8008e70:	682b      	ldr	r3, [r5, #0]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008e78:	071b      	lsls	r3, r3, #28
 8008e7a:	d41a      	bmi.n	8008eb2 <_scanf_chars+0x8e>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	06da      	lsls	r2, r3, #27
 8008e80:	bf5e      	ittt	pl
 8008e82:	682b      	ldrpl	r3, [r5, #0]
 8008e84:	781b      	ldrbpl	r3, [r3, #0]
 8008e86:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008e8a:	682a      	ldr	r2, [r5, #0]
 8008e8c:	686b      	ldr	r3, [r5, #4]
 8008e8e:	3201      	adds	r2, #1
 8008e90:	602a      	str	r2, [r5, #0]
 8008e92:	68a2      	ldr	r2, [r4, #8]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	3a01      	subs	r2, #1
 8008e98:	606b      	str	r3, [r5, #4]
 8008e9a:	3701      	adds	r7, #1
 8008e9c:	60a2      	str	r2, [r4, #8]
 8008e9e:	b142      	cbz	r2, 8008eb2 <_scanf_chars+0x8e>
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	dcd7      	bgt.n	8008e54 <_scanf_chars+0x30>
 8008ea4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	4640      	mov	r0, r8
 8008eac:	4798      	blx	r3
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d0d0      	beq.n	8008e54 <_scanf_chars+0x30>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	f013 0310 	ands.w	r3, r3, #16
 8008eb8:	d105      	bne.n	8008ec6 <_scanf_chars+0xa2>
 8008eba:	68e2      	ldr	r2, [r4, #12]
 8008ebc:	3201      	adds	r2, #1
 8008ebe:	60e2      	str	r2, [r4, #12]
 8008ec0:	69a2      	ldr	r2, [r4, #24]
 8008ec2:	b102      	cbz	r2, 8008ec6 <_scanf_chars+0xa2>
 8008ec4:	7033      	strb	r3, [r6, #0]
 8008ec6:	6923      	ldr	r3, [r4, #16]
 8008ec8:	443b      	add	r3, r7
 8008eca:	6123      	str	r3, [r4, #16]
 8008ecc:	2000      	movs	r0, #0
 8008ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed2:	bf00      	nop
 8008ed4:	0800a5c9 	.word	0x0800a5c9

08008ed8 <_scanf_i>:
 8008ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008edc:	4698      	mov	r8, r3
 8008ede:	4b74      	ldr	r3, [pc, #464]	; (80090b0 <_scanf_i+0x1d8>)
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	4682      	mov	sl, r0
 8008ee4:	4616      	mov	r6, r2
 8008ee6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008eea:	b087      	sub	sp, #28
 8008eec:	ab03      	add	r3, sp, #12
 8008eee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008ef2:	4b70      	ldr	r3, [pc, #448]	; (80090b4 <_scanf_i+0x1dc>)
 8008ef4:	69a1      	ldr	r1, [r4, #24]
 8008ef6:	4a70      	ldr	r2, [pc, #448]	; (80090b8 <_scanf_i+0x1e0>)
 8008ef8:	2903      	cmp	r1, #3
 8008efa:	bf18      	it	ne
 8008efc:	461a      	movne	r2, r3
 8008efe:	68a3      	ldr	r3, [r4, #8]
 8008f00:	9201      	str	r2, [sp, #4]
 8008f02:	1e5a      	subs	r2, r3, #1
 8008f04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f08:	bf88      	it	hi
 8008f0a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f0e:	4627      	mov	r7, r4
 8008f10:	bf82      	ittt	hi
 8008f12:	eb03 0905 	addhi.w	r9, r3, r5
 8008f16:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f1a:	60a3      	strhi	r3, [r4, #8]
 8008f1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008f20:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008f24:	bf98      	it	ls
 8008f26:	f04f 0900 	movls.w	r9, #0
 8008f2a:	6023      	str	r3, [r4, #0]
 8008f2c:	463d      	mov	r5, r7
 8008f2e:	f04f 0b00 	mov.w	fp, #0
 8008f32:	6831      	ldr	r1, [r6, #0]
 8008f34:	ab03      	add	r3, sp, #12
 8008f36:	7809      	ldrb	r1, [r1, #0]
 8008f38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	f7f7 f947 	bl	80001d0 <memchr>
 8008f42:	b328      	cbz	r0, 8008f90 <_scanf_i+0xb8>
 8008f44:	f1bb 0f01 	cmp.w	fp, #1
 8008f48:	d159      	bne.n	8008ffe <_scanf_i+0x126>
 8008f4a:	6862      	ldr	r2, [r4, #4]
 8008f4c:	b92a      	cbnz	r2, 8008f5a <_scanf_i+0x82>
 8008f4e:	6822      	ldr	r2, [r4, #0]
 8008f50:	2308      	movs	r3, #8
 8008f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f56:	6063      	str	r3, [r4, #4]
 8008f58:	6022      	str	r2, [r4, #0]
 8008f5a:	6822      	ldr	r2, [r4, #0]
 8008f5c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008f60:	6022      	str	r2, [r4, #0]
 8008f62:	68a2      	ldr	r2, [r4, #8]
 8008f64:	1e51      	subs	r1, r2, #1
 8008f66:	60a1      	str	r1, [r4, #8]
 8008f68:	b192      	cbz	r2, 8008f90 <_scanf_i+0xb8>
 8008f6a:	6832      	ldr	r2, [r6, #0]
 8008f6c:	1c51      	adds	r1, r2, #1
 8008f6e:	6031      	str	r1, [r6, #0]
 8008f70:	7812      	ldrb	r2, [r2, #0]
 8008f72:	f805 2b01 	strb.w	r2, [r5], #1
 8008f76:	6872      	ldr	r2, [r6, #4]
 8008f78:	3a01      	subs	r2, #1
 8008f7a:	2a00      	cmp	r2, #0
 8008f7c:	6072      	str	r2, [r6, #4]
 8008f7e:	dc07      	bgt.n	8008f90 <_scanf_i+0xb8>
 8008f80:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008f84:	4631      	mov	r1, r6
 8008f86:	4650      	mov	r0, sl
 8008f88:	4790      	blx	r2
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	f040 8085 	bne.w	800909a <_scanf_i+0x1c2>
 8008f90:	f10b 0b01 	add.w	fp, fp, #1
 8008f94:	f1bb 0f03 	cmp.w	fp, #3
 8008f98:	d1cb      	bne.n	8008f32 <_scanf_i+0x5a>
 8008f9a:	6863      	ldr	r3, [r4, #4]
 8008f9c:	b90b      	cbnz	r3, 8008fa2 <_scanf_i+0xca>
 8008f9e:	230a      	movs	r3, #10
 8008fa0:	6063      	str	r3, [r4, #4]
 8008fa2:	6863      	ldr	r3, [r4, #4]
 8008fa4:	4945      	ldr	r1, [pc, #276]	; (80090bc <_scanf_i+0x1e4>)
 8008fa6:	6960      	ldr	r0, [r4, #20]
 8008fa8:	1ac9      	subs	r1, r1, r3
 8008faa:	f000 f889 	bl	80090c0 <__sccl>
 8008fae:	f04f 0b00 	mov.w	fp, #0
 8008fb2:	68a3      	ldr	r3, [r4, #8]
 8008fb4:	6822      	ldr	r2, [r4, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d03d      	beq.n	8009036 <_scanf_i+0x15e>
 8008fba:	6831      	ldr	r1, [r6, #0]
 8008fbc:	6960      	ldr	r0, [r4, #20]
 8008fbe:	f891 c000 	ldrb.w	ip, [r1]
 8008fc2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d035      	beq.n	8009036 <_scanf_i+0x15e>
 8008fca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008fce:	d124      	bne.n	800901a <_scanf_i+0x142>
 8008fd0:	0510      	lsls	r0, r2, #20
 8008fd2:	d522      	bpl.n	800901a <_scanf_i+0x142>
 8008fd4:	f10b 0b01 	add.w	fp, fp, #1
 8008fd8:	f1b9 0f00 	cmp.w	r9, #0
 8008fdc:	d003      	beq.n	8008fe6 <_scanf_i+0x10e>
 8008fde:	3301      	adds	r3, #1
 8008fe0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008fe4:	60a3      	str	r3, [r4, #8]
 8008fe6:	6873      	ldr	r3, [r6, #4]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	6073      	str	r3, [r6, #4]
 8008fee:	dd1b      	ble.n	8009028 <_scanf_i+0x150>
 8008ff0:	6833      	ldr	r3, [r6, #0]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	6033      	str	r3, [r6, #0]
 8008ff6:	68a3      	ldr	r3, [r4, #8]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	60a3      	str	r3, [r4, #8]
 8008ffc:	e7d9      	b.n	8008fb2 <_scanf_i+0xda>
 8008ffe:	f1bb 0f02 	cmp.w	fp, #2
 8009002:	d1ae      	bne.n	8008f62 <_scanf_i+0x8a>
 8009004:	6822      	ldr	r2, [r4, #0]
 8009006:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800900a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800900e:	d1bf      	bne.n	8008f90 <_scanf_i+0xb8>
 8009010:	2310      	movs	r3, #16
 8009012:	6063      	str	r3, [r4, #4]
 8009014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009018:	e7a2      	b.n	8008f60 <_scanf_i+0x88>
 800901a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800901e:	6022      	str	r2, [r4, #0]
 8009020:	780b      	ldrb	r3, [r1, #0]
 8009022:	f805 3b01 	strb.w	r3, [r5], #1
 8009026:	e7de      	b.n	8008fe6 <_scanf_i+0x10e>
 8009028:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800902c:	4631      	mov	r1, r6
 800902e:	4650      	mov	r0, sl
 8009030:	4798      	blx	r3
 8009032:	2800      	cmp	r0, #0
 8009034:	d0df      	beq.n	8008ff6 <_scanf_i+0x11e>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	05d9      	lsls	r1, r3, #23
 800903a:	d50d      	bpl.n	8009058 <_scanf_i+0x180>
 800903c:	42bd      	cmp	r5, r7
 800903e:	d909      	bls.n	8009054 <_scanf_i+0x17c>
 8009040:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009044:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009048:	4632      	mov	r2, r6
 800904a:	4650      	mov	r0, sl
 800904c:	4798      	blx	r3
 800904e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009052:	464d      	mov	r5, r9
 8009054:	42bd      	cmp	r5, r7
 8009056:	d028      	beq.n	80090aa <_scanf_i+0x1d2>
 8009058:	6822      	ldr	r2, [r4, #0]
 800905a:	f012 0210 	ands.w	r2, r2, #16
 800905e:	d113      	bne.n	8009088 <_scanf_i+0x1b0>
 8009060:	702a      	strb	r2, [r5, #0]
 8009062:	6863      	ldr	r3, [r4, #4]
 8009064:	9e01      	ldr	r6, [sp, #4]
 8009066:	4639      	mov	r1, r7
 8009068:	4650      	mov	r0, sl
 800906a:	47b0      	blx	r6
 800906c:	f8d8 3000 	ldr.w	r3, [r8]
 8009070:	6821      	ldr	r1, [r4, #0]
 8009072:	1d1a      	adds	r2, r3, #4
 8009074:	f8c8 2000 	str.w	r2, [r8]
 8009078:	f011 0f20 	tst.w	r1, #32
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	d00f      	beq.n	80090a0 <_scanf_i+0x1c8>
 8009080:	6018      	str	r0, [r3, #0]
 8009082:	68e3      	ldr	r3, [r4, #12]
 8009084:	3301      	adds	r3, #1
 8009086:	60e3      	str	r3, [r4, #12]
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	1bed      	subs	r5, r5, r7
 800908c:	445d      	add	r5, fp
 800908e:	442b      	add	r3, r5
 8009090:	6123      	str	r3, [r4, #16]
 8009092:	2000      	movs	r0, #0
 8009094:	b007      	add	sp, #28
 8009096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909a:	f04f 0b00 	mov.w	fp, #0
 800909e:	e7ca      	b.n	8009036 <_scanf_i+0x15e>
 80090a0:	07ca      	lsls	r2, r1, #31
 80090a2:	bf4c      	ite	mi
 80090a4:	8018      	strhmi	r0, [r3, #0]
 80090a6:	6018      	strpl	r0, [r3, #0]
 80090a8:	e7eb      	b.n	8009082 <_scanf_i+0x1aa>
 80090aa:	2001      	movs	r0, #1
 80090ac:	e7f2      	b.n	8009094 <_scanf_i+0x1bc>
 80090ae:	bf00      	nop
 80090b0:	0800a504 	.word	0x0800a504
 80090b4:	08009db9 	.word	0x08009db9
 80090b8:	08007081 	.word	0x08007081
 80090bc:	0800a7d7 	.word	0x0800a7d7

080090c0 <__sccl>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	780b      	ldrb	r3, [r1, #0]
 80090c4:	4604      	mov	r4, r0
 80090c6:	2b5e      	cmp	r3, #94	; 0x5e
 80090c8:	bf0b      	itete	eq
 80090ca:	784b      	ldrbeq	r3, [r1, #1]
 80090cc:	1c4a      	addne	r2, r1, #1
 80090ce:	1c8a      	addeq	r2, r1, #2
 80090d0:	2100      	movne	r1, #0
 80090d2:	bf08      	it	eq
 80090d4:	2101      	moveq	r1, #1
 80090d6:	3801      	subs	r0, #1
 80090d8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80090dc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80090e0:	42a8      	cmp	r0, r5
 80090e2:	d1fb      	bne.n	80090dc <__sccl+0x1c>
 80090e4:	b90b      	cbnz	r3, 80090ea <__sccl+0x2a>
 80090e6:	1e50      	subs	r0, r2, #1
 80090e8:	bd70      	pop	{r4, r5, r6, pc}
 80090ea:	f081 0101 	eor.w	r1, r1, #1
 80090ee:	54e1      	strb	r1, [r4, r3]
 80090f0:	4610      	mov	r0, r2
 80090f2:	4602      	mov	r2, r0
 80090f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80090f8:	2d2d      	cmp	r5, #45	; 0x2d
 80090fa:	d005      	beq.n	8009108 <__sccl+0x48>
 80090fc:	2d5d      	cmp	r5, #93	; 0x5d
 80090fe:	d016      	beq.n	800912e <__sccl+0x6e>
 8009100:	2d00      	cmp	r5, #0
 8009102:	d0f1      	beq.n	80090e8 <__sccl+0x28>
 8009104:	462b      	mov	r3, r5
 8009106:	e7f2      	b.n	80090ee <__sccl+0x2e>
 8009108:	7846      	ldrb	r6, [r0, #1]
 800910a:	2e5d      	cmp	r6, #93	; 0x5d
 800910c:	d0fa      	beq.n	8009104 <__sccl+0x44>
 800910e:	42b3      	cmp	r3, r6
 8009110:	dcf8      	bgt.n	8009104 <__sccl+0x44>
 8009112:	3002      	adds	r0, #2
 8009114:	461a      	mov	r2, r3
 8009116:	3201      	adds	r2, #1
 8009118:	4296      	cmp	r6, r2
 800911a:	54a1      	strb	r1, [r4, r2]
 800911c:	dcfb      	bgt.n	8009116 <__sccl+0x56>
 800911e:	1af2      	subs	r2, r6, r3
 8009120:	3a01      	subs	r2, #1
 8009122:	1c5d      	adds	r5, r3, #1
 8009124:	42b3      	cmp	r3, r6
 8009126:	bfa8      	it	ge
 8009128:	2200      	movge	r2, #0
 800912a:	18ab      	adds	r3, r5, r2
 800912c:	e7e1      	b.n	80090f2 <__sccl+0x32>
 800912e:	4610      	mov	r0, r2
 8009130:	e7da      	b.n	80090e8 <__sccl+0x28>
	...

08009134 <__sflush_r>:
 8009134:	898a      	ldrh	r2, [r1, #12]
 8009136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913a:	4605      	mov	r5, r0
 800913c:	0710      	lsls	r0, r2, #28
 800913e:	460c      	mov	r4, r1
 8009140:	d458      	bmi.n	80091f4 <__sflush_r+0xc0>
 8009142:	684b      	ldr	r3, [r1, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	dc05      	bgt.n	8009154 <__sflush_r+0x20>
 8009148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800914a:	2b00      	cmp	r3, #0
 800914c:	dc02      	bgt.n	8009154 <__sflush_r+0x20>
 800914e:	2000      	movs	r0, #0
 8009150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009156:	2e00      	cmp	r6, #0
 8009158:	d0f9      	beq.n	800914e <__sflush_r+0x1a>
 800915a:	2300      	movs	r3, #0
 800915c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009160:	682f      	ldr	r7, [r5, #0]
 8009162:	6a21      	ldr	r1, [r4, #32]
 8009164:	602b      	str	r3, [r5, #0]
 8009166:	d032      	beq.n	80091ce <__sflush_r+0x9a>
 8009168:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	075a      	lsls	r2, r3, #29
 800916e:	d505      	bpl.n	800917c <__sflush_r+0x48>
 8009170:	6863      	ldr	r3, [r4, #4]
 8009172:	1ac0      	subs	r0, r0, r3
 8009174:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009176:	b10b      	cbz	r3, 800917c <__sflush_r+0x48>
 8009178:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800917a:	1ac0      	subs	r0, r0, r3
 800917c:	2300      	movs	r3, #0
 800917e:	4602      	mov	r2, r0
 8009180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009182:	6a21      	ldr	r1, [r4, #32]
 8009184:	4628      	mov	r0, r5
 8009186:	47b0      	blx	r6
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	d106      	bne.n	800919c <__sflush_r+0x68>
 800918e:	6829      	ldr	r1, [r5, #0]
 8009190:	291d      	cmp	r1, #29
 8009192:	d82b      	bhi.n	80091ec <__sflush_r+0xb8>
 8009194:	4a29      	ldr	r2, [pc, #164]	; (800923c <__sflush_r+0x108>)
 8009196:	410a      	asrs	r2, r1
 8009198:	07d6      	lsls	r6, r2, #31
 800919a:	d427      	bmi.n	80091ec <__sflush_r+0xb8>
 800919c:	2200      	movs	r2, #0
 800919e:	6062      	str	r2, [r4, #4]
 80091a0:	04d9      	lsls	r1, r3, #19
 80091a2:	6922      	ldr	r2, [r4, #16]
 80091a4:	6022      	str	r2, [r4, #0]
 80091a6:	d504      	bpl.n	80091b2 <__sflush_r+0x7e>
 80091a8:	1c42      	adds	r2, r0, #1
 80091aa:	d101      	bne.n	80091b0 <__sflush_r+0x7c>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b903      	cbnz	r3, 80091b2 <__sflush_r+0x7e>
 80091b0:	6560      	str	r0, [r4, #84]	; 0x54
 80091b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091b4:	602f      	str	r7, [r5, #0]
 80091b6:	2900      	cmp	r1, #0
 80091b8:	d0c9      	beq.n	800914e <__sflush_r+0x1a>
 80091ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091be:	4299      	cmp	r1, r3
 80091c0:	d002      	beq.n	80091c8 <__sflush_r+0x94>
 80091c2:	4628      	mov	r0, r5
 80091c4:	f7fe fea6 	bl	8007f14 <_free_r>
 80091c8:	2000      	movs	r0, #0
 80091ca:	6360      	str	r0, [r4, #52]	; 0x34
 80091cc:	e7c0      	b.n	8009150 <__sflush_r+0x1c>
 80091ce:	2301      	movs	r3, #1
 80091d0:	4628      	mov	r0, r5
 80091d2:	47b0      	blx	r6
 80091d4:	1c41      	adds	r1, r0, #1
 80091d6:	d1c8      	bne.n	800916a <__sflush_r+0x36>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0c5      	beq.n	800916a <__sflush_r+0x36>
 80091de:	2b1d      	cmp	r3, #29
 80091e0:	d001      	beq.n	80091e6 <__sflush_r+0xb2>
 80091e2:	2b16      	cmp	r3, #22
 80091e4:	d101      	bne.n	80091ea <__sflush_r+0xb6>
 80091e6:	602f      	str	r7, [r5, #0]
 80091e8:	e7b1      	b.n	800914e <__sflush_r+0x1a>
 80091ea:	89a3      	ldrh	r3, [r4, #12]
 80091ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f0:	81a3      	strh	r3, [r4, #12]
 80091f2:	e7ad      	b.n	8009150 <__sflush_r+0x1c>
 80091f4:	690f      	ldr	r7, [r1, #16]
 80091f6:	2f00      	cmp	r7, #0
 80091f8:	d0a9      	beq.n	800914e <__sflush_r+0x1a>
 80091fa:	0793      	lsls	r3, r2, #30
 80091fc:	680e      	ldr	r6, [r1, #0]
 80091fe:	bf08      	it	eq
 8009200:	694b      	ldreq	r3, [r1, #20]
 8009202:	600f      	str	r7, [r1, #0]
 8009204:	bf18      	it	ne
 8009206:	2300      	movne	r3, #0
 8009208:	eba6 0807 	sub.w	r8, r6, r7
 800920c:	608b      	str	r3, [r1, #8]
 800920e:	f1b8 0f00 	cmp.w	r8, #0
 8009212:	dd9c      	ble.n	800914e <__sflush_r+0x1a>
 8009214:	6a21      	ldr	r1, [r4, #32]
 8009216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009218:	4643      	mov	r3, r8
 800921a:	463a      	mov	r2, r7
 800921c:	4628      	mov	r0, r5
 800921e:	47b0      	blx	r6
 8009220:	2800      	cmp	r0, #0
 8009222:	dc06      	bgt.n	8009232 <__sflush_r+0xfe>
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800922a:	81a3      	strh	r3, [r4, #12]
 800922c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009230:	e78e      	b.n	8009150 <__sflush_r+0x1c>
 8009232:	4407      	add	r7, r0
 8009234:	eba8 0800 	sub.w	r8, r8, r0
 8009238:	e7e9      	b.n	800920e <__sflush_r+0xda>
 800923a:	bf00      	nop
 800923c:	dfbffffe 	.word	0xdfbffffe

08009240 <_fflush_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	690b      	ldr	r3, [r1, #16]
 8009244:	4605      	mov	r5, r0
 8009246:	460c      	mov	r4, r1
 8009248:	b913      	cbnz	r3, 8009250 <_fflush_r+0x10>
 800924a:	2500      	movs	r5, #0
 800924c:	4628      	mov	r0, r5
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	b118      	cbz	r0, 800925a <_fflush_r+0x1a>
 8009252:	6a03      	ldr	r3, [r0, #32]
 8009254:	b90b      	cbnz	r3, 800925a <_fflush_r+0x1a>
 8009256:	f7fd f867 	bl	8006328 <__sinit>
 800925a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d0f3      	beq.n	800924a <_fflush_r+0xa>
 8009262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009264:	07d0      	lsls	r0, r2, #31
 8009266:	d404      	bmi.n	8009272 <_fflush_r+0x32>
 8009268:	0599      	lsls	r1, r3, #22
 800926a:	d402      	bmi.n	8009272 <_fflush_r+0x32>
 800926c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800926e:	f7fd ffb5 	bl	80071dc <__retarget_lock_acquire_recursive>
 8009272:	4628      	mov	r0, r5
 8009274:	4621      	mov	r1, r4
 8009276:	f7ff ff5d 	bl	8009134 <__sflush_r>
 800927a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800927c:	07da      	lsls	r2, r3, #31
 800927e:	4605      	mov	r5, r0
 8009280:	d4e4      	bmi.n	800924c <_fflush_r+0xc>
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	059b      	lsls	r3, r3, #22
 8009286:	d4e1      	bmi.n	800924c <_fflush_r+0xc>
 8009288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800928a:	f7fd ffa8 	bl	80071de <__retarget_lock_release_recursive>
 800928e:	e7dd      	b.n	800924c <_fflush_r+0xc>

08009290 <__malloc_lock>:
 8009290:	4801      	ldr	r0, [pc, #4]	; (8009298 <__malloc_lock+0x8>)
 8009292:	f7fd bfa3 	b.w	80071dc <__retarget_lock_acquire_recursive>
 8009296:	bf00      	nop
 8009298:	2000065c 	.word	0x2000065c

0800929c <__malloc_unlock>:
 800929c:	4801      	ldr	r0, [pc, #4]	; (80092a4 <__malloc_unlock+0x8>)
 800929e:	f7fd bf9e 	b.w	80071de <__retarget_lock_release_recursive>
 80092a2:	bf00      	nop
 80092a4:	2000065c 	.word	0x2000065c

080092a8 <_Balloc>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	69c6      	ldr	r6, [r0, #28]
 80092ac:	4604      	mov	r4, r0
 80092ae:	460d      	mov	r5, r1
 80092b0:	b976      	cbnz	r6, 80092d0 <_Balloc+0x28>
 80092b2:	2010      	movs	r0, #16
 80092b4:	f7ff fcfc 	bl	8008cb0 <malloc>
 80092b8:	4602      	mov	r2, r0
 80092ba:	61e0      	str	r0, [r4, #28]
 80092bc:	b920      	cbnz	r0, 80092c8 <_Balloc+0x20>
 80092be:	4b18      	ldr	r3, [pc, #96]	; (8009320 <_Balloc+0x78>)
 80092c0:	4818      	ldr	r0, [pc, #96]	; (8009324 <_Balloc+0x7c>)
 80092c2:	216b      	movs	r1, #107	; 0x6b
 80092c4:	f000 fdb2 	bl	8009e2c <__assert_func>
 80092c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092cc:	6006      	str	r6, [r0, #0]
 80092ce:	60c6      	str	r6, [r0, #12]
 80092d0:	69e6      	ldr	r6, [r4, #28]
 80092d2:	68f3      	ldr	r3, [r6, #12]
 80092d4:	b183      	cbz	r3, 80092f8 <_Balloc+0x50>
 80092d6:	69e3      	ldr	r3, [r4, #28]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092de:	b9b8      	cbnz	r0, 8009310 <_Balloc+0x68>
 80092e0:	2101      	movs	r1, #1
 80092e2:	fa01 f605 	lsl.w	r6, r1, r5
 80092e6:	1d72      	adds	r2, r6, #5
 80092e8:	0092      	lsls	r2, r2, #2
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 fdbc 	bl	8009e68 <_calloc_r>
 80092f0:	b160      	cbz	r0, 800930c <_Balloc+0x64>
 80092f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092f6:	e00e      	b.n	8009316 <_Balloc+0x6e>
 80092f8:	2221      	movs	r2, #33	; 0x21
 80092fa:	2104      	movs	r1, #4
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 fdb3 	bl	8009e68 <_calloc_r>
 8009302:	69e3      	ldr	r3, [r4, #28]
 8009304:	60f0      	str	r0, [r6, #12]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e4      	bne.n	80092d6 <_Balloc+0x2e>
 800930c:	2000      	movs	r0, #0
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	6802      	ldr	r2, [r0, #0]
 8009312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009316:	2300      	movs	r3, #0
 8009318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800931c:	e7f7      	b.n	800930e <_Balloc+0x66>
 800931e:	bf00      	nop
 8009320:	0800a6d6 	.word	0x0800a6d6
 8009324:	0800a7e2 	.word	0x0800a7e2

08009328 <_Bfree>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	69c6      	ldr	r6, [r0, #28]
 800932c:	4605      	mov	r5, r0
 800932e:	460c      	mov	r4, r1
 8009330:	b976      	cbnz	r6, 8009350 <_Bfree+0x28>
 8009332:	2010      	movs	r0, #16
 8009334:	f7ff fcbc 	bl	8008cb0 <malloc>
 8009338:	4602      	mov	r2, r0
 800933a:	61e8      	str	r0, [r5, #28]
 800933c:	b920      	cbnz	r0, 8009348 <_Bfree+0x20>
 800933e:	4b09      	ldr	r3, [pc, #36]	; (8009364 <_Bfree+0x3c>)
 8009340:	4809      	ldr	r0, [pc, #36]	; (8009368 <_Bfree+0x40>)
 8009342:	218f      	movs	r1, #143	; 0x8f
 8009344:	f000 fd72 	bl	8009e2c <__assert_func>
 8009348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800934c:	6006      	str	r6, [r0, #0]
 800934e:	60c6      	str	r6, [r0, #12]
 8009350:	b13c      	cbz	r4, 8009362 <_Bfree+0x3a>
 8009352:	69eb      	ldr	r3, [r5, #28]
 8009354:	6862      	ldr	r2, [r4, #4]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800935c:	6021      	str	r1, [r4, #0]
 800935e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009362:	bd70      	pop	{r4, r5, r6, pc}
 8009364:	0800a6d6 	.word	0x0800a6d6
 8009368:	0800a7e2 	.word	0x0800a7e2

0800936c <__multadd>:
 800936c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009370:	690d      	ldr	r5, [r1, #16]
 8009372:	4607      	mov	r7, r0
 8009374:	460c      	mov	r4, r1
 8009376:	461e      	mov	r6, r3
 8009378:	f101 0c14 	add.w	ip, r1, #20
 800937c:	2000      	movs	r0, #0
 800937e:	f8dc 3000 	ldr.w	r3, [ip]
 8009382:	b299      	uxth	r1, r3
 8009384:	fb02 6101 	mla	r1, r2, r1, r6
 8009388:	0c1e      	lsrs	r6, r3, #16
 800938a:	0c0b      	lsrs	r3, r1, #16
 800938c:	fb02 3306 	mla	r3, r2, r6, r3
 8009390:	b289      	uxth	r1, r1
 8009392:	3001      	adds	r0, #1
 8009394:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009398:	4285      	cmp	r5, r0
 800939a:	f84c 1b04 	str.w	r1, [ip], #4
 800939e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093a2:	dcec      	bgt.n	800937e <__multadd+0x12>
 80093a4:	b30e      	cbz	r6, 80093ea <__multadd+0x7e>
 80093a6:	68a3      	ldr	r3, [r4, #8]
 80093a8:	42ab      	cmp	r3, r5
 80093aa:	dc19      	bgt.n	80093e0 <__multadd+0x74>
 80093ac:	6861      	ldr	r1, [r4, #4]
 80093ae:	4638      	mov	r0, r7
 80093b0:	3101      	adds	r1, #1
 80093b2:	f7ff ff79 	bl	80092a8 <_Balloc>
 80093b6:	4680      	mov	r8, r0
 80093b8:	b928      	cbnz	r0, 80093c6 <__multadd+0x5a>
 80093ba:	4602      	mov	r2, r0
 80093bc:	4b0c      	ldr	r3, [pc, #48]	; (80093f0 <__multadd+0x84>)
 80093be:	480d      	ldr	r0, [pc, #52]	; (80093f4 <__multadd+0x88>)
 80093c0:	21ba      	movs	r1, #186	; 0xba
 80093c2:	f000 fd33 	bl	8009e2c <__assert_func>
 80093c6:	6922      	ldr	r2, [r4, #16]
 80093c8:	3202      	adds	r2, #2
 80093ca:	f104 010c 	add.w	r1, r4, #12
 80093ce:	0092      	lsls	r2, r2, #2
 80093d0:	300c      	adds	r0, #12
 80093d2:	f7fd ff05 	bl	80071e0 <memcpy>
 80093d6:	4621      	mov	r1, r4
 80093d8:	4638      	mov	r0, r7
 80093da:	f7ff ffa5 	bl	8009328 <_Bfree>
 80093de:	4644      	mov	r4, r8
 80093e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093e4:	3501      	adds	r5, #1
 80093e6:	615e      	str	r6, [r3, #20]
 80093e8:	6125      	str	r5, [r4, #16]
 80093ea:	4620      	mov	r0, r4
 80093ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f0:	0800a745 	.word	0x0800a745
 80093f4:	0800a7e2 	.word	0x0800a7e2

080093f8 <__s2b>:
 80093f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093fc:	460c      	mov	r4, r1
 80093fe:	4615      	mov	r5, r2
 8009400:	461f      	mov	r7, r3
 8009402:	2209      	movs	r2, #9
 8009404:	3308      	adds	r3, #8
 8009406:	4606      	mov	r6, r0
 8009408:	fb93 f3f2 	sdiv	r3, r3, r2
 800940c:	2100      	movs	r1, #0
 800940e:	2201      	movs	r2, #1
 8009410:	429a      	cmp	r2, r3
 8009412:	db09      	blt.n	8009428 <__s2b+0x30>
 8009414:	4630      	mov	r0, r6
 8009416:	f7ff ff47 	bl	80092a8 <_Balloc>
 800941a:	b940      	cbnz	r0, 800942e <__s2b+0x36>
 800941c:	4602      	mov	r2, r0
 800941e:	4b19      	ldr	r3, [pc, #100]	; (8009484 <__s2b+0x8c>)
 8009420:	4819      	ldr	r0, [pc, #100]	; (8009488 <__s2b+0x90>)
 8009422:	21d3      	movs	r1, #211	; 0xd3
 8009424:	f000 fd02 	bl	8009e2c <__assert_func>
 8009428:	0052      	lsls	r2, r2, #1
 800942a:	3101      	adds	r1, #1
 800942c:	e7f0      	b.n	8009410 <__s2b+0x18>
 800942e:	9b08      	ldr	r3, [sp, #32]
 8009430:	6143      	str	r3, [r0, #20]
 8009432:	2d09      	cmp	r5, #9
 8009434:	f04f 0301 	mov.w	r3, #1
 8009438:	6103      	str	r3, [r0, #16]
 800943a:	dd16      	ble.n	800946a <__s2b+0x72>
 800943c:	f104 0909 	add.w	r9, r4, #9
 8009440:	46c8      	mov	r8, r9
 8009442:	442c      	add	r4, r5
 8009444:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009448:	4601      	mov	r1, r0
 800944a:	3b30      	subs	r3, #48	; 0x30
 800944c:	220a      	movs	r2, #10
 800944e:	4630      	mov	r0, r6
 8009450:	f7ff ff8c 	bl	800936c <__multadd>
 8009454:	45a0      	cmp	r8, r4
 8009456:	d1f5      	bne.n	8009444 <__s2b+0x4c>
 8009458:	f1a5 0408 	sub.w	r4, r5, #8
 800945c:	444c      	add	r4, r9
 800945e:	1b2d      	subs	r5, r5, r4
 8009460:	1963      	adds	r3, r4, r5
 8009462:	42bb      	cmp	r3, r7
 8009464:	db04      	blt.n	8009470 <__s2b+0x78>
 8009466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946a:	340a      	adds	r4, #10
 800946c:	2509      	movs	r5, #9
 800946e:	e7f6      	b.n	800945e <__s2b+0x66>
 8009470:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009474:	4601      	mov	r1, r0
 8009476:	3b30      	subs	r3, #48	; 0x30
 8009478:	220a      	movs	r2, #10
 800947a:	4630      	mov	r0, r6
 800947c:	f7ff ff76 	bl	800936c <__multadd>
 8009480:	e7ee      	b.n	8009460 <__s2b+0x68>
 8009482:	bf00      	nop
 8009484:	0800a745 	.word	0x0800a745
 8009488:	0800a7e2 	.word	0x0800a7e2

0800948c <__hi0bits>:
 800948c:	0c03      	lsrs	r3, r0, #16
 800948e:	041b      	lsls	r3, r3, #16
 8009490:	b9d3      	cbnz	r3, 80094c8 <__hi0bits+0x3c>
 8009492:	0400      	lsls	r0, r0, #16
 8009494:	2310      	movs	r3, #16
 8009496:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800949a:	bf04      	itt	eq
 800949c:	0200      	lsleq	r0, r0, #8
 800949e:	3308      	addeq	r3, #8
 80094a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094a4:	bf04      	itt	eq
 80094a6:	0100      	lsleq	r0, r0, #4
 80094a8:	3304      	addeq	r3, #4
 80094aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094ae:	bf04      	itt	eq
 80094b0:	0080      	lsleq	r0, r0, #2
 80094b2:	3302      	addeq	r3, #2
 80094b4:	2800      	cmp	r0, #0
 80094b6:	db05      	blt.n	80094c4 <__hi0bits+0x38>
 80094b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094bc:	f103 0301 	add.w	r3, r3, #1
 80094c0:	bf08      	it	eq
 80094c2:	2320      	moveq	r3, #32
 80094c4:	4618      	mov	r0, r3
 80094c6:	4770      	bx	lr
 80094c8:	2300      	movs	r3, #0
 80094ca:	e7e4      	b.n	8009496 <__hi0bits+0xa>

080094cc <__lo0bits>:
 80094cc:	6803      	ldr	r3, [r0, #0]
 80094ce:	f013 0207 	ands.w	r2, r3, #7
 80094d2:	d00c      	beq.n	80094ee <__lo0bits+0x22>
 80094d4:	07d9      	lsls	r1, r3, #31
 80094d6:	d422      	bmi.n	800951e <__lo0bits+0x52>
 80094d8:	079a      	lsls	r2, r3, #30
 80094da:	bf49      	itett	mi
 80094dc:	085b      	lsrmi	r3, r3, #1
 80094de:	089b      	lsrpl	r3, r3, #2
 80094e0:	6003      	strmi	r3, [r0, #0]
 80094e2:	2201      	movmi	r2, #1
 80094e4:	bf5c      	itt	pl
 80094e6:	6003      	strpl	r3, [r0, #0]
 80094e8:	2202      	movpl	r2, #2
 80094ea:	4610      	mov	r0, r2
 80094ec:	4770      	bx	lr
 80094ee:	b299      	uxth	r1, r3
 80094f0:	b909      	cbnz	r1, 80094f6 <__lo0bits+0x2a>
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	2210      	movs	r2, #16
 80094f6:	b2d9      	uxtb	r1, r3
 80094f8:	b909      	cbnz	r1, 80094fe <__lo0bits+0x32>
 80094fa:	3208      	adds	r2, #8
 80094fc:	0a1b      	lsrs	r3, r3, #8
 80094fe:	0719      	lsls	r1, r3, #28
 8009500:	bf04      	itt	eq
 8009502:	091b      	lsreq	r3, r3, #4
 8009504:	3204      	addeq	r2, #4
 8009506:	0799      	lsls	r1, r3, #30
 8009508:	bf04      	itt	eq
 800950a:	089b      	lsreq	r3, r3, #2
 800950c:	3202      	addeq	r2, #2
 800950e:	07d9      	lsls	r1, r3, #31
 8009510:	d403      	bmi.n	800951a <__lo0bits+0x4e>
 8009512:	085b      	lsrs	r3, r3, #1
 8009514:	f102 0201 	add.w	r2, r2, #1
 8009518:	d003      	beq.n	8009522 <__lo0bits+0x56>
 800951a:	6003      	str	r3, [r0, #0]
 800951c:	e7e5      	b.n	80094ea <__lo0bits+0x1e>
 800951e:	2200      	movs	r2, #0
 8009520:	e7e3      	b.n	80094ea <__lo0bits+0x1e>
 8009522:	2220      	movs	r2, #32
 8009524:	e7e1      	b.n	80094ea <__lo0bits+0x1e>
	...

08009528 <__i2b>:
 8009528:	b510      	push	{r4, lr}
 800952a:	460c      	mov	r4, r1
 800952c:	2101      	movs	r1, #1
 800952e:	f7ff febb 	bl	80092a8 <_Balloc>
 8009532:	4602      	mov	r2, r0
 8009534:	b928      	cbnz	r0, 8009542 <__i2b+0x1a>
 8009536:	4b05      	ldr	r3, [pc, #20]	; (800954c <__i2b+0x24>)
 8009538:	4805      	ldr	r0, [pc, #20]	; (8009550 <__i2b+0x28>)
 800953a:	f240 1145 	movw	r1, #325	; 0x145
 800953e:	f000 fc75 	bl	8009e2c <__assert_func>
 8009542:	2301      	movs	r3, #1
 8009544:	6144      	str	r4, [r0, #20]
 8009546:	6103      	str	r3, [r0, #16]
 8009548:	bd10      	pop	{r4, pc}
 800954a:	bf00      	nop
 800954c:	0800a745 	.word	0x0800a745
 8009550:	0800a7e2 	.word	0x0800a7e2

08009554 <__multiply>:
 8009554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009558:	4691      	mov	r9, r2
 800955a:	690a      	ldr	r2, [r1, #16]
 800955c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009560:	429a      	cmp	r2, r3
 8009562:	bfb8      	it	lt
 8009564:	460b      	movlt	r3, r1
 8009566:	460c      	mov	r4, r1
 8009568:	bfbc      	itt	lt
 800956a:	464c      	movlt	r4, r9
 800956c:	4699      	movlt	r9, r3
 800956e:	6927      	ldr	r7, [r4, #16]
 8009570:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009574:	68a3      	ldr	r3, [r4, #8]
 8009576:	6861      	ldr	r1, [r4, #4]
 8009578:	eb07 060a 	add.w	r6, r7, sl
 800957c:	42b3      	cmp	r3, r6
 800957e:	b085      	sub	sp, #20
 8009580:	bfb8      	it	lt
 8009582:	3101      	addlt	r1, #1
 8009584:	f7ff fe90 	bl	80092a8 <_Balloc>
 8009588:	b930      	cbnz	r0, 8009598 <__multiply+0x44>
 800958a:	4602      	mov	r2, r0
 800958c:	4b44      	ldr	r3, [pc, #272]	; (80096a0 <__multiply+0x14c>)
 800958e:	4845      	ldr	r0, [pc, #276]	; (80096a4 <__multiply+0x150>)
 8009590:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009594:	f000 fc4a 	bl	8009e2c <__assert_func>
 8009598:	f100 0514 	add.w	r5, r0, #20
 800959c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095a0:	462b      	mov	r3, r5
 80095a2:	2200      	movs	r2, #0
 80095a4:	4543      	cmp	r3, r8
 80095a6:	d321      	bcc.n	80095ec <__multiply+0x98>
 80095a8:	f104 0314 	add.w	r3, r4, #20
 80095ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095b0:	f109 0314 	add.w	r3, r9, #20
 80095b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095b8:	9202      	str	r2, [sp, #8]
 80095ba:	1b3a      	subs	r2, r7, r4
 80095bc:	3a15      	subs	r2, #21
 80095be:	f022 0203 	bic.w	r2, r2, #3
 80095c2:	3204      	adds	r2, #4
 80095c4:	f104 0115 	add.w	r1, r4, #21
 80095c8:	428f      	cmp	r7, r1
 80095ca:	bf38      	it	cc
 80095cc:	2204      	movcc	r2, #4
 80095ce:	9201      	str	r2, [sp, #4]
 80095d0:	9a02      	ldr	r2, [sp, #8]
 80095d2:	9303      	str	r3, [sp, #12]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d80c      	bhi.n	80095f2 <__multiply+0x9e>
 80095d8:	2e00      	cmp	r6, #0
 80095da:	dd03      	ble.n	80095e4 <__multiply+0x90>
 80095dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d05b      	beq.n	800969c <__multiply+0x148>
 80095e4:	6106      	str	r6, [r0, #16]
 80095e6:	b005      	add	sp, #20
 80095e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ec:	f843 2b04 	str.w	r2, [r3], #4
 80095f0:	e7d8      	b.n	80095a4 <__multiply+0x50>
 80095f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80095f6:	f1ba 0f00 	cmp.w	sl, #0
 80095fa:	d024      	beq.n	8009646 <__multiply+0xf2>
 80095fc:	f104 0e14 	add.w	lr, r4, #20
 8009600:	46a9      	mov	r9, r5
 8009602:	f04f 0c00 	mov.w	ip, #0
 8009606:	f85e 2b04 	ldr.w	r2, [lr], #4
 800960a:	f8d9 1000 	ldr.w	r1, [r9]
 800960e:	fa1f fb82 	uxth.w	fp, r2
 8009612:	b289      	uxth	r1, r1
 8009614:	fb0a 110b 	mla	r1, sl, fp, r1
 8009618:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800961c:	f8d9 2000 	ldr.w	r2, [r9]
 8009620:	4461      	add	r1, ip
 8009622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009626:	fb0a c20b 	mla	r2, sl, fp, ip
 800962a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800962e:	b289      	uxth	r1, r1
 8009630:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009634:	4577      	cmp	r7, lr
 8009636:	f849 1b04 	str.w	r1, [r9], #4
 800963a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800963e:	d8e2      	bhi.n	8009606 <__multiply+0xb2>
 8009640:	9a01      	ldr	r2, [sp, #4]
 8009642:	f845 c002 	str.w	ip, [r5, r2]
 8009646:	9a03      	ldr	r2, [sp, #12]
 8009648:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800964c:	3304      	adds	r3, #4
 800964e:	f1b9 0f00 	cmp.w	r9, #0
 8009652:	d021      	beq.n	8009698 <__multiply+0x144>
 8009654:	6829      	ldr	r1, [r5, #0]
 8009656:	f104 0c14 	add.w	ip, r4, #20
 800965a:	46ae      	mov	lr, r5
 800965c:	f04f 0a00 	mov.w	sl, #0
 8009660:	f8bc b000 	ldrh.w	fp, [ip]
 8009664:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009668:	fb09 220b 	mla	r2, r9, fp, r2
 800966c:	4452      	add	r2, sl
 800966e:	b289      	uxth	r1, r1
 8009670:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009674:	f84e 1b04 	str.w	r1, [lr], #4
 8009678:	f85c 1b04 	ldr.w	r1, [ip], #4
 800967c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009680:	f8be 1000 	ldrh.w	r1, [lr]
 8009684:	fb09 110a 	mla	r1, r9, sl, r1
 8009688:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800968c:	4567      	cmp	r7, ip
 800968e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009692:	d8e5      	bhi.n	8009660 <__multiply+0x10c>
 8009694:	9a01      	ldr	r2, [sp, #4]
 8009696:	50a9      	str	r1, [r5, r2]
 8009698:	3504      	adds	r5, #4
 800969a:	e799      	b.n	80095d0 <__multiply+0x7c>
 800969c:	3e01      	subs	r6, #1
 800969e:	e79b      	b.n	80095d8 <__multiply+0x84>
 80096a0:	0800a745 	.word	0x0800a745
 80096a4:	0800a7e2 	.word	0x0800a7e2

080096a8 <__pow5mult>:
 80096a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ac:	4615      	mov	r5, r2
 80096ae:	f012 0203 	ands.w	r2, r2, #3
 80096b2:	4606      	mov	r6, r0
 80096b4:	460f      	mov	r7, r1
 80096b6:	d007      	beq.n	80096c8 <__pow5mult+0x20>
 80096b8:	4c25      	ldr	r4, [pc, #148]	; (8009750 <__pow5mult+0xa8>)
 80096ba:	3a01      	subs	r2, #1
 80096bc:	2300      	movs	r3, #0
 80096be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096c2:	f7ff fe53 	bl	800936c <__multadd>
 80096c6:	4607      	mov	r7, r0
 80096c8:	10ad      	asrs	r5, r5, #2
 80096ca:	d03d      	beq.n	8009748 <__pow5mult+0xa0>
 80096cc:	69f4      	ldr	r4, [r6, #28]
 80096ce:	b97c      	cbnz	r4, 80096f0 <__pow5mult+0x48>
 80096d0:	2010      	movs	r0, #16
 80096d2:	f7ff faed 	bl	8008cb0 <malloc>
 80096d6:	4602      	mov	r2, r0
 80096d8:	61f0      	str	r0, [r6, #28]
 80096da:	b928      	cbnz	r0, 80096e8 <__pow5mult+0x40>
 80096dc:	4b1d      	ldr	r3, [pc, #116]	; (8009754 <__pow5mult+0xac>)
 80096de:	481e      	ldr	r0, [pc, #120]	; (8009758 <__pow5mult+0xb0>)
 80096e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80096e4:	f000 fba2 	bl	8009e2c <__assert_func>
 80096e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096ec:	6004      	str	r4, [r0, #0]
 80096ee:	60c4      	str	r4, [r0, #12]
 80096f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80096f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096f8:	b94c      	cbnz	r4, 800970e <__pow5mult+0x66>
 80096fa:	f240 2171 	movw	r1, #625	; 0x271
 80096fe:	4630      	mov	r0, r6
 8009700:	f7ff ff12 	bl	8009528 <__i2b>
 8009704:	2300      	movs	r3, #0
 8009706:	f8c8 0008 	str.w	r0, [r8, #8]
 800970a:	4604      	mov	r4, r0
 800970c:	6003      	str	r3, [r0, #0]
 800970e:	f04f 0900 	mov.w	r9, #0
 8009712:	07eb      	lsls	r3, r5, #31
 8009714:	d50a      	bpl.n	800972c <__pow5mult+0x84>
 8009716:	4639      	mov	r1, r7
 8009718:	4622      	mov	r2, r4
 800971a:	4630      	mov	r0, r6
 800971c:	f7ff ff1a 	bl	8009554 <__multiply>
 8009720:	4639      	mov	r1, r7
 8009722:	4680      	mov	r8, r0
 8009724:	4630      	mov	r0, r6
 8009726:	f7ff fdff 	bl	8009328 <_Bfree>
 800972a:	4647      	mov	r7, r8
 800972c:	106d      	asrs	r5, r5, #1
 800972e:	d00b      	beq.n	8009748 <__pow5mult+0xa0>
 8009730:	6820      	ldr	r0, [r4, #0]
 8009732:	b938      	cbnz	r0, 8009744 <__pow5mult+0x9c>
 8009734:	4622      	mov	r2, r4
 8009736:	4621      	mov	r1, r4
 8009738:	4630      	mov	r0, r6
 800973a:	f7ff ff0b 	bl	8009554 <__multiply>
 800973e:	6020      	str	r0, [r4, #0]
 8009740:	f8c0 9000 	str.w	r9, [r0]
 8009744:	4604      	mov	r4, r0
 8009746:	e7e4      	b.n	8009712 <__pow5mult+0x6a>
 8009748:	4638      	mov	r0, r7
 800974a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974e:	bf00      	nop
 8009750:	0800a930 	.word	0x0800a930
 8009754:	0800a6d6 	.word	0x0800a6d6
 8009758:	0800a7e2 	.word	0x0800a7e2

0800975c <__lshift>:
 800975c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009760:	460c      	mov	r4, r1
 8009762:	6849      	ldr	r1, [r1, #4]
 8009764:	6923      	ldr	r3, [r4, #16]
 8009766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800976a:	68a3      	ldr	r3, [r4, #8]
 800976c:	4607      	mov	r7, r0
 800976e:	4691      	mov	r9, r2
 8009770:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009774:	f108 0601 	add.w	r6, r8, #1
 8009778:	42b3      	cmp	r3, r6
 800977a:	db0b      	blt.n	8009794 <__lshift+0x38>
 800977c:	4638      	mov	r0, r7
 800977e:	f7ff fd93 	bl	80092a8 <_Balloc>
 8009782:	4605      	mov	r5, r0
 8009784:	b948      	cbnz	r0, 800979a <__lshift+0x3e>
 8009786:	4602      	mov	r2, r0
 8009788:	4b28      	ldr	r3, [pc, #160]	; (800982c <__lshift+0xd0>)
 800978a:	4829      	ldr	r0, [pc, #164]	; (8009830 <__lshift+0xd4>)
 800978c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009790:	f000 fb4c 	bl	8009e2c <__assert_func>
 8009794:	3101      	adds	r1, #1
 8009796:	005b      	lsls	r3, r3, #1
 8009798:	e7ee      	b.n	8009778 <__lshift+0x1c>
 800979a:	2300      	movs	r3, #0
 800979c:	f100 0114 	add.w	r1, r0, #20
 80097a0:	f100 0210 	add.w	r2, r0, #16
 80097a4:	4618      	mov	r0, r3
 80097a6:	4553      	cmp	r3, sl
 80097a8:	db33      	blt.n	8009812 <__lshift+0xb6>
 80097aa:	6920      	ldr	r0, [r4, #16]
 80097ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097b0:	f104 0314 	add.w	r3, r4, #20
 80097b4:	f019 091f 	ands.w	r9, r9, #31
 80097b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097c0:	d02b      	beq.n	800981a <__lshift+0xbe>
 80097c2:	f1c9 0e20 	rsb	lr, r9, #32
 80097c6:	468a      	mov	sl, r1
 80097c8:	2200      	movs	r2, #0
 80097ca:	6818      	ldr	r0, [r3, #0]
 80097cc:	fa00 f009 	lsl.w	r0, r0, r9
 80097d0:	4310      	orrs	r0, r2
 80097d2:	f84a 0b04 	str.w	r0, [sl], #4
 80097d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097da:	459c      	cmp	ip, r3
 80097dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80097e0:	d8f3      	bhi.n	80097ca <__lshift+0x6e>
 80097e2:	ebac 0304 	sub.w	r3, ip, r4
 80097e6:	3b15      	subs	r3, #21
 80097e8:	f023 0303 	bic.w	r3, r3, #3
 80097ec:	3304      	adds	r3, #4
 80097ee:	f104 0015 	add.w	r0, r4, #21
 80097f2:	4584      	cmp	ip, r0
 80097f4:	bf38      	it	cc
 80097f6:	2304      	movcc	r3, #4
 80097f8:	50ca      	str	r2, [r1, r3]
 80097fa:	b10a      	cbz	r2, 8009800 <__lshift+0xa4>
 80097fc:	f108 0602 	add.w	r6, r8, #2
 8009800:	3e01      	subs	r6, #1
 8009802:	4638      	mov	r0, r7
 8009804:	612e      	str	r6, [r5, #16]
 8009806:	4621      	mov	r1, r4
 8009808:	f7ff fd8e 	bl	8009328 <_Bfree>
 800980c:	4628      	mov	r0, r5
 800980e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009812:	f842 0f04 	str.w	r0, [r2, #4]!
 8009816:	3301      	adds	r3, #1
 8009818:	e7c5      	b.n	80097a6 <__lshift+0x4a>
 800981a:	3904      	subs	r1, #4
 800981c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009820:	f841 2f04 	str.w	r2, [r1, #4]!
 8009824:	459c      	cmp	ip, r3
 8009826:	d8f9      	bhi.n	800981c <__lshift+0xc0>
 8009828:	e7ea      	b.n	8009800 <__lshift+0xa4>
 800982a:	bf00      	nop
 800982c:	0800a745 	.word	0x0800a745
 8009830:	0800a7e2 	.word	0x0800a7e2

08009834 <__mcmp>:
 8009834:	b530      	push	{r4, r5, lr}
 8009836:	6902      	ldr	r2, [r0, #16]
 8009838:	690c      	ldr	r4, [r1, #16]
 800983a:	1b12      	subs	r2, r2, r4
 800983c:	d10e      	bne.n	800985c <__mcmp+0x28>
 800983e:	f100 0314 	add.w	r3, r0, #20
 8009842:	3114      	adds	r1, #20
 8009844:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009848:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800984c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009850:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009854:	42a5      	cmp	r5, r4
 8009856:	d003      	beq.n	8009860 <__mcmp+0x2c>
 8009858:	d305      	bcc.n	8009866 <__mcmp+0x32>
 800985a:	2201      	movs	r2, #1
 800985c:	4610      	mov	r0, r2
 800985e:	bd30      	pop	{r4, r5, pc}
 8009860:	4283      	cmp	r3, r0
 8009862:	d3f3      	bcc.n	800984c <__mcmp+0x18>
 8009864:	e7fa      	b.n	800985c <__mcmp+0x28>
 8009866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800986a:	e7f7      	b.n	800985c <__mcmp+0x28>

0800986c <__mdiff>:
 800986c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009870:	460c      	mov	r4, r1
 8009872:	4606      	mov	r6, r0
 8009874:	4611      	mov	r1, r2
 8009876:	4620      	mov	r0, r4
 8009878:	4690      	mov	r8, r2
 800987a:	f7ff ffdb 	bl	8009834 <__mcmp>
 800987e:	1e05      	subs	r5, r0, #0
 8009880:	d110      	bne.n	80098a4 <__mdiff+0x38>
 8009882:	4629      	mov	r1, r5
 8009884:	4630      	mov	r0, r6
 8009886:	f7ff fd0f 	bl	80092a8 <_Balloc>
 800988a:	b930      	cbnz	r0, 800989a <__mdiff+0x2e>
 800988c:	4b3a      	ldr	r3, [pc, #232]	; (8009978 <__mdiff+0x10c>)
 800988e:	4602      	mov	r2, r0
 8009890:	f240 2137 	movw	r1, #567	; 0x237
 8009894:	4839      	ldr	r0, [pc, #228]	; (800997c <__mdiff+0x110>)
 8009896:	f000 fac9 	bl	8009e2c <__assert_func>
 800989a:	2301      	movs	r3, #1
 800989c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	bfa4      	itt	ge
 80098a6:	4643      	movge	r3, r8
 80098a8:	46a0      	movge	r8, r4
 80098aa:	4630      	mov	r0, r6
 80098ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098b0:	bfa6      	itte	ge
 80098b2:	461c      	movge	r4, r3
 80098b4:	2500      	movge	r5, #0
 80098b6:	2501      	movlt	r5, #1
 80098b8:	f7ff fcf6 	bl	80092a8 <_Balloc>
 80098bc:	b920      	cbnz	r0, 80098c8 <__mdiff+0x5c>
 80098be:	4b2e      	ldr	r3, [pc, #184]	; (8009978 <__mdiff+0x10c>)
 80098c0:	4602      	mov	r2, r0
 80098c2:	f240 2145 	movw	r1, #581	; 0x245
 80098c6:	e7e5      	b.n	8009894 <__mdiff+0x28>
 80098c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098cc:	6926      	ldr	r6, [r4, #16]
 80098ce:	60c5      	str	r5, [r0, #12]
 80098d0:	f104 0914 	add.w	r9, r4, #20
 80098d4:	f108 0514 	add.w	r5, r8, #20
 80098d8:	f100 0e14 	add.w	lr, r0, #20
 80098dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098e4:	f108 0210 	add.w	r2, r8, #16
 80098e8:	46f2      	mov	sl, lr
 80098ea:	2100      	movs	r1, #0
 80098ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80098f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098f4:	fa11 f88b 	uxtah	r8, r1, fp
 80098f8:	b299      	uxth	r1, r3
 80098fa:	0c1b      	lsrs	r3, r3, #16
 80098fc:	eba8 0801 	sub.w	r8, r8, r1
 8009900:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009904:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009908:	fa1f f888 	uxth.w	r8, r8
 800990c:	1419      	asrs	r1, r3, #16
 800990e:	454e      	cmp	r6, r9
 8009910:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009914:	f84a 3b04 	str.w	r3, [sl], #4
 8009918:	d8e8      	bhi.n	80098ec <__mdiff+0x80>
 800991a:	1b33      	subs	r3, r6, r4
 800991c:	3b15      	subs	r3, #21
 800991e:	f023 0303 	bic.w	r3, r3, #3
 8009922:	3304      	adds	r3, #4
 8009924:	3415      	adds	r4, #21
 8009926:	42a6      	cmp	r6, r4
 8009928:	bf38      	it	cc
 800992a:	2304      	movcc	r3, #4
 800992c:	441d      	add	r5, r3
 800992e:	4473      	add	r3, lr
 8009930:	469e      	mov	lr, r3
 8009932:	462e      	mov	r6, r5
 8009934:	4566      	cmp	r6, ip
 8009936:	d30e      	bcc.n	8009956 <__mdiff+0xea>
 8009938:	f10c 0203 	add.w	r2, ip, #3
 800993c:	1b52      	subs	r2, r2, r5
 800993e:	f022 0203 	bic.w	r2, r2, #3
 8009942:	3d03      	subs	r5, #3
 8009944:	45ac      	cmp	ip, r5
 8009946:	bf38      	it	cc
 8009948:	2200      	movcc	r2, #0
 800994a:	4413      	add	r3, r2
 800994c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009950:	b17a      	cbz	r2, 8009972 <__mdiff+0x106>
 8009952:	6107      	str	r7, [r0, #16]
 8009954:	e7a4      	b.n	80098a0 <__mdiff+0x34>
 8009956:	f856 8b04 	ldr.w	r8, [r6], #4
 800995a:	fa11 f288 	uxtah	r2, r1, r8
 800995e:	1414      	asrs	r4, r2, #16
 8009960:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009964:	b292      	uxth	r2, r2
 8009966:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800996a:	f84e 2b04 	str.w	r2, [lr], #4
 800996e:	1421      	asrs	r1, r4, #16
 8009970:	e7e0      	b.n	8009934 <__mdiff+0xc8>
 8009972:	3f01      	subs	r7, #1
 8009974:	e7ea      	b.n	800994c <__mdiff+0xe0>
 8009976:	bf00      	nop
 8009978:	0800a745 	.word	0x0800a745
 800997c:	0800a7e2 	.word	0x0800a7e2

08009980 <__ulp>:
 8009980:	b082      	sub	sp, #8
 8009982:	ed8d 0b00 	vstr	d0, [sp]
 8009986:	9a01      	ldr	r2, [sp, #4]
 8009988:	4b0f      	ldr	r3, [pc, #60]	; (80099c8 <__ulp+0x48>)
 800998a:	4013      	ands	r3, r2
 800998c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009990:	2b00      	cmp	r3, #0
 8009992:	dc08      	bgt.n	80099a6 <__ulp+0x26>
 8009994:	425b      	negs	r3, r3
 8009996:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800999a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800999e:	da04      	bge.n	80099aa <__ulp+0x2a>
 80099a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099a4:	4113      	asrs	r3, r2
 80099a6:	2200      	movs	r2, #0
 80099a8:	e008      	b.n	80099bc <__ulp+0x3c>
 80099aa:	f1a2 0314 	sub.w	r3, r2, #20
 80099ae:	2b1e      	cmp	r3, #30
 80099b0:	bfda      	itte	le
 80099b2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80099b6:	40da      	lsrle	r2, r3
 80099b8:	2201      	movgt	r2, #1
 80099ba:	2300      	movs	r3, #0
 80099bc:	4619      	mov	r1, r3
 80099be:	4610      	mov	r0, r2
 80099c0:	ec41 0b10 	vmov	d0, r0, r1
 80099c4:	b002      	add	sp, #8
 80099c6:	4770      	bx	lr
 80099c8:	7ff00000 	.word	0x7ff00000

080099cc <__b2d>:
 80099cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d0:	6906      	ldr	r6, [r0, #16]
 80099d2:	f100 0814 	add.w	r8, r0, #20
 80099d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80099da:	1f37      	subs	r7, r6, #4
 80099dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80099e0:	4610      	mov	r0, r2
 80099e2:	f7ff fd53 	bl	800948c <__hi0bits>
 80099e6:	f1c0 0320 	rsb	r3, r0, #32
 80099ea:	280a      	cmp	r0, #10
 80099ec:	600b      	str	r3, [r1, #0]
 80099ee:	491b      	ldr	r1, [pc, #108]	; (8009a5c <__b2d+0x90>)
 80099f0:	dc15      	bgt.n	8009a1e <__b2d+0x52>
 80099f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80099f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80099fa:	45b8      	cmp	r8, r7
 80099fc:	ea43 0501 	orr.w	r5, r3, r1
 8009a00:	bf34      	ite	cc
 8009a02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a06:	2300      	movcs	r3, #0
 8009a08:	3015      	adds	r0, #21
 8009a0a:	fa02 f000 	lsl.w	r0, r2, r0
 8009a0e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009a12:	4303      	orrs	r3, r0
 8009a14:	461c      	mov	r4, r3
 8009a16:	ec45 4b10 	vmov	d0, r4, r5
 8009a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a1e:	45b8      	cmp	r8, r7
 8009a20:	bf3a      	itte	cc
 8009a22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a26:	f1a6 0708 	subcc.w	r7, r6, #8
 8009a2a:	2300      	movcs	r3, #0
 8009a2c:	380b      	subs	r0, #11
 8009a2e:	d012      	beq.n	8009a56 <__b2d+0x8a>
 8009a30:	f1c0 0120 	rsb	r1, r0, #32
 8009a34:	fa23 f401 	lsr.w	r4, r3, r1
 8009a38:	4082      	lsls	r2, r0
 8009a3a:	4322      	orrs	r2, r4
 8009a3c:	4547      	cmp	r7, r8
 8009a3e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009a42:	bf8c      	ite	hi
 8009a44:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009a48:	2200      	movls	r2, #0
 8009a4a:	4083      	lsls	r3, r0
 8009a4c:	40ca      	lsrs	r2, r1
 8009a4e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009a52:	4313      	orrs	r3, r2
 8009a54:	e7de      	b.n	8009a14 <__b2d+0x48>
 8009a56:	ea42 0501 	orr.w	r5, r2, r1
 8009a5a:	e7db      	b.n	8009a14 <__b2d+0x48>
 8009a5c:	3ff00000 	.word	0x3ff00000

08009a60 <__d2b>:
 8009a60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a64:	460f      	mov	r7, r1
 8009a66:	2101      	movs	r1, #1
 8009a68:	ec59 8b10 	vmov	r8, r9, d0
 8009a6c:	4616      	mov	r6, r2
 8009a6e:	f7ff fc1b 	bl	80092a8 <_Balloc>
 8009a72:	4604      	mov	r4, r0
 8009a74:	b930      	cbnz	r0, 8009a84 <__d2b+0x24>
 8009a76:	4602      	mov	r2, r0
 8009a78:	4b24      	ldr	r3, [pc, #144]	; (8009b0c <__d2b+0xac>)
 8009a7a:	4825      	ldr	r0, [pc, #148]	; (8009b10 <__d2b+0xb0>)
 8009a7c:	f240 310f 	movw	r1, #783	; 0x30f
 8009a80:	f000 f9d4 	bl	8009e2c <__assert_func>
 8009a84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a8c:	bb2d      	cbnz	r5, 8009ada <__d2b+0x7a>
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	f1b8 0300 	subs.w	r3, r8, #0
 8009a94:	d026      	beq.n	8009ae4 <__d2b+0x84>
 8009a96:	4668      	mov	r0, sp
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	f7ff fd17 	bl	80094cc <__lo0bits>
 8009a9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009aa2:	b1e8      	cbz	r0, 8009ae0 <__d2b+0x80>
 8009aa4:	f1c0 0320 	rsb	r3, r0, #32
 8009aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aac:	430b      	orrs	r3, r1
 8009aae:	40c2      	lsrs	r2, r0
 8009ab0:	6163      	str	r3, [r4, #20]
 8009ab2:	9201      	str	r2, [sp, #4]
 8009ab4:	9b01      	ldr	r3, [sp, #4]
 8009ab6:	61a3      	str	r3, [r4, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	bf14      	ite	ne
 8009abc:	2202      	movne	r2, #2
 8009abe:	2201      	moveq	r2, #1
 8009ac0:	6122      	str	r2, [r4, #16]
 8009ac2:	b1bd      	cbz	r5, 8009af4 <__d2b+0x94>
 8009ac4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ac8:	4405      	add	r5, r0
 8009aca:	603d      	str	r5, [r7, #0]
 8009acc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ad0:	6030      	str	r0, [r6, #0]
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	b003      	add	sp, #12
 8009ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ade:	e7d6      	b.n	8009a8e <__d2b+0x2e>
 8009ae0:	6161      	str	r1, [r4, #20]
 8009ae2:	e7e7      	b.n	8009ab4 <__d2b+0x54>
 8009ae4:	a801      	add	r0, sp, #4
 8009ae6:	f7ff fcf1 	bl	80094cc <__lo0bits>
 8009aea:	9b01      	ldr	r3, [sp, #4]
 8009aec:	6163      	str	r3, [r4, #20]
 8009aee:	3020      	adds	r0, #32
 8009af0:	2201      	movs	r2, #1
 8009af2:	e7e5      	b.n	8009ac0 <__d2b+0x60>
 8009af4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009af8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009afc:	6038      	str	r0, [r7, #0]
 8009afe:	6918      	ldr	r0, [r3, #16]
 8009b00:	f7ff fcc4 	bl	800948c <__hi0bits>
 8009b04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b08:	e7e2      	b.n	8009ad0 <__d2b+0x70>
 8009b0a:	bf00      	nop
 8009b0c:	0800a745 	.word	0x0800a745
 8009b10:	0800a7e2 	.word	0x0800a7e2

08009b14 <__ratio>:
 8009b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b18:	4688      	mov	r8, r1
 8009b1a:	4669      	mov	r1, sp
 8009b1c:	4681      	mov	r9, r0
 8009b1e:	f7ff ff55 	bl	80099cc <__b2d>
 8009b22:	a901      	add	r1, sp, #4
 8009b24:	4640      	mov	r0, r8
 8009b26:	ec55 4b10 	vmov	r4, r5, d0
 8009b2a:	f7ff ff4f 	bl	80099cc <__b2d>
 8009b2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b32:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b36:	eba3 0c02 	sub.w	ip, r3, r2
 8009b3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b3e:	1a9b      	subs	r3, r3, r2
 8009b40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b44:	ec51 0b10 	vmov	r0, r1, d0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	bfd6      	itet	le
 8009b4c:	460a      	movle	r2, r1
 8009b4e:	462a      	movgt	r2, r5
 8009b50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b54:	468b      	mov	fp, r1
 8009b56:	462f      	mov	r7, r5
 8009b58:	bfd4      	ite	le
 8009b5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b62:	4620      	mov	r0, r4
 8009b64:	ee10 2a10 	vmov	r2, s0
 8009b68:	465b      	mov	r3, fp
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	f7f6 fe6e 	bl	800084c <__aeabi_ddiv>
 8009b70:	ec41 0b10 	vmov	d0, r0, r1
 8009b74:	b003      	add	sp, #12
 8009b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b7a <__copybits>:
 8009b7a:	3901      	subs	r1, #1
 8009b7c:	b570      	push	{r4, r5, r6, lr}
 8009b7e:	1149      	asrs	r1, r1, #5
 8009b80:	6914      	ldr	r4, [r2, #16]
 8009b82:	3101      	adds	r1, #1
 8009b84:	f102 0314 	add.w	r3, r2, #20
 8009b88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b90:	1f05      	subs	r5, r0, #4
 8009b92:	42a3      	cmp	r3, r4
 8009b94:	d30c      	bcc.n	8009bb0 <__copybits+0x36>
 8009b96:	1aa3      	subs	r3, r4, r2
 8009b98:	3b11      	subs	r3, #17
 8009b9a:	f023 0303 	bic.w	r3, r3, #3
 8009b9e:	3211      	adds	r2, #17
 8009ba0:	42a2      	cmp	r2, r4
 8009ba2:	bf88      	it	hi
 8009ba4:	2300      	movhi	r3, #0
 8009ba6:	4418      	add	r0, r3
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4288      	cmp	r0, r1
 8009bac:	d305      	bcc.n	8009bba <__copybits+0x40>
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bb4:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bb8:	e7eb      	b.n	8009b92 <__copybits+0x18>
 8009bba:	f840 3b04 	str.w	r3, [r0], #4
 8009bbe:	e7f4      	b.n	8009baa <__copybits+0x30>

08009bc0 <__any_on>:
 8009bc0:	f100 0214 	add.w	r2, r0, #20
 8009bc4:	6900      	ldr	r0, [r0, #16]
 8009bc6:	114b      	asrs	r3, r1, #5
 8009bc8:	4298      	cmp	r0, r3
 8009bca:	b510      	push	{r4, lr}
 8009bcc:	db11      	blt.n	8009bf2 <__any_on+0x32>
 8009bce:	dd0a      	ble.n	8009be6 <__any_on+0x26>
 8009bd0:	f011 011f 	ands.w	r1, r1, #31
 8009bd4:	d007      	beq.n	8009be6 <__any_on+0x26>
 8009bd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009bda:	fa24 f001 	lsr.w	r0, r4, r1
 8009bde:	fa00 f101 	lsl.w	r1, r0, r1
 8009be2:	428c      	cmp	r4, r1
 8009be4:	d10b      	bne.n	8009bfe <__any_on+0x3e>
 8009be6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d803      	bhi.n	8009bf6 <__any_on+0x36>
 8009bee:	2000      	movs	r0, #0
 8009bf0:	bd10      	pop	{r4, pc}
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	e7f7      	b.n	8009be6 <__any_on+0x26>
 8009bf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	d0f5      	beq.n	8009bea <__any_on+0x2a>
 8009bfe:	2001      	movs	r0, #1
 8009c00:	e7f6      	b.n	8009bf0 <__any_on+0x30>

08009c02 <__submore>:
 8009c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c06:	460c      	mov	r4, r1
 8009c08:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009c0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c0e:	4299      	cmp	r1, r3
 8009c10:	d11d      	bne.n	8009c4e <__submore+0x4c>
 8009c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009c16:	f7ff f873 	bl	8008d00 <_malloc_r>
 8009c1a:	b918      	cbnz	r0, 8009c24 <__submore+0x22>
 8009c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c28:	63a3      	str	r3, [r4, #56]	; 0x38
 8009c2a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009c2e:	6360      	str	r0, [r4, #52]	; 0x34
 8009c30:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009c34:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009c38:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009c3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009c40:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009c44:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009c48:	6020      	str	r0, [r4, #0]
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	e7e8      	b.n	8009c20 <__submore+0x1e>
 8009c4e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009c50:	0077      	lsls	r7, r6, #1
 8009c52:	463a      	mov	r2, r7
 8009c54:	f000 f80f 	bl	8009c76 <_realloc_r>
 8009c58:	4605      	mov	r5, r0
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d0de      	beq.n	8009c1c <__submore+0x1a>
 8009c5e:	eb00 0806 	add.w	r8, r0, r6
 8009c62:	4601      	mov	r1, r0
 8009c64:	4632      	mov	r2, r6
 8009c66:	4640      	mov	r0, r8
 8009c68:	f7fd faba 	bl	80071e0 <memcpy>
 8009c6c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009c70:	f8c4 8000 	str.w	r8, [r4]
 8009c74:	e7e9      	b.n	8009c4a <__submore+0x48>

08009c76 <_realloc_r>:
 8009c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c7a:	4680      	mov	r8, r0
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	460e      	mov	r6, r1
 8009c80:	b921      	cbnz	r1, 8009c8c <_realloc_r+0x16>
 8009c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c86:	4611      	mov	r1, r2
 8009c88:	f7ff b83a 	b.w	8008d00 <_malloc_r>
 8009c8c:	b92a      	cbnz	r2, 8009c9a <_realloc_r+0x24>
 8009c8e:	f7fe f941 	bl	8007f14 <_free_r>
 8009c92:	4625      	mov	r5, r4
 8009c94:	4628      	mov	r0, r5
 8009c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c9a:	f000 f8fb 	bl	8009e94 <_malloc_usable_size_r>
 8009c9e:	4284      	cmp	r4, r0
 8009ca0:	4607      	mov	r7, r0
 8009ca2:	d802      	bhi.n	8009caa <_realloc_r+0x34>
 8009ca4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ca8:	d812      	bhi.n	8009cd0 <_realloc_r+0x5a>
 8009caa:	4621      	mov	r1, r4
 8009cac:	4640      	mov	r0, r8
 8009cae:	f7ff f827 	bl	8008d00 <_malloc_r>
 8009cb2:	4605      	mov	r5, r0
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d0ed      	beq.n	8009c94 <_realloc_r+0x1e>
 8009cb8:	42bc      	cmp	r4, r7
 8009cba:	4622      	mov	r2, r4
 8009cbc:	4631      	mov	r1, r6
 8009cbe:	bf28      	it	cs
 8009cc0:	463a      	movcs	r2, r7
 8009cc2:	f7fd fa8d 	bl	80071e0 <memcpy>
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4640      	mov	r0, r8
 8009cca:	f7fe f923 	bl	8007f14 <_free_r>
 8009cce:	e7e1      	b.n	8009c94 <_realloc_r+0x1e>
 8009cd0:	4635      	mov	r5, r6
 8009cd2:	e7df      	b.n	8009c94 <_realloc_r+0x1e>

08009cd4 <_strtoul_l.constprop.0>:
 8009cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cd8:	4f36      	ldr	r7, [pc, #216]	; (8009db4 <_strtoul_l.constprop.0+0xe0>)
 8009cda:	4686      	mov	lr, r0
 8009cdc:	460d      	mov	r5, r1
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ce4:	5d3e      	ldrb	r6, [r7, r4]
 8009ce6:	f016 0608 	ands.w	r6, r6, #8
 8009cea:	d1f8      	bne.n	8009cde <_strtoul_l.constprop.0+0xa>
 8009cec:	2c2d      	cmp	r4, #45	; 0x2d
 8009cee:	d130      	bne.n	8009d52 <_strtoul_l.constprop.0+0x7e>
 8009cf0:	782c      	ldrb	r4, [r5, #0]
 8009cf2:	2601      	movs	r6, #1
 8009cf4:	1c85      	adds	r5, r0, #2
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d057      	beq.n	8009daa <_strtoul_l.constprop.0+0xd6>
 8009cfa:	2b10      	cmp	r3, #16
 8009cfc:	d109      	bne.n	8009d12 <_strtoul_l.constprop.0+0x3e>
 8009cfe:	2c30      	cmp	r4, #48	; 0x30
 8009d00:	d107      	bne.n	8009d12 <_strtoul_l.constprop.0+0x3e>
 8009d02:	7828      	ldrb	r0, [r5, #0]
 8009d04:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009d08:	2858      	cmp	r0, #88	; 0x58
 8009d0a:	d149      	bne.n	8009da0 <_strtoul_l.constprop.0+0xcc>
 8009d0c:	786c      	ldrb	r4, [r5, #1]
 8009d0e:	2310      	movs	r3, #16
 8009d10:	3502      	adds	r5, #2
 8009d12:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009d16:	2700      	movs	r7, #0
 8009d18:	fbb8 f8f3 	udiv	r8, r8, r3
 8009d1c:	fb03 f908 	mul.w	r9, r3, r8
 8009d20:	ea6f 0909 	mvn.w	r9, r9
 8009d24:	4638      	mov	r0, r7
 8009d26:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009d2a:	f1bc 0f09 	cmp.w	ip, #9
 8009d2e:	d815      	bhi.n	8009d5c <_strtoul_l.constprop.0+0x88>
 8009d30:	4664      	mov	r4, ip
 8009d32:	42a3      	cmp	r3, r4
 8009d34:	dd23      	ble.n	8009d7e <_strtoul_l.constprop.0+0xaa>
 8009d36:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8009d3a:	d007      	beq.n	8009d4c <_strtoul_l.constprop.0+0x78>
 8009d3c:	4580      	cmp	r8, r0
 8009d3e:	d31b      	bcc.n	8009d78 <_strtoul_l.constprop.0+0xa4>
 8009d40:	d101      	bne.n	8009d46 <_strtoul_l.constprop.0+0x72>
 8009d42:	45a1      	cmp	r9, r4
 8009d44:	db18      	blt.n	8009d78 <_strtoul_l.constprop.0+0xa4>
 8009d46:	fb00 4003 	mla	r0, r0, r3, r4
 8009d4a:	2701      	movs	r7, #1
 8009d4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d50:	e7e9      	b.n	8009d26 <_strtoul_l.constprop.0+0x52>
 8009d52:	2c2b      	cmp	r4, #43	; 0x2b
 8009d54:	bf04      	itt	eq
 8009d56:	782c      	ldrbeq	r4, [r5, #0]
 8009d58:	1c85      	addeq	r5, r0, #2
 8009d5a:	e7cc      	b.n	8009cf6 <_strtoul_l.constprop.0+0x22>
 8009d5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009d60:	f1bc 0f19 	cmp.w	ip, #25
 8009d64:	d801      	bhi.n	8009d6a <_strtoul_l.constprop.0+0x96>
 8009d66:	3c37      	subs	r4, #55	; 0x37
 8009d68:	e7e3      	b.n	8009d32 <_strtoul_l.constprop.0+0x5e>
 8009d6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009d6e:	f1bc 0f19 	cmp.w	ip, #25
 8009d72:	d804      	bhi.n	8009d7e <_strtoul_l.constprop.0+0xaa>
 8009d74:	3c57      	subs	r4, #87	; 0x57
 8009d76:	e7dc      	b.n	8009d32 <_strtoul_l.constprop.0+0x5e>
 8009d78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009d7c:	e7e6      	b.n	8009d4c <_strtoul_l.constprop.0+0x78>
 8009d7e:	1c7b      	adds	r3, r7, #1
 8009d80:	d106      	bne.n	8009d90 <_strtoul_l.constprop.0+0xbc>
 8009d82:	2322      	movs	r3, #34	; 0x22
 8009d84:	f8ce 3000 	str.w	r3, [lr]
 8009d88:	4638      	mov	r0, r7
 8009d8a:	b932      	cbnz	r2, 8009d9a <_strtoul_l.constprop.0+0xc6>
 8009d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d90:	b106      	cbz	r6, 8009d94 <_strtoul_l.constprop.0+0xc0>
 8009d92:	4240      	negs	r0, r0
 8009d94:	2a00      	cmp	r2, #0
 8009d96:	d0f9      	beq.n	8009d8c <_strtoul_l.constprop.0+0xb8>
 8009d98:	b107      	cbz	r7, 8009d9c <_strtoul_l.constprop.0+0xc8>
 8009d9a:	1e69      	subs	r1, r5, #1
 8009d9c:	6011      	str	r1, [r2, #0]
 8009d9e:	e7f5      	b.n	8009d8c <_strtoul_l.constprop.0+0xb8>
 8009da0:	2430      	movs	r4, #48	; 0x30
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1b5      	bne.n	8009d12 <_strtoul_l.constprop.0+0x3e>
 8009da6:	2308      	movs	r3, #8
 8009da8:	e7b3      	b.n	8009d12 <_strtoul_l.constprop.0+0x3e>
 8009daa:	2c30      	cmp	r4, #48	; 0x30
 8009dac:	d0a9      	beq.n	8009d02 <_strtoul_l.constprop.0+0x2e>
 8009dae:	230a      	movs	r3, #10
 8009db0:	e7af      	b.n	8009d12 <_strtoul_l.constprop.0+0x3e>
 8009db2:	bf00      	nop
 8009db4:	0800a5c9 	.word	0x0800a5c9

08009db8 <_strtoul_r>:
 8009db8:	f7ff bf8c 	b.w	8009cd4 <_strtoul_l.constprop.0>

08009dbc <__ascii_wctomb>:
 8009dbc:	b149      	cbz	r1, 8009dd2 <__ascii_wctomb+0x16>
 8009dbe:	2aff      	cmp	r2, #255	; 0xff
 8009dc0:	bf85      	ittet	hi
 8009dc2:	238a      	movhi	r3, #138	; 0x8a
 8009dc4:	6003      	strhi	r3, [r0, #0]
 8009dc6:	700a      	strbls	r2, [r1, #0]
 8009dc8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009dcc:	bf98      	it	ls
 8009dce:	2001      	movls	r0, #1
 8009dd0:	4770      	bx	lr
 8009dd2:	4608      	mov	r0, r1
 8009dd4:	4770      	bx	lr

08009dd6 <memmove>:
 8009dd6:	4288      	cmp	r0, r1
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	eb01 0402 	add.w	r4, r1, r2
 8009dde:	d902      	bls.n	8009de6 <memmove+0x10>
 8009de0:	4284      	cmp	r4, r0
 8009de2:	4623      	mov	r3, r4
 8009de4:	d807      	bhi.n	8009df6 <memmove+0x20>
 8009de6:	1e43      	subs	r3, r0, #1
 8009de8:	42a1      	cmp	r1, r4
 8009dea:	d008      	beq.n	8009dfe <memmove+0x28>
 8009dec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009df0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009df4:	e7f8      	b.n	8009de8 <memmove+0x12>
 8009df6:	4402      	add	r2, r0
 8009df8:	4601      	mov	r1, r0
 8009dfa:	428a      	cmp	r2, r1
 8009dfc:	d100      	bne.n	8009e00 <memmove+0x2a>
 8009dfe:	bd10      	pop	{r4, pc}
 8009e00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e04:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e08:	e7f7      	b.n	8009dfa <memmove+0x24>
	...

08009e0c <_sbrk_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	4d06      	ldr	r5, [pc, #24]	; (8009e28 <_sbrk_r+0x1c>)
 8009e10:	2300      	movs	r3, #0
 8009e12:	4604      	mov	r4, r0
 8009e14:	4608      	mov	r0, r1
 8009e16:	602b      	str	r3, [r5, #0]
 8009e18:	f7f8 fa70 	bl	80022fc <_sbrk>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d102      	bne.n	8009e26 <_sbrk_r+0x1a>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	b103      	cbz	r3, 8009e26 <_sbrk_r+0x1a>
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	20000658 	.word	0x20000658

08009e2c <__assert_func>:
 8009e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e2e:	4614      	mov	r4, r2
 8009e30:	461a      	mov	r2, r3
 8009e32:	4b09      	ldr	r3, [pc, #36]	; (8009e58 <__assert_func+0x2c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4605      	mov	r5, r0
 8009e38:	68d8      	ldr	r0, [r3, #12]
 8009e3a:	b14c      	cbz	r4, 8009e50 <__assert_func+0x24>
 8009e3c:	4b07      	ldr	r3, [pc, #28]	; (8009e5c <__assert_func+0x30>)
 8009e3e:	9100      	str	r1, [sp, #0]
 8009e40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e44:	4906      	ldr	r1, [pc, #24]	; (8009e60 <__assert_func+0x34>)
 8009e46:	462b      	mov	r3, r5
 8009e48:	f000 f82c 	bl	8009ea4 <fiprintf>
 8009e4c:	f000 f83c 	bl	8009ec8 <abort>
 8009e50:	4b04      	ldr	r3, [pc, #16]	; (8009e64 <__assert_func+0x38>)
 8009e52:	461c      	mov	r4, r3
 8009e54:	e7f3      	b.n	8009e3e <__assert_func+0x12>
 8009e56:	bf00      	nop
 8009e58:	200001d0 	.word	0x200001d0
 8009e5c:	0800a93c 	.word	0x0800a93c
 8009e60:	0800a949 	.word	0x0800a949
 8009e64:	0800a977 	.word	0x0800a977

08009e68 <_calloc_r>:
 8009e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e6a:	fba1 2402 	umull	r2, r4, r1, r2
 8009e6e:	b94c      	cbnz	r4, 8009e84 <_calloc_r+0x1c>
 8009e70:	4611      	mov	r1, r2
 8009e72:	9201      	str	r2, [sp, #4]
 8009e74:	f7fe ff44 	bl	8008d00 <_malloc_r>
 8009e78:	9a01      	ldr	r2, [sp, #4]
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	b930      	cbnz	r0, 8009e8c <_calloc_r+0x24>
 8009e7e:	4628      	mov	r0, r5
 8009e80:	b003      	add	sp, #12
 8009e82:	bd30      	pop	{r4, r5, pc}
 8009e84:	220c      	movs	r2, #12
 8009e86:	6002      	str	r2, [r0, #0]
 8009e88:	2500      	movs	r5, #0
 8009e8a:	e7f8      	b.n	8009e7e <_calloc_r+0x16>
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	f7fd f929 	bl	80070e4 <memset>
 8009e92:	e7f4      	b.n	8009e7e <_calloc_r+0x16>

08009e94 <_malloc_usable_size_r>:
 8009e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e98:	1f18      	subs	r0, r3, #4
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	bfbc      	itt	lt
 8009e9e:	580b      	ldrlt	r3, [r1, r0]
 8009ea0:	18c0      	addlt	r0, r0, r3
 8009ea2:	4770      	bx	lr

08009ea4 <fiprintf>:
 8009ea4:	b40e      	push	{r1, r2, r3}
 8009ea6:	b503      	push	{r0, r1, lr}
 8009ea8:	4601      	mov	r1, r0
 8009eaa:	ab03      	add	r3, sp, #12
 8009eac:	4805      	ldr	r0, [pc, #20]	; (8009ec4 <fiprintf+0x20>)
 8009eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb2:	6800      	ldr	r0, [r0, #0]
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	f000 f837 	bl	8009f28 <_vfiprintf_r>
 8009eba:	b002      	add	sp, #8
 8009ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec0:	b003      	add	sp, #12
 8009ec2:	4770      	bx	lr
 8009ec4:	200001d0 	.word	0x200001d0

08009ec8 <abort>:
 8009ec8:	b508      	push	{r3, lr}
 8009eca:	2006      	movs	r0, #6
 8009ecc:	f000 fa88 	bl	800a3e0 <raise>
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	f7f8 f99b 	bl	800220c <_exit>

08009ed6 <__sfputc_r>:
 8009ed6:	6893      	ldr	r3, [r2, #8]
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	b410      	push	{r4}
 8009ede:	6093      	str	r3, [r2, #8]
 8009ee0:	da08      	bge.n	8009ef4 <__sfputc_r+0x1e>
 8009ee2:	6994      	ldr	r4, [r2, #24]
 8009ee4:	42a3      	cmp	r3, r4
 8009ee6:	db01      	blt.n	8009eec <__sfputc_r+0x16>
 8009ee8:	290a      	cmp	r1, #10
 8009eea:	d103      	bne.n	8009ef4 <__sfputc_r+0x1e>
 8009eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef0:	f000 b934 	b.w	800a15c <__swbuf_r>
 8009ef4:	6813      	ldr	r3, [r2, #0]
 8009ef6:	1c58      	adds	r0, r3, #1
 8009ef8:	6010      	str	r0, [r2, #0]
 8009efa:	7019      	strb	r1, [r3, #0]
 8009efc:	4608      	mov	r0, r1
 8009efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <__sfputs_r>:
 8009f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f06:	4606      	mov	r6, r0
 8009f08:	460f      	mov	r7, r1
 8009f0a:	4614      	mov	r4, r2
 8009f0c:	18d5      	adds	r5, r2, r3
 8009f0e:	42ac      	cmp	r4, r5
 8009f10:	d101      	bne.n	8009f16 <__sfputs_r+0x12>
 8009f12:	2000      	movs	r0, #0
 8009f14:	e007      	b.n	8009f26 <__sfputs_r+0x22>
 8009f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1a:	463a      	mov	r2, r7
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f7ff ffda 	bl	8009ed6 <__sfputc_r>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	d1f3      	bne.n	8009f0e <__sfputs_r+0xa>
 8009f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f28 <_vfiprintf_r>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	b09d      	sub	sp, #116	; 0x74
 8009f30:	4614      	mov	r4, r2
 8009f32:	4698      	mov	r8, r3
 8009f34:	4606      	mov	r6, r0
 8009f36:	b118      	cbz	r0, 8009f40 <_vfiprintf_r+0x18>
 8009f38:	6a03      	ldr	r3, [r0, #32]
 8009f3a:	b90b      	cbnz	r3, 8009f40 <_vfiprintf_r+0x18>
 8009f3c:	f7fc f9f4 	bl	8006328 <__sinit>
 8009f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f42:	07d9      	lsls	r1, r3, #31
 8009f44:	d405      	bmi.n	8009f52 <_vfiprintf_r+0x2a>
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	059a      	lsls	r2, r3, #22
 8009f4a:	d402      	bmi.n	8009f52 <_vfiprintf_r+0x2a>
 8009f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f4e:	f7fd f945 	bl	80071dc <__retarget_lock_acquire_recursive>
 8009f52:	89ab      	ldrh	r3, [r5, #12]
 8009f54:	071b      	lsls	r3, r3, #28
 8009f56:	d501      	bpl.n	8009f5c <_vfiprintf_r+0x34>
 8009f58:	692b      	ldr	r3, [r5, #16]
 8009f5a:	b99b      	cbnz	r3, 8009f84 <_vfiprintf_r+0x5c>
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f000 f93a 	bl	800a1d8 <__swsetup_r>
 8009f64:	b170      	cbz	r0, 8009f84 <_vfiprintf_r+0x5c>
 8009f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f68:	07dc      	lsls	r4, r3, #31
 8009f6a:	d504      	bpl.n	8009f76 <_vfiprintf_r+0x4e>
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f70:	b01d      	add	sp, #116	; 0x74
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	89ab      	ldrh	r3, [r5, #12]
 8009f78:	0598      	lsls	r0, r3, #22
 8009f7a:	d4f7      	bmi.n	8009f6c <_vfiprintf_r+0x44>
 8009f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f7e:	f7fd f92e 	bl	80071de <__retarget_lock_release_recursive>
 8009f82:	e7f3      	b.n	8009f6c <_vfiprintf_r+0x44>
 8009f84:	2300      	movs	r3, #0
 8009f86:	9309      	str	r3, [sp, #36]	; 0x24
 8009f88:	2320      	movs	r3, #32
 8009f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f92:	2330      	movs	r3, #48	; 0x30
 8009f94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a148 <_vfiprintf_r+0x220>
 8009f98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f9c:	f04f 0901 	mov.w	r9, #1
 8009fa0:	4623      	mov	r3, r4
 8009fa2:	469a      	mov	sl, r3
 8009fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fa8:	b10a      	cbz	r2, 8009fae <_vfiprintf_r+0x86>
 8009faa:	2a25      	cmp	r2, #37	; 0x25
 8009fac:	d1f9      	bne.n	8009fa2 <_vfiprintf_r+0x7a>
 8009fae:	ebba 0b04 	subs.w	fp, sl, r4
 8009fb2:	d00b      	beq.n	8009fcc <_vfiprintf_r+0xa4>
 8009fb4:	465b      	mov	r3, fp
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7ff ffa2 	bl	8009f04 <__sfputs_r>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f000 80a9 	beq.w	800a118 <_vfiprintf_r+0x1f0>
 8009fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fc8:	445a      	add	r2, fp
 8009fca:	9209      	str	r2, [sp, #36]	; 0x24
 8009fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 80a1 	beq.w	800a118 <_vfiprintf_r+0x1f0>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fe0:	f10a 0a01 	add.w	sl, sl, #1
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	9307      	str	r3, [sp, #28]
 8009fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fec:	931a      	str	r3, [sp, #104]	; 0x68
 8009fee:	4654      	mov	r4, sl
 8009ff0:	2205      	movs	r2, #5
 8009ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff6:	4854      	ldr	r0, [pc, #336]	; (800a148 <_vfiprintf_r+0x220>)
 8009ff8:	f7f6 f8ea 	bl	80001d0 <memchr>
 8009ffc:	9a04      	ldr	r2, [sp, #16]
 8009ffe:	b9d8      	cbnz	r0, 800a038 <_vfiprintf_r+0x110>
 800a000:	06d1      	lsls	r1, r2, #27
 800a002:	bf44      	itt	mi
 800a004:	2320      	movmi	r3, #32
 800a006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a00a:	0713      	lsls	r3, r2, #28
 800a00c:	bf44      	itt	mi
 800a00e:	232b      	movmi	r3, #43	; 0x2b
 800a010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a014:	f89a 3000 	ldrb.w	r3, [sl]
 800a018:	2b2a      	cmp	r3, #42	; 0x2a
 800a01a:	d015      	beq.n	800a048 <_vfiprintf_r+0x120>
 800a01c:	9a07      	ldr	r2, [sp, #28]
 800a01e:	4654      	mov	r4, sl
 800a020:	2000      	movs	r0, #0
 800a022:	f04f 0c0a 	mov.w	ip, #10
 800a026:	4621      	mov	r1, r4
 800a028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a02c:	3b30      	subs	r3, #48	; 0x30
 800a02e:	2b09      	cmp	r3, #9
 800a030:	d94d      	bls.n	800a0ce <_vfiprintf_r+0x1a6>
 800a032:	b1b0      	cbz	r0, 800a062 <_vfiprintf_r+0x13a>
 800a034:	9207      	str	r2, [sp, #28]
 800a036:	e014      	b.n	800a062 <_vfiprintf_r+0x13a>
 800a038:	eba0 0308 	sub.w	r3, r0, r8
 800a03c:	fa09 f303 	lsl.w	r3, r9, r3
 800a040:	4313      	orrs	r3, r2
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	46a2      	mov	sl, r4
 800a046:	e7d2      	b.n	8009fee <_vfiprintf_r+0xc6>
 800a048:	9b03      	ldr	r3, [sp, #12]
 800a04a:	1d19      	adds	r1, r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	9103      	str	r1, [sp, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	bfbb      	ittet	lt
 800a054:	425b      	neglt	r3, r3
 800a056:	f042 0202 	orrlt.w	r2, r2, #2
 800a05a:	9307      	strge	r3, [sp, #28]
 800a05c:	9307      	strlt	r3, [sp, #28]
 800a05e:	bfb8      	it	lt
 800a060:	9204      	strlt	r2, [sp, #16]
 800a062:	7823      	ldrb	r3, [r4, #0]
 800a064:	2b2e      	cmp	r3, #46	; 0x2e
 800a066:	d10c      	bne.n	800a082 <_vfiprintf_r+0x15a>
 800a068:	7863      	ldrb	r3, [r4, #1]
 800a06a:	2b2a      	cmp	r3, #42	; 0x2a
 800a06c:	d134      	bne.n	800a0d8 <_vfiprintf_r+0x1b0>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	1d1a      	adds	r2, r3, #4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	9203      	str	r2, [sp, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	bfb8      	it	lt
 800a07a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a07e:	3402      	adds	r4, #2
 800a080:	9305      	str	r3, [sp, #20]
 800a082:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a158 <_vfiprintf_r+0x230>
 800a086:	7821      	ldrb	r1, [r4, #0]
 800a088:	2203      	movs	r2, #3
 800a08a:	4650      	mov	r0, sl
 800a08c:	f7f6 f8a0 	bl	80001d0 <memchr>
 800a090:	b138      	cbz	r0, 800a0a2 <_vfiprintf_r+0x17a>
 800a092:	9b04      	ldr	r3, [sp, #16]
 800a094:	eba0 000a 	sub.w	r0, r0, sl
 800a098:	2240      	movs	r2, #64	; 0x40
 800a09a:	4082      	lsls	r2, r0
 800a09c:	4313      	orrs	r3, r2
 800a09e:	3401      	adds	r4, #1
 800a0a0:	9304      	str	r3, [sp, #16]
 800a0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a6:	4829      	ldr	r0, [pc, #164]	; (800a14c <_vfiprintf_r+0x224>)
 800a0a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0ac:	2206      	movs	r2, #6
 800a0ae:	f7f6 f88f 	bl	80001d0 <memchr>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d03f      	beq.n	800a136 <_vfiprintf_r+0x20e>
 800a0b6:	4b26      	ldr	r3, [pc, #152]	; (800a150 <_vfiprintf_r+0x228>)
 800a0b8:	bb1b      	cbnz	r3, 800a102 <_vfiprintf_r+0x1da>
 800a0ba:	9b03      	ldr	r3, [sp, #12]
 800a0bc:	3307      	adds	r3, #7
 800a0be:	f023 0307 	bic.w	r3, r3, #7
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	9303      	str	r3, [sp, #12]
 800a0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c8:	443b      	add	r3, r7
 800a0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a0cc:	e768      	b.n	8009fa0 <_vfiprintf_r+0x78>
 800a0ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	e7a6      	b.n	800a026 <_vfiprintf_r+0xfe>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	3401      	adds	r4, #1
 800a0dc:	9305      	str	r3, [sp, #20]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	f04f 0c0a 	mov.w	ip, #10
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ea:	3a30      	subs	r2, #48	; 0x30
 800a0ec:	2a09      	cmp	r2, #9
 800a0ee:	d903      	bls.n	800a0f8 <_vfiprintf_r+0x1d0>
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d0c6      	beq.n	800a082 <_vfiprintf_r+0x15a>
 800a0f4:	9105      	str	r1, [sp, #20]
 800a0f6:	e7c4      	b.n	800a082 <_vfiprintf_r+0x15a>
 800a0f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	2301      	movs	r3, #1
 800a100:	e7f0      	b.n	800a0e4 <_vfiprintf_r+0x1bc>
 800a102:	ab03      	add	r3, sp, #12
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	462a      	mov	r2, r5
 800a108:	4b12      	ldr	r3, [pc, #72]	; (800a154 <_vfiprintf_r+0x22c>)
 800a10a:	a904      	add	r1, sp, #16
 800a10c:	4630      	mov	r0, r6
 800a10e:	f7fb fa29 	bl	8005564 <_printf_float>
 800a112:	4607      	mov	r7, r0
 800a114:	1c78      	adds	r0, r7, #1
 800a116:	d1d6      	bne.n	800a0c6 <_vfiprintf_r+0x19e>
 800a118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a11a:	07d9      	lsls	r1, r3, #31
 800a11c:	d405      	bmi.n	800a12a <_vfiprintf_r+0x202>
 800a11e:	89ab      	ldrh	r3, [r5, #12]
 800a120:	059a      	lsls	r2, r3, #22
 800a122:	d402      	bmi.n	800a12a <_vfiprintf_r+0x202>
 800a124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a126:	f7fd f85a 	bl	80071de <__retarget_lock_release_recursive>
 800a12a:	89ab      	ldrh	r3, [r5, #12]
 800a12c:	065b      	lsls	r3, r3, #25
 800a12e:	f53f af1d 	bmi.w	8009f6c <_vfiprintf_r+0x44>
 800a132:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a134:	e71c      	b.n	8009f70 <_vfiprintf_r+0x48>
 800a136:	ab03      	add	r3, sp, #12
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	462a      	mov	r2, r5
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <_vfiprintf_r+0x22c>)
 800a13e:	a904      	add	r1, sp, #16
 800a140:	4630      	mov	r0, r6
 800a142:	f7fb fcb3 	bl	8005aac <_printf_i>
 800a146:	e7e4      	b.n	800a112 <_vfiprintf_r+0x1ea>
 800a148:	0800a7b6 	.word	0x0800a7b6
 800a14c:	0800a7c0 	.word	0x0800a7c0
 800a150:	08005565 	.word	0x08005565
 800a154:	08009f05 	.word	0x08009f05
 800a158:	0800a7bc 	.word	0x0800a7bc

0800a15c <__swbuf_r>:
 800a15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15e:	460e      	mov	r6, r1
 800a160:	4614      	mov	r4, r2
 800a162:	4605      	mov	r5, r0
 800a164:	b118      	cbz	r0, 800a16e <__swbuf_r+0x12>
 800a166:	6a03      	ldr	r3, [r0, #32]
 800a168:	b90b      	cbnz	r3, 800a16e <__swbuf_r+0x12>
 800a16a:	f7fc f8dd 	bl	8006328 <__sinit>
 800a16e:	69a3      	ldr	r3, [r4, #24]
 800a170:	60a3      	str	r3, [r4, #8]
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	071a      	lsls	r2, r3, #28
 800a176:	d525      	bpl.n	800a1c4 <__swbuf_r+0x68>
 800a178:	6923      	ldr	r3, [r4, #16]
 800a17a:	b31b      	cbz	r3, 800a1c4 <__swbuf_r+0x68>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	6922      	ldr	r2, [r4, #16]
 800a180:	1a98      	subs	r0, r3, r2
 800a182:	6963      	ldr	r3, [r4, #20]
 800a184:	b2f6      	uxtb	r6, r6
 800a186:	4283      	cmp	r3, r0
 800a188:	4637      	mov	r7, r6
 800a18a:	dc04      	bgt.n	800a196 <__swbuf_r+0x3a>
 800a18c:	4621      	mov	r1, r4
 800a18e:	4628      	mov	r0, r5
 800a190:	f7ff f856 	bl	8009240 <_fflush_r>
 800a194:	b9e0      	cbnz	r0, 800a1d0 <__swbuf_r+0x74>
 800a196:	68a3      	ldr	r3, [r4, #8]
 800a198:	3b01      	subs	r3, #1
 800a19a:	60a3      	str	r3, [r4, #8]
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	6022      	str	r2, [r4, #0]
 800a1a2:	701e      	strb	r6, [r3, #0]
 800a1a4:	6962      	ldr	r2, [r4, #20]
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d004      	beq.n	800a1b6 <__swbuf_r+0x5a>
 800a1ac:	89a3      	ldrh	r3, [r4, #12]
 800a1ae:	07db      	lsls	r3, r3, #31
 800a1b0:	d506      	bpl.n	800a1c0 <__swbuf_r+0x64>
 800a1b2:	2e0a      	cmp	r6, #10
 800a1b4:	d104      	bne.n	800a1c0 <__swbuf_r+0x64>
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	f7ff f841 	bl	8009240 <_fflush_r>
 800a1be:	b938      	cbnz	r0, 800a1d0 <__swbuf_r+0x74>
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	f000 f806 	bl	800a1d8 <__swsetup_r>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d0d5      	beq.n	800a17c <__swbuf_r+0x20>
 800a1d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a1d4:	e7f4      	b.n	800a1c0 <__swbuf_r+0x64>
	...

0800a1d8 <__swsetup_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4b2a      	ldr	r3, [pc, #168]	; (800a284 <__swsetup_r+0xac>)
 800a1dc:	4605      	mov	r5, r0
 800a1de:	6818      	ldr	r0, [r3, #0]
 800a1e0:	460c      	mov	r4, r1
 800a1e2:	b118      	cbz	r0, 800a1ec <__swsetup_r+0x14>
 800a1e4:	6a03      	ldr	r3, [r0, #32]
 800a1e6:	b90b      	cbnz	r3, 800a1ec <__swsetup_r+0x14>
 800a1e8:	f7fc f89e 	bl	8006328 <__sinit>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1f2:	0718      	lsls	r0, r3, #28
 800a1f4:	d422      	bmi.n	800a23c <__swsetup_r+0x64>
 800a1f6:	06d9      	lsls	r1, r3, #27
 800a1f8:	d407      	bmi.n	800a20a <__swsetup_r+0x32>
 800a1fa:	2309      	movs	r3, #9
 800a1fc:	602b      	str	r3, [r5, #0]
 800a1fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a202:	81a3      	strh	r3, [r4, #12]
 800a204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a208:	e034      	b.n	800a274 <__swsetup_r+0x9c>
 800a20a:	0758      	lsls	r0, r3, #29
 800a20c:	d512      	bpl.n	800a234 <__swsetup_r+0x5c>
 800a20e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a210:	b141      	cbz	r1, 800a224 <__swsetup_r+0x4c>
 800a212:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a216:	4299      	cmp	r1, r3
 800a218:	d002      	beq.n	800a220 <__swsetup_r+0x48>
 800a21a:	4628      	mov	r0, r5
 800a21c:	f7fd fe7a 	bl	8007f14 <_free_r>
 800a220:	2300      	movs	r3, #0
 800a222:	6363      	str	r3, [r4, #52]	; 0x34
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	2300      	movs	r3, #0
 800a22e:	6063      	str	r3, [r4, #4]
 800a230:	6923      	ldr	r3, [r4, #16]
 800a232:	6023      	str	r3, [r4, #0]
 800a234:	89a3      	ldrh	r3, [r4, #12]
 800a236:	f043 0308 	orr.w	r3, r3, #8
 800a23a:	81a3      	strh	r3, [r4, #12]
 800a23c:	6923      	ldr	r3, [r4, #16]
 800a23e:	b94b      	cbnz	r3, 800a254 <__swsetup_r+0x7c>
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a24a:	d003      	beq.n	800a254 <__swsetup_r+0x7c>
 800a24c:	4621      	mov	r1, r4
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 f840 	bl	800a2d4 <__smakebuf_r>
 800a254:	89a0      	ldrh	r0, [r4, #12]
 800a256:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a25a:	f010 0301 	ands.w	r3, r0, #1
 800a25e:	d00a      	beq.n	800a276 <__swsetup_r+0x9e>
 800a260:	2300      	movs	r3, #0
 800a262:	60a3      	str	r3, [r4, #8]
 800a264:	6963      	ldr	r3, [r4, #20]
 800a266:	425b      	negs	r3, r3
 800a268:	61a3      	str	r3, [r4, #24]
 800a26a:	6923      	ldr	r3, [r4, #16]
 800a26c:	b943      	cbnz	r3, 800a280 <__swsetup_r+0xa8>
 800a26e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a272:	d1c4      	bne.n	800a1fe <__swsetup_r+0x26>
 800a274:	bd38      	pop	{r3, r4, r5, pc}
 800a276:	0781      	lsls	r1, r0, #30
 800a278:	bf58      	it	pl
 800a27a:	6963      	ldrpl	r3, [r4, #20]
 800a27c:	60a3      	str	r3, [r4, #8]
 800a27e:	e7f4      	b.n	800a26a <__swsetup_r+0x92>
 800a280:	2000      	movs	r0, #0
 800a282:	e7f7      	b.n	800a274 <__swsetup_r+0x9c>
 800a284:	200001d0 	.word	0x200001d0

0800a288 <__swhatbuf_r>:
 800a288:	b570      	push	{r4, r5, r6, lr}
 800a28a:	460c      	mov	r4, r1
 800a28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a290:	2900      	cmp	r1, #0
 800a292:	b096      	sub	sp, #88	; 0x58
 800a294:	4615      	mov	r5, r2
 800a296:	461e      	mov	r6, r3
 800a298:	da0d      	bge.n	800a2b6 <__swhatbuf_r+0x2e>
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a2a0:	f04f 0100 	mov.w	r1, #0
 800a2a4:	bf0c      	ite	eq
 800a2a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a2aa:	2340      	movne	r3, #64	; 0x40
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	6031      	str	r1, [r6, #0]
 800a2b0:	602b      	str	r3, [r5, #0]
 800a2b2:	b016      	add	sp, #88	; 0x58
 800a2b4:	bd70      	pop	{r4, r5, r6, pc}
 800a2b6:	466a      	mov	r2, sp
 800a2b8:	f000 f848 	bl	800a34c <_fstat_r>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	dbec      	blt.n	800a29a <__swhatbuf_r+0x12>
 800a2c0:	9901      	ldr	r1, [sp, #4]
 800a2c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a2c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a2ca:	4259      	negs	r1, r3
 800a2cc:	4159      	adcs	r1, r3
 800a2ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2d2:	e7eb      	b.n	800a2ac <__swhatbuf_r+0x24>

0800a2d4 <__smakebuf_r>:
 800a2d4:	898b      	ldrh	r3, [r1, #12]
 800a2d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2d8:	079d      	lsls	r5, r3, #30
 800a2da:	4606      	mov	r6, r0
 800a2dc:	460c      	mov	r4, r1
 800a2de:	d507      	bpl.n	800a2f0 <__smakebuf_r+0x1c>
 800a2e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	6123      	str	r3, [r4, #16]
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	6163      	str	r3, [r4, #20]
 800a2ec:	b002      	add	sp, #8
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	ab01      	add	r3, sp, #4
 800a2f2:	466a      	mov	r2, sp
 800a2f4:	f7ff ffc8 	bl	800a288 <__swhatbuf_r>
 800a2f8:	9900      	ldr	r1, [sp, #0]
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f7fe fcff 	bl	8008d00 <_malloc_r>
 800a302:	b948      	cbnz	r0, 800a318 <__smakebuf_r+0x44>
 800a304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a308:	059a      	lsls	r2, r3, #22
 800a30a:	d4ef      	bmi.n	800a2ec <__smakebuf_r+0x18>
 800a30c:	f023 0303 	bic.w	r3, r3, #3
 800a310:	f043 0302 	orr.w	r3, r3, #2
 800a314:	81a3      	strh	r3, [r4, #12]
 800a316:	e7e3      	b.n	800a2e0 <__smakebuf_r+0xc>
 800a318:	89a3      	ldrh	r3, [r4, #12]
 800a31a:	6020      	str	r0, [r4, #0]
 800a31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a320:	81a3      	strh	r3, [r4, #12]
 800a322:	9b00      	ldr	r3, [sp, #0]
 800a324:	6163      	str	r3, [r4, #20]
 800a326:	9b01      	ldr	r3, [sp, #4]
 800a328:	6120      	str	r0, [r4, #16]
 800a32a:	b15b      	cbz	r3, 800a344 <__smakebuf_r+0x70>
 800a32c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a330:	4630      	mov	r0, r6
 800a332:	f000 f81d 	bl	800a370 <_isatty_r>
 800a336:	b128      	cbz	r0, 800a344 <__smakebuf_r+0x70>
 800a338:	89a3      	ldrh	r3, [r4, #12]
 800a33a:	f023 0303 	bic.w	r3, r3, #3
 800a33e:	f043 0301 	orr.w	r3, r3, #1
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	431d      	orrs	r5, r3
 800a348:	81a5      	strh	r5, [r4, #12]
 800a34a:	e7cf      	b.n	800a2ec <__smakebuf_r+0x18>

0800a34c <_fstat_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4d07      	ldr	r5, [pc, #28]	; (800a36c <_fstat_r+0x20>)
 800a350:	2300      	movs	r3, #0
 800a352:	4604      	mov	r4, r0
 800a354:	4608      	mov	r0, r1
 800a356:	4611      	mov	r1, r2
 800a358:	602b      	str	r3, [r5, #0]
 800a35a:	f7f7 ffa6 	bl	80022aa <_fstat>
 800a35e:	1c43      	adds	r3, r0, #1
 800a360:	d102      	bne.n	800a368 <_fstat_r+0x1c>
 800a362:	682b      	ldr	r3, [r5, #0]
 800a364:	b103      	cbz	r3, 800a368 <_fstat_r+0x1c>
 800a366:	6023      	str	r3, [r4, #0]
 800a368:	bd38      	pop	{r3, r4, r5, pc}
 800a36a:	bf00      	nop
 800a36c:	20000658 	.word	0x20000658

0800a370 <_isatty_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4d06      	ldr	r5, [pc, #24]	; (800a38c <_isatty_r+0x1c>)
 800a374:	2300      	movs	r3, #0
 800a376:	4604      	mov	r4, r0
 800a378:	4608      	mov	r0, r1
 800a37a:	602b      	str	r3, [r5, #0]
 800a37c:	f7f7 ffa5 	bl	80022ca <_isatty>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_isatty_r+0x1a>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	b103      	cbz	r3, 800a38a <_isatty_r+0x1a>
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	20000658 	.word	0x20000658

0800a390 <_raise_r>:
 800a390:	291f      	cmp	r1, #31
 800a392:	b538      	push	{r3, r4, r5, lr}
 800a394:	4604      	mov	r4, r0
 800a396:	460d      	mov	r5, r1
 800a398:	d904      	bls.n	800a3a4 <_raise_r+0x14>
 800a39a:	2316      	movs	r3, #22
 800a39c:	6003      	str	r3, [r0, #0]
 800a39e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a3a6:	b112      	cbz	r2, 800a3ae <_raise_r+0x1e>
 800a3a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3ac:	b94b      	cbnz	r3, 800a3c2 <_raise_r+0x32>
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 f830 	bl	800a414 <_getpid_r>
 800a3b4:	462a      	mov	r2, r5
 800a3b6:	4601      	mov	r1, r0
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3be:	f000 b817 	b.w	800a3f0 <_kill_r>
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d00a      	beq.n	800a3dc <_raise_r+0x4c>
 800a3c6:	1c59      	adds	r1, r3, #1
 800a3c8:	d103      	bne.n	800a3d2 <_raise_r+0x42>
 800a3ca:	2316      	movs	r3, #22
 800a3cc:	6003      	str	r3, [r0, #0]
 800a3ce:	2001      	movs	r0, #1
 800a3d0:	e7e7      	b.n	800a3a2 <_raise_r+0x12>
 800a3d2:	2400      	movs	r4, #0
 800a3d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3d8:	4628      	mov	r0, r5
 800a3da:	4798      	blx	r3
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e7e0      	b.n	800a3a2 <_raise_r+0x12>

0800a3e0 <raise>:
 800a3e0:	4b02      	ldr	r3, [pc, #8]	; (800a3ec <raise+0xc>)
 800a3e2:	4601      	mov	r1, r0
 800a3e4:	6818      	ldr	r0, [r3, #0]
 800a3e6:	f7ff bfd3 	b.w	800a390 <_raise_r>
 800a3ea:	bf00      	nop
 800a3ec:	200001d0 	.word	0x200001d0

0800a3f0 <_kill_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	4d07      	ldr	r5, [pc, #28]	; (800a410 <_kill_r+0x20>)
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	602b      	str	r3, [r5, #0]
 800a3fe:	f7f7 fef5 	bl	80021ec <_kill>
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	d102      	bne.n	800a40c <_kill_r+0x1c>
 800a406:	682b      	ldr	r3, [r5, #0]
 800a408:	b103      	cbz	r3, 800a40c <_kill_r+0x1c>
 800a40a:	6023      	str	r3, [r4, #0]
 800a40c:	bd38      	pop	{r3, r4, r5, pc}
 800a40e:	bf00      	nop
 800a410:	20000658 	.word	0x20000658

0800a414 <_getpid_r>:
 800a414:	f7f7 bee2 	b.w	80021dc <_getpid>

0800a418 <_init>:
 800a418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41a:	bf00      	nop
 800a41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41e:	bc08      	pop	{r3}
 800a420:	469e      	mov	lr, r3
 800a422:	4770      	bx	lr

0800a424 <_fini>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	bf00      	nop
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr
